

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Nov 26 22:41:35 2023

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18LF4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           	psect	idataBANK0
    64  00D58E                     __pidataBANK0:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _LCD_INIT_STRING
    68  00D58E  28                 	db	40
    69  00D58F  0C                 	db	12
    70  00D590  01                 	db	1
    71  00D591  06                 	db	6
    72                           
    73                           ;initializer for _H
    74  00D592  EB                 	db	low (STR_21+2)
    75  00D593  FF                 	db	high (STR_21+2)
    76                           
    77                           ;initializer for _T
    78  00D594  EB                 	db	low (STR_21+2)
    79  00D595  FF                 	db	high (STR_21+2)
    80                           
    81                           	psect	mediumconst
    82  00FEEC                     __pmediumconst:
    83                           	opt stack 0
    84  00FEEC  00                 	db	0
    85  00FEED                     _dpowers:
    86                           	opt stack 0
    87  00FEED  0001               	dw	1
    88  00FEEF  0000               	dw	0
    89  00FEF1  000A               	dw	10
    90  00FEF3  0000               	dw	0
    91  00FEF5  0064               	dw	100
    92  00FEF7  0000               	dw	0
    93  00FEF9  03E8               	dw	1000
    94  00FEFB  0000               	dw	0
    95  00FEFD  2710               	dw	10000
    96  00FEFF  0000               	dw	0
    97  00FF01  86A0               	dw	34464
    98  00FF03  0001               	dw	1
    99  00FF05  4240               	dw	16960
   100  00FF07  000F               	dw	15
   101  00FF09  9680               	dw	38528
   102  00FF0B  0098               	dw	152
   103  00FF0D  E100               	dw	57600
   104  00FF0F  05F5               	dw	1525
   105  00FF11  CA00               	dw	51712
   106  00FF13  3B9A               	dw	15258
   107  00FF15                     __end_of_dpowers:
   108                           	opt stack 0
   109  00FF15                     __npowers_:
   110                           	opt stack 0
   111  00FF15  00                 	db	0
   112  00FF16  80                 	db	128
   113  00FF17  3F                 	db	63
   114  00FF18  CD                 	db	205
   115  00FF19  CC                 	db	204
   116  00FF1A  3D                 	db	61
   117  00FF1B  D7                 	db	215
   118  00FF1C  23                 	db	35
   119  00FF1D  3C                 	db	60
   120  00FF1E  12                 	db	18
   121  00FF1F  83                 	db	131
   122  00FF20  3A                 	db	58
   123  00FF21  B7                 	db	183
   124  00FF22  D1                 	db	209
   125  00FF23  38                 	db	56
   126  00FF24  C6                 	db	198
   127  00FF25  27                 	db	39
   128  00FF26  37                 	db	55
   129  00FF27  38                 	db	56
   130  00FF28  86                 	db	134
   131  00FF29  35                 	db	53
   132  00FF2A  C0                 	db	192
   133  00FF2B  D6                 	db	214
   134  00FF2C  33                 	db	51
   135  00FF2D  CC                 	db	204
   136  00FF2E  2B                 	db	43
   137  00FF2F  32                 	db	50
   138  00FF30  70                 	db	112
   139  00FF31  89                 	db	137
   140  00FF32  30                 	db	48
   141  00FF33  E7                 	db	231
   142  00FF34  DB                 	db	219
   143  00FF35  2E                 	db	46
   144  00FF36  E5                 	db	229
   145  00FF37  3C                 	db	60
   146  00FF38  1E                 	db	30
   147  00FF39  42                 	db	66
   148  00FF3A  A2                 	db	162
   149  00FF3B  0D                 	db	13
   150  00FF3C                     __end_of__npowers_:
   151                           	opt stack 0
   152  00FF3C                     __powers_:
   153                           	opt stack 0
   154  00FF3C  00                 	db	0
   155  00FF3D  80                 	db	128
   156  00FF3E  3F                 	db	63
   157  00FF3F  00                 	db	0
   158  00FF40  20                 	db	32
   159  00FF41  41                 	db	65
   160  00FF42  00                 	db	0
   161  00FF43  C8                 	db	200
   162  00FF44  42                 	db	66
   163  00FF45  00                 	db	0
   164  00FF46  7A                 	db	122
   165  00FF47  44                 	db	68
   166  00FF48  40                 	db	64
   167  00FF49  1C                 	db	28
   168  00FF4A  46                 	db	70
   169  00FF4B  50                 	db	80
   170  00FF4C  C3                 	db	195
   171  00FF4D  47                 	db	71
   172  00FF4E  24                 	db	36
   173  00FF4F  74                 	db	116
   174  00FF50  49                 	db	73
   175  00FF51  97                 	db	151
   176  00FF52  18                 	db	24
   177  00FF53  4B                 	db	75
   178  00FF54  BC                 	db	188
   179  00FF55  BE                 	db	190
   180  00FF56  4C                 	db	76
   181  00FF57  6B                 	db	107
   182  00FF58  6E                 	db	110
   183  00FF59  4E                 	db	78
   184  00FF5A  03                 	db	3
   185  00FF5B  15                 	db	21
   186  00FF5C  50                 	db	80
   187  00FF5D  79                 	db	121
   188  00FF5E  AD                 	db	173
   189  00FF5F  60                 	db	96
   190  00FF60  F3                 	db	243
   191  00FF61  49                 	db	73
   192  00FF62  71                 	db	113
   193  00FF63                     __end_of__powers_:
   194                           	opt stack 0
   195  00FF63                     STR_3:
   196  00FF63  4E                 	db	78	;'N'
   197  00FF64  6F                 	db	111	;'o'
   198  00FF65  72                 	db	114	;'r'
   199  00FF66  6D                 	db	109	;'m'
   200  00FF67  61                 	db	97	;'a'
   201  00FF68  6C                 	db	108	;'l'
   202  00FF69  20                 	db	32
   203  00FF6A  20                 	db	32
   204  00FF6B  20                 	db	32
   205  00FF6C  20                 	db	32
   206  00FF6D  20                 	db	32
   207  00FF6E  20                 	db	32
   208  00FF6F  20                 	db	32
   209  00FF70  20                 	db	32
   210  00FF71  20                 	db	32
   211  00FF72  00                 	db	0
   212  00FF73                     STR_16:
   213  00FF73  25                 	db	37
   214  00FF74  30                 	db	48	;'0'
   215  00FF75  32                 	db	50	;'2'
   216  00FF76  64                 	db	100	;'d'
   217  00FF77  3A                 	db	58	;':'
   218  00FF78  25                 	db	37
   219  00FF79  30                 	db	48	;'0'
   220  00FF7A  32                 	db	50	;'2'
   221  00FF7B  64                 	db	100	;'d'
   222  00FF7C  3A                 	db	58	;':'
   223  00FF7D  25                 	db	37
   224  00FF7E  30                 	db	48	;'0'
   225  00FF7F  32                 	db	50	;'2'
   226  00FF80  64                 	db	100	;'d'
   227  00FF81  00                 	db	0
   228  00FF82                     STR_5:
   229  00FF82  43                 	db	67	;'C'
   230  00FF83  6C                 	db	108	;'l'
   231  00FF84  6F                 	db	111	;'o'
   232  00FF85  63                 	db	99	;'c'
   233  00FF86  6B                 	db	107	;'k'
   234  00FF87  20                 	db	32
   235  00FF88  6D                 	db	109	;'m'
   236  00FF89  69                 	db	105	;'i'
   237  00FF8A  6E                 	db	110	;'n'
   238  00FF8B  20                 	db	32
   239  00FF8C  20                 	db	32
   240  00FF8D  20                 	db	32
   241  00FF8E  00                 	db	0
   242  00FF8F                     STR_8:
   243  00FF8F  54                 	db	84	;'T'
   244  00FF90  69                 	db	105	;'i'
   245  00FF91  6D                 	db	109	;'m'
   246  00FF92  65                 	db	101	;'e'
   247  00FF93  72                 	db	114	;'r'
   248  00FF94  20                 	db	32
   249  00FF95  6D                 	db	109	;'m'
   250  00FF96  69                 	db	105	;'i'
   251  00FF97  6E                 	db	110	;'n'
   252  00FF98  20                 	db	32
   253  00FF99  20                 	db	32
   254  00FF9A  20                 	db	32
   255  00FF9B  00                 	db	0
   256  00FF9C                     STR_4:
   257  00FF9C  43                 	db	67	;'C'
   258  00FF9D  6C                 	db	108	;'l'
   259  00FF9E  6F                 	db	111	;'o'
   260  00FF9F  63                 	db	99	;'c'
   261  00FFA0  6B                 	db	107	;'k'
   262  00FFA1  20                 	db	32
   263  00FFA2  68                 	db	104	;'h'
   264  00FFA3  72                 	db	114	;'r'
   265  00FFA4  73                 	db	115	;'s'
   266  00FFA5  20                 	db	32
   267  00FFA6  20                 	db	32
   268  00FFA7  00                 	db	0
   269  00FFA8                     STR_7:
   270  00FFA8  54                 	db	84	;'T'
   271  00FFA9  69                 	db	105	;'i'
   272  00FFAA  6D                 	db	109	;'m'
   273  00FFAB  65                 	db	101	;'e'
   274  00FFAC  72                 	db	114	;'r'
   275  00FFAD  20                 	db	32
   276  00FFAE  68                 	db	104	;'h'
   277  00FFAF  72                 	db	114	;'r'
   278  00FFB0  73                 	db	115	;'s'
   279  00FFB1  20                 	db	32
   280  00FFB2  20                 	db	32
   281  00FFB3  00                 	db	0
   282  00FFB4                     STR_6:
   283  00FFB4  43                 	db	67	;'C'
   284  00FFB5  6C                 	db	108	;'l'
   285  00FFB6  6F                 	db	111	;'o'
   286  00FFB7  63                 	db	99	;'c'
   287  00FFB8  6B                 	db	107	;'k'
   288  00FFB9  20                 	db	32
   289  00FFBA  73                 	db	115	;'s'
   290  00FFBB  65                 	db	101	;'e'
   291  00FFBC  63                 	db	99	;'c'
   292  00FFBD  20                 	db	32
   293  00FFBE  00                 	db	0
   294  00FFBF                     STR_9:
   295  00FFBF  54                 	db	84	;'T'
   296  00FFC0  69                 	db	105	;'i'
   297  00FFC1  6D                 	db	109	;'m'
   298  00FFC2  65                 	db	101	;'e'
   299  00FFC3  72                 	db	114	;'r'
   300  00FFC4  20                 	db	32
   301  00FFC5  73                 	db	115	;'s'
   302  00FFC6  65                 	db	101	;'e'
   303  00FFC7  63                 	db	99	;'c'
   304  00FFC8  20                 	db	32
   305  00FFC9  00                 	db	0
   306  00FFCA                     STR_13:
   307  00FFCA  45                 	db	69	;'E'
   308  00FFCB  6E                 	db	110	;'n'
   309  00FFCC  61                 	db	97	;'a'
   310  00FFCD  62                 	db	98	;'b'
   311  00FFCE  6C                 	db	108	;'l'
   312  00FFCF  65                 	db	101	;'e'
   313  00FFD0  64                 	db	100	;'d'
   314  00FFD1  20                 	db	32
   315  00FFD2  00                 	db	0
   316  00FFD3                     STR_12:
   317  00FFD3  44                 	db	68	;'D'
   318  00FFD4  69                 	db	105	;'i'
   319  00FFD5  73                 	db	115	;'s'
   320  00FFD6  61                 	db	97	;'a'
   321  00FFD7  62                 	db	98	;'b'
   322  00FFD8  6C                 	db	108	;'l'
   323  00FFD9  65                 	db	101	;'e'
   324  00FFDA  64                 	db	100	;'d'
   325  00FFDB  00                 	db	0
   326  00FFDC                     STR_22:
   327  00FFDC  28                 	db	40
   328  00FFDD  6E                 	db	110	;'n'
   329  00FFDE  75                 	db	117	;'u'
   330  00FFDF  6C                 	db	108	;'l'
   331  00FFE0  6C                 	db	108	;'l'
   332  00FFE1  29                 	db	41
   333  00FFE2  00                 	db	0
   334  00FFE3                     STR_20:
   335  00FFE3  53                 	db	83	;'S'
   336  00FFE4  3A                 	db	58	;':'
   337  00FFE5  4F                 	db	79	;'O'
   338  00FFE6  4E                 	db	78	;'N'
   339  00FFE7  20                 	db	32
   340  00FFE8  00                 	db	0
   341  00FFE9                     STR_21:
   342  00FFE9  53                 	db	83	;'S'
   343  00FFEA  3A                 	db	58	;':'
   344  00FFEB  4F                 	db	79	;'O'
   345  00FFEC  46                 	db	70	;'F'
   346  00FFED  46                 	db	70	;'F'
   347  00FFEE  00                 	db	0
   348  00FFEF                     STR_15:
   349  00FFEF  25                 	db	37
   350  00FFF0  34                 	db	52	;'4'
   351  00FFF1  2E                 	db	46
   352  00FFF2  32                 	db	50	;'2'
   353  00FFF3  66                 	db	102	;'f'
   354  00FFF4  00                 	db	0
   355  00FFF5                     STR_18:
   356  00FFF5  48                 	db	72	;'H'
   357  00FFF6  3A                 	db	58	;':'
   358  00FFF7  25                 	db	37
   359  00FFF8  73                 	db	115	;'s'
   360  00FFF9  00                 	db	0
   361  00FFFA                     STR_19:
   362  00FFFA  54                 	db	84	;'T'
   363  00FFFB  3A                 	db	58	;':'
   364  00FFFC  25                 	db	37
   365  00FFFD  73                 	db	115	;'s'
   366  00FFFE  00                 	db	0
   367  0000                     
   368                           ; #config settings
   369  00FFFF  00                 	db	0	; dummy byte at the end
   370  0000                     
   371                           	psect	nvCOMRAM
   372  00006F                     __pnvCOMRAM:
   373                           	opt stack 0
   374  00006F                     _h:
   375                           	opt stack 0
   376  00006F                     	ds	2
   377  000071                     _m:
   378                           	opt stack 0
   379  000071                     	ds	2
   380  000073                     _s:
   381                           	opt stack 0
   382  000073                     	ds	2
   383  000075                     _sa:
   384                           	opt stack 0
   385  000075                     	ds	2
   386                           
   387                           	psect	nvBANK0
   388  0000E6                     __pnvBANK0:
   389                           	opt stack 0
   390  0000E6                     _ma:
   391                           	opt stack 0
   392  0000E6                     	ds	2
   393  0000                     _ADCON0	set	4034
   394  0000                     _ADCON0bits	set	4034
   395  0000                     _ADCON1	set	4033
   396  0000                     _ADCON2	set	4032
   397  0000                     _ADRESH	set	4036
   398  0000                     _ADRESL	set	4035
   399  0000                     _BAUDCONbits	set	4024
   400  0000                     _CCP1CON	set	4029
   401  0000                     _CCP1CONbits	set	4029
   402  0000                     _CCPR1L	set	4030
   403  0000                     _INTCON	set	4082
   404  0000                     _INTCON2	set	4081
   405  0000                     _INTCON2bits	set	4081
   406  0000                     _INTCON3	set	4080
   407  0000                     _INTCON3bits	set	4080
   408  0000                     _INTCONbits	set	4082
   409  0000                     _IPR1	set	3999
   410  0000                     _IPR2	set	4002
   411  0000                     _PIE1	set	3997
   412  0000                     _PIE2	set	4000
   413  0000                     _PIR1	set	3998
   414  0000                     _PIR1bits	set	3998
   415  0000                     _PIR2	set	4001
   416  0000                     _PORTBbits	set	3969
   417  0000                     _PORTC	set	3970
   418  0000                     _PORTCbits	set	3970
   419  0000                     _PORTEbits	set	3972
   420  0000                     _PR2	set	4043
   421  0000                     _RCONbits	set	4048
   422  0000                     _RCREG	set	4014
   423  0000                     _RCSTA	set	4011
   424  0000                     _RCSTAbits	set	4011
   425  0000                     _SPBRG	set	4015
   426  0000                     _SPBRGH	set	4016
   427  0000                     _T2CON	set	4042
   428  0000                     _T2CONbits	set	4042
   429  0000                     _TRISA	set	3986
   430  0000                     _TRISB	set	3987
   431  0000                     _TRISC	set	3988
   432  0000                     _TRISCbits	set	3988
   433  0000                     _TRISD	set	3989
   434  0000                     _TRISE	set	3990
   435  0000                     _TXREG	set	4013
   436  0000                     _TXSTA	set	4012
   437  0000                     _TXSTAbits	set	4012
   438  0000                     
   439                           	psect	cinit
   440  00D818                     __pcinit:
   441                           	opt stack 0
   442  00D818                     start_initialization:
   443                           	opt stack 0
   444  00D818                     __initialization:
   445                           	opt stack 0
   446                           
   447                           ; Clear objects allocated to BANK0 (46 bytes)
   448  00D818  EE00  F0B0         	lfsr	0,__pbssBANK0
   449  00D81C  0E2E               	movlw	46
   450  00D81E                     clear_0:
   451  00D81E  6AEE               	clrf	postinc0,c
   452  00D820  06E8               	decf	wreg,f,c
   453  00D822  E1FD               	bnz	clear_0
   454                           
   455                           ; Clear objects allocated to COMRAM (8 bytes)
   456  00D824  EE00  F077         	lfsr	0,__pbssCOMRAM
   457  00D828  0E08               	movlw	8
   458  00D82A                     clear_1:
   459  00D82A  6AEE               	clrf	postinc0,c
   460  00D82C  06E8               	decf	wreg,f,c
   461  00D82E  E1FD               	bnz	clear_1
   462                           
   463                           ; Initialize objects allocated to BANK0 (8 bytes)
   464                           ; load TBLPTR registers with __pidataBANK0
   465  00D830  0E8E               	movlw	low __pidataBANK0
   466  00D832  6EF6               	movwf	tblptrl,c
   467  00D834  0ED5               	movlw	high __pidataBANK0
   468  00D836  6EF7               	movwf	tblptrh,c
   469  00D838  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   470  00D83A  6EF8               	movwf	tblptru,c
   471  00D83C  EE00  F0DE         	lfsr	0,__pdataBANK0
   472  00D840  EE10 F008          	lfsr	1,8
   473  00D844                     copy_data0:
   474  00D844  0009               	tblrd		*+
   475  00D846  CFF5 FFEE          	movff	tablat,postinc0
   476  00D84A  50E5               	movf	postdec1,w,c
   477  00D84C  50E1               	movf	fsr1l,w,c
   478  00D84E  E1FA               	bnz	copy_data0
   479  00D850                     end_of_initialization:
   480                           	opt stack 0
   481  00D850                     __end_of__initialization:
   482                           	opt stack 0
   483  00D850  0100               	movlb	0
   484  00D852  EFF7  F075         	goto	_main	;jump to C main() function
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           postdec1	equ	0xFE5
   492                           fsr1l	equ	0xFE1
   493                           
   494                           	psect	bssCOMRAM
   495  000077                     __pbssCOMRAM:
   496                           	opt stack 0
   497  000077                     _ha:
   498                           	opt stack 0
   499  000077                     	ds	2
   500  000079                     _mode1:
   501                           	opt stack 0
   502  000079                     	ds	2
   503  00007B                     _mode2:
   504                           	opt stack 0
   505  00007B                     	ds	2
   506  00007D                     _mode3:
   507                           	opt stack 0
   508  00007D                     	ds	2
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           postdec1	equ	0xFE5
   516                           fsr1l	equ	0xFE1
   517                           
   518                           	psect	bssBANK0
   519  0000B0                     __pbssBANK0:
   520                           	opt stack 0
   521  0000B0                     _a:
   522                           	opt stack 0
   523  0000B0                     	ds	2
   524  0000B2                     _c:
   525                           	opt stack 0
   526  0000B2                     	ds	2
   527  0000B4                     _f:
   528                           	opt stack 0
   529  0000B4                     	ds	2
   530  0000B6                     _f1:
   531                           	opt stack 0
   532  0000B6                     	ds	2
   533  0000B8                     _heater:
   534                           	opt stack 0
   535  0000B8                     	ds	2
   536  0000BA                     _i:
   537                           	opt stack 0
   538  0000BA                     	ds	2
   539  0000BC                     _mode:
   540                           	opt stack 0
   541  0000BC                     	ds	2
   542  0000BE                     _Buffer1:
   543                           	opt stack 0
   544  0000BE                     	ds	32
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1l	equ	0xFE1
   553                           
   554                           	psect	dataBANK0
   555  0000DE                     __pdataBANK0:
   556                           	opt stack 0
   557  0000DE                     _LCD_INIT_STRING:
   558                           	opt stack 0
   559  0000DE                     	ds	4
   560  0000E2                     _H:
   561                           	opt stack 0
   562  0000E2                     	ds	2
   563  0000E4                     _T:
   564                           	opt stack 0
   565  0000E4                     	ds	2
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1l	equ	0xFE1
   574                           
   575                           	psect	cstackBANK0
   576  000080                     __pcstackBANK0:
   577                           	opt stack 0
   578  000080                     main@Buffer:
   579                           	opt stack 0
   580                           
   581                           ; 32 bytes @ 0x0
   582  000080                     	ds	32
   583  0000A0                     main@AN:
   584                           	opt stack 0
   585                           
   586                           ; 9 bytes @ 0x20
   587  0000A0                     	ds	9
   588  0000A9                     main@voltage:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x29
   592  0000A9                     	ds	3
   593  0000AC                     _main$1879:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x2C
   597  0000AC                     	ds	3
   598  0000AF                     main@channel:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x2F
   602  0000AF                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           postdec1	equ	0xFE5
   610                           fsr1l	equ	0xFE1
   611                           
   612                           	psect	cstackCOMRAM
   613  000001                     __pcstackCOMRAM:
   614                           	opt stack 0
   615  000001                     ??_isdigit:
   616  000001                     ??_delay_cycles:
   617  000001                     ?_read_adc_raw_no_lib:
   618                           	opt stack 0
   619  000001                     ?___awmod:
   620                           	opt stack 0
   621  000001                     ?___ftpack:
   622                           	opt stack 0
   623  000001                     ?___ftneg:
   624                           	opt stack 0
   625  000001                     ?__tdiv_to_l_:
   626                           	opt stack 0
   627  000001                     ?__div_to_l_:
   628                           	opt stack 0
   629  000001                     ?___lldiv:
   630                           	opt stack 0
   631  000001                     delay_ms@n:
   632                           	opt stack 0
   633  000001                     ___awmod@dividend:
   634                           	opt stack 0
   635  000001                     __div_to_l_@f1:
   636                           	opt stack 0
   637  000001                     ___ftpack@arg:
   638                           	opt stack 0
   639  000001                     __tdiv_to_l_@f1:
   640                           	opt stack 0
   641  000001                     ___ftge@ff1:
   642                           	opt stack 0
   643  000001                     ___ftneg@f1:
   644                           	opt stack 0
   645  000001                     ___lldiv@dividend:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x0
   649  000001                     	ds	1
   650  000002                     _isdigit$1492:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x1
   654  000002                     	ds	1
   655  000003                     ??_read_adc_raw_no_lib:
   656  000003                     isdigit@c:
   657                           	opt stack 0
   658  000003                     delay_ms@x:
   659                           	opt stack 0
   660  000003                     ___awmod@divisor:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x2
   664  000003                     	ds	1
   665  000004                     delay_cycles@n:
   666                           	opt stack 0
   667  000004                     ___ftpack@exp:
   668                           	opt stack 0
   669  000004                     __div_to_l_@f2:
   670                           	opt stack 0
   671  000004                     __tdiv_to_l_@f2:
   672                           	opt stack 0
   673  000004                     ___ftge@ff2:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x3
   677  000004                     	ds	1
   678  000005                     ___awmod@counter:
   679                           	opt stack 0
   680  000005                     ___ftpack@sign:
   681                           	opt stack 0
   682  000005                     delay_cycles@x:
   683                           	opt stack 0
   684  000005                     read_adc_raw_no_lib@raw_value:
   685                           	opt stack 0
   686  000005                     ___lldiv@divisor:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x4
   690  000005                     	ds	1
   691  000006                     ??___ftpack:
   692  000006                     ___awmod@sign:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x5
   696  000006                     	ds	1
   697  000007                     ??__tdiv_to_l_:
   698  000007                     ??_lcd_send_nibble:
   699  000007                     ??___ftge:
   700  000007                     ?___awdiv:
   701                           	opt stack 0
   702  000007                     read_adc_raw_no_lib@channel:
   703                           	opt stack 0
   704  000007                     ___awdiv@dividend:
   705                           	opt stack 0
   706  000007                     __div_to_l_@quot:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x6
   710  000007                     	ds	1
   711  000008                     lcd_send_nibble@n:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x7
   715  000008                     	ds	1
   716  000009                     ?___lltoft:
   717                           	opt stack 0
   718  000009                     lcd_send_byte@n:
   719                           	opt stack 0
   720  000009                     ___awdiv@divisor:
   721                           	opt stack 0
   722  000009                     ___lldiv@quotient:
   723                           	opt stack 0
   724  000009                     ___lltoft@c:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x8
   728  000009                     	ds	1
   729  00000A                     lcd_send_byte@cm_data:
   730                           	opt stack 0
   731  00000A                     __tdiv_to_l_@quot:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0x9
   735  00000A                     	ds	1
   736  00000B                     lcd_init@i:
   737                           	opt stack 0
   738  00000B                     lcd_gotoxy@y:
   739                           	opt stack 0
   740  00000B                     ___awdiv@counter:
   741                           	opt stack 0
   742  00000B                     __div_to_l_@cntr:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0xA
   746  00000B                     	ds	1
   747  00000C                     lcd_gotoxy@x:
   748                           	opt stack 0
   749  00000C                     ___awdiv@sign:
   750                           	opt stack 0
   751  00000C                     __div_to_l_@exp1:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0xB
   755  00000C                     	ds	1
   756  00000D                     ??___lltoft:
   757  00000D                     lcd_gotoxy@address:
   758                           	opt stack 0
   759  00000D                     ___lldiv@counter:
   760                           	opt stack 0
   761  00000D                     ___awdiv@quotient:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0xC
   765  00000D                     	ds	1
   766  00000E                     ?___llmod:
   767                           	opt stack 0
   768  00000E                     lcd_putc@c:
   769                           	opt stack 0
   770  00000E                     __tdiv_to_l_@cntr:
   771                           	opt stack 0
   772  00000E                     ___llmod@dividend:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0xD
   776  00000E                     	ds	1
   777  00000F                     ?___wmul:
   778                           	opt stack 0
   779  00000F                     __tdiv_to_l_@exp1:
   780                           	opt stack 0
   781  00000F                     lcd_puts@s:
   782                           	opt stack 0
   783  00000F                     ___wmul@multiplier:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0xE
   787  00000F                     	ds	2
   788  000011                     ___lltoft@exp:
   789                           	opt stack 0
   790  000011                     ___wmul@multiplicand:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x10
   794  000011                     	ds	1
   795  000012                     ___llmod@divisor:
   796                           	opt stack 0
   797                           
   798                           ; 4 bytes @ 0x11
   799  000012                     	ds	1
   800  000013                     ___wmul@product:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x12
   804  000013                     	ds	2
   805  000015                     ?___ftmul:
   806                           	opt stack 0
   807  000015                     ?___awtoft:
   808                           	opt stack 0
   809  000015                     ___awtoft@c:
   810                           	opt stack 0
   811  000015                     ___ftmul@f1:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x14
   815  000015                     	ds	1
   816  000016                     ___llmod@counter:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x15
   820  000016                     	ds	2
   821  000018                     ___awtoft@sign:
   822                           	opt stack 0
   823  000018                     ___ftmul@f2:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x17
   827  000018                     	ds	1
   828  000019                     ?___ftdiv:
   829                           	opt stack 0
   830  000019                     ___ftdiv@f1:
   831                           	opt stack 0
   832                           
   833                           ; 3 bytes @ 0x18
   834  000019                     	ds	2
   835  00001B                     ??___ftmul:
   836                           
   837                           ; 1 bytes @ 0x1A
   838  00001B                     	ds	1
   839  00001C                     ___ftdiv@f2:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x1B
   843  00001C                     	ds	2
   844  00001E                     ___ftmul@exp:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x1D
   848  00001E                     	ds	1
   849  00001F                     ??___ftdiv:
   850  00001F                     ___ftmul@f3_as_product:
   851                           	opt stack 0
   852                           
   853                           ; 3 bytes @ 0x1E
   854  00001F                     	ds	3
   855  000022                     ___ftdiv@cntr:
   856                           	opt stack 0
   857  000022                     ___ftmul@cntr:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x21
   861  000022                     	ds	1
   862  000023                     ___ftmul@sign:
   863                           	opt stack 0
   864  000023                     ___ftdiv@f3:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x22
   868  000023                     	ds	1
   869  000024                     ?_fround:
   870                           	opt stack 0
   871  000024                     ?_scale:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x23
   875  000024                     	ds	2
   876  000026                     ___ftdiv@exp:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x25
   880  000026                     	ds	1
   881  000027                     ___ftdiv@sign:
   882                           	opt stack 0
   883  000027                     _fround$1881:
   884                           	opt stack 0
   885  000027                     _scale$1882:
   886                           	opt stack 0
   887                           
   888                           ; 3 bytes @ 0x26
   889  000027                     	ds	1
   890  000028                     ?_read_adc_voltage:
   891                           	opt stack 0
   892                           
   893                           ; 3 bytes @ 0x27
   894  000028                     	ds	2
   895  00002A                     scale@scl:
   896                           	opt stack 0
   897  00002A                     _fround$1880:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x29
   901  00002A                     	ds	1
   902  00002B                     ?___fttol:
   903                           	opt stack 0
   904  00002B                     read_adc_voltage@voltage:
   905                           	opt stack 0
   906  00002B                     ___fttol@f1:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x2A
   910  00002B                     	ds	2
   911  00002D                     fround@prec:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x2C
   915  00002D                     	ds	1
   916  00002E                     ?___ftadd:
   917                           	opt stack 0
   918  00002E                     read_adc_voltage@raw_value:
   919                           	opt stack 0
   920  00002E                     ___ftadd@f1:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x2D
   924  00002E                     	ds	1
   925  00002F                     ??___fttol:
   926                           
   927                           ; 1 bytes @ 0x2E
   928  00002F                     	ds	1
   929  000030                     read_adc_voltage@channel:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x2F
   933  000030                     	ds	1
   934  000031                     ___ftadd@f2:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x30
   938  000031                     	ds	3
   939  000034                     ??___ftadd:
   940  000034                     ___fttol@sign1:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x33
   944  000034                     	ds	1
   945  000035                     ___fttol@lval:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x34
   949  000035                     	ds	2
   950  000037                     ___ftadd@sign:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x36
   954  000037                     	ds	1
   955  000038                     ___ftadd@exp2:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x37
   959  000038                     	ds	1
   960  000039                     ___ftadd@exp1:
   961                           	opt stack 0
   962  000039                     ___fttol@exp1:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x38
   966  000039                     	ds	1
   967  00003A                     ?___ftsub:
   968                           	opt stack 0
   969  00003A                     ___ftsub@f1:
   970                           	opt stack 0
   971                           
   972                           ; 3 bytes @ 0x39
   973  00003A                     	ds	3
   974  00003D                     ___ftsub@f2:
   975                           	opt stack 0
   976                           
   977                           ; 3 bytes @ 0x3C
   978  00003D                     	ds	3
   979  000040                     ?_sprintf:
   980                           	opt stack 0
   981  000040                     sprintf@sp:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x3F
   985  000040                     	ds	2
   986  000042                     sprintf@f:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x41
   990  000042                     	ds	8
   991  00004A                     ??_sprintf:
   992                           
   993                           ; 1 bytes @ 0x49
   994  00004A                     	ds	6
   995  000050                     _sprintf$1883:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x4F
   999  000050                     	ds	3
  1000  000053                     sprintf@cp:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x52
  1004  000053                     	ds	2
  1005  000055                     sprintf@ap:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x54
  1009  000055                     	ds	2
  1010  000057                     sprintf@len:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x56
  1014  000057                     	ds	2
  1015  000059                     sprintf@tmpval:
  1016                           	opt stack 0
  1017                           
  1018                           ; 4 bytes @ 0x58
  1019  000059                     	ds	4
  1020  00005D                     sprintf@val:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0x5C
  1024  00005D                     	ds	4
  1025  000061                     sprintf@exp:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x60
  1029  000061                     	ds	2
  1030  000063                     sprintf@flag:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x62
  1034  000063                     	ds	2
  1035  000065                     sprintf@fval:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x64
  1039  000065                     	ds	3
  1040  000068                     sprintf@width:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x67
  1044  000068                     	ds	2
  1045  00006A                     sprintf@prec:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x69
  1049  00006A                     	ds	2
  1050  00006C                     sprintf@c:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x6B
  1054  00006C                     	ds	1
  1055  00006D                     ??_displaymode:
  1056                           
  1057                           ; 1 bytes @ 0x6C
  1058  00006D                     	ds	2
  1059  00006F                     tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           postinc0	equ	0xFEE
  1064                           wreg	equ	0xFE8
  1065                           postdec1	equ	0xFE5
  1066                           fsr1l	equ	0xFE1
  1067                           
  1068                           ; 1 bytes @ 0x6E
  1069 ;;
  1070 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1071 ;;
  1072 ;; *************** function _main *****************
  1073 ;; Defined at:
  1074 ;;		line 322 in file "Assignment_two.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  Buffer         32    0[BANK0 ] unsigned char [32]
  1079 ;;  AN              9   32[BANK0 ] float [3]
  1080 ;;  voltage         3   41[BANK0 ] float 
  1081 ;;  channel         1   47[BANK0 ] unsigned char 
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  1    wreg      void 
  1084 ;; Registers used:
  1085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Locals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1095 ;;Total ram usage:       48 bytes
  1096 ;; Hardware stack levels required when called:    6
  1097 ;; This function calls:
  1098 ;;		_SetupClock
  1099 ;;		_SetupTimer
  1100 ;;		___ftmul
  1101 ;;		_checkHeater
  1102 ;;		_checkTimer
  1103 ;;		_clock
  1104 ;;		_delay_ms
  1105 ;;		_displaymode
  1106 ;;		_init_adc_no_lib
  1107 ;;		_lcd_gotoxy
  1108 ;;		_lcd_init
  1109 ;;		_lcd_puts
  1110 ;;		_read_adc_voltage
  1111 ;;		_setupPorts
  1112 ;;		_sprintf
  1113 ;;		_switchClock
  1114 ;;		_switchMode
  1115 ;;		_switchTimer
  1116 ;;		_timerOnOff
  1117 ;; This function is called by:
  1118 ;;		Startup code after reset
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text0
  1123  00EBEE                     __ptext0:
  1124                           	opt stack 0
  1125  00EBEE                     _main:
  1126                           	opt stack 25
  1127                           
  1128                           ;Assignment_two.c: 323: char Buffer[32];
  1129                           ;Assignment_two.c: 324: float AN[3];
  1130                           ;Assignment_two.c: 325: setupPorts();
  1131                           
  1132                           ;incstack = 0
  1133  00EBEE  ECE0  F06A         	call	_setupPorts	;wreg free
  1134                           
  1135                           ;Assignment_two.c: 326: INTCON = 0;
  1136  00EBF2  0E00               	movlw	0
  1137  00EBF4  6EF2               	movwf	intcon,c	;volatile
  1138                           
  1139                           ;Assignment_two.c: 327: INTCON2 = 0;
  1140  00EBF6  0E00               	movlw	0
  1141  00EBF8  6EF1               	movwf	intcon2,c	;volatile
  1142                           
  1143                           ;Assignment_two.c: 328: INTCON3 = 0;
  1144  00EBFA  0E00               	movlw	0
  1145  00EBFC  6EF0               	movwf	intcon3,c	;volatile
  1146                           
  1147                           ;Assignment_two.c: 329: PIE1 = 0b00100000;
  1148  00EBFE  0E20               	movlw	32
  1149  00EC00  6E9D               	movwf	3997,c	;volatile
  1150                           
  1151                           ;Assignment_two.c: 330: PIR1 = 0;
  1152  00EC02  0E00               	movlw	0
  1153  00EC04  6E9E               	movwf	3998,c	;volatile
  1154                           
  1155                           ;Assignment_two.c: 331: IPR1 = 0;
  1156  00EC06  0E00               	movlw	0
  1157  00EC08  6E9F               	movwf	3999,c	;volatile
  1158                           
  1159                           ;Assignment_two.c: 332: PIE2 = 0;
  1160  00EC0A  0E00               	movlw	0
  1161  00EC0C  6EA0               	movwf	4000,c	;volatile
  1162                           
  1163                           ;Assignment_two.c: 333: PIE2 = 0;
  1164  00EC0E  0E00               	movlw	0
  1165  00EC10  6EA0               	movwf	4000,c	;volatile
  1166                           
  1167                           ;Assignment_two.c: 334: PIR2 = 0;
  1168  00EC12  0E00               	movlw	0
  1169  00EC14  6EA1               	movwf	4001,c	;volatile
  1170                           
  1171                           ;Assignment_two.c: 335: IPR2 = 0;
  1172  00EC16  0E00               	movlw	0
  1173  00EC18  6EA2               	movwf	4002,c	;volatile
  1174                           
  1175                           ;Assignment_two.c: 336: RCONbits.IPEN =0;
  1176  00EC1A  9ED0               	bcf	4048,7,c	;volatile
  1177                           
  1178                           ;Assignment_two.c: 337: INTCON2bits.INTEDG1 = 1;
  1179  00EC1C  8AF1               	bsf	intcon2,5,c	;volatile
  1180                           
  1181                           ;Assignment_two.c: 338: INTCON2bits.INTEDG0= 1;
  1182  00EC1E  8CF1               	bsf	intcon2,6,c	;volatile
  1183                           
  1184                           ;Assignment_two.c: 339: INTCONbits.GIEH = 1;
  1185  00EC20  8EF2               	bsf	intcon,7,c	;volatile
  1186                           
  1187                           ;Assignment_two.c: 340: INTCONbits.GIEL = 1;
  1188  00EC22  8CF2               	bsf	intcon,6,c	;volatile
  1189                           
  1190                           ;Assignment_two.c: 341: unsigned char channel;
  1191                           ;Assignment_two.c: 342: float voltage;
  1192                           ;Assignment_two.c: 343: T="OFF";
  1193  00EC24  0EEB               	movlw	low (STR_21+2)
  1194  00EC26  0100               	movlb	0	; () banked
  1195  00EC28  6FE4               	movwf	_T& (0+255),b
  1196  00EC2A  0EFF               	movlw	high (STR_21+2)
  1197  00EC2C  0100               	movlb	0	; () banked
  1198  00EC2E  6FE5               	movwf	(_T+1)& (0+255),b
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;Assignment_two.c: 344: mode=0;
  1202  00EC30  0E00               	movlw	0
  1203  00EC32  0100               	movlb	0	; () banked
  1204  00EC34  6FBD               	movwf	(_mode+1)& (0+255),b
  1205  00EC36  0E00               	movlw	0
  1206  00EC38  6FBC               	movwf	_mode& (0+255),b
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;Assignment_two.c: 345: mode1=0;
  1210  00EC3A  0E00               	movlw	0
  1211  00EC3C  6E7A               	movwf	_mode1+1,c
  1212  00EC3E  0E00               	movlw	0
  1213  00EC40  6E79               	movwf	_mode1,c
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;Assignment_two.c: 346: mode2=0;
  1217  00EC42  0E00               	movlw	0
  1218  00EC44  6E7C               	movwf	_mode2+1,c
  1219  00EC46  0E00               	movlw	0
  1220  00EC48  6E7B               	movwf	_mode2,c
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;Assignment_two.c: 347: mode3=0;
  1224  00EC4A  0E00               	movlw	0
  1225  00EC4C  6E7E               	movwf	_mode3+1,c
  1226  00EC4E  0E00               	movlw	0
  1227  00EC50  6E7D               	movwf	_mode3,c
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;Assignment_two.c: 348: f=0;
  1231  00EC52  0E00               	movlw	0
  1232  00EC54  0100               	movlb	0	; () banked
  1233  00EC56  6FB5               	movwf	(_f+1)& (0+255),b
  1234  00EC58  0E00               	movlw	0
  1235  00EC5A  6FB4               	movwf	_f& (0+255),b
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;Assignment_two.c: 349: s=50;m=57;h=22;
  1239  00EC5C  0E00               	movlw	0
  1240  00EC5E  6E74               	movwf	_s+1,c
  1241  00EC60  0E32               	movlw	50
  1242  00EC62  6E73               	movwf	_s,c
  1243                           
  1244                           ; BSR set to: 0
  1245  00EC64  0E00               	movlw	0
  1246  00EC66  6E72               	movwf	_m+1,c
  1247  00EC68  0E39               	movlw	57
  1248  00EC6A  6E71               	movwf	_m,c
  1249                           
  1250                           ; BSR set to: 0
  1251  00EC6C  0E00               	movlw	0
  1252  00EC6E  6E70               	movwf	_h+1,c
  1253  00EC70  0E16               	movlw	22
  1254  00EC72  6E6F               	movwf	_h,c
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;Assignment_two.c: 350: sa=12;ma=8;ha=00;
  1258  00EC74  0E00               	movlw	0
  1259  00EC76  6E76               	movwf	_sa+1,c
  1260  00EC78  0E0C               	movlw	12
  1261  00EC7A  6E75               	movwf	_sa,c
  1262                           
  1263                           ; BSR set to: 0
  1264  00EC7C  0E00               	movlw	0
  1265  00EC7E  0100               	movlb	0	; () banked
  1266  00EC80  6FE7               	movwf	(_ma+1)& (0+255),b
  1267  00EC82  0E08               	movlw	8
  1268  00EC84  6FE6               	movwf	_ma& (0+255),b
  1269                           
  1270                           ; BSR set to: 0
  1271  00EC86  0E00               	movlw	0
  1272  00EC88  6E78               	movwf	_ha+1,c
  1273  00EC8A  0E00               	movlw	0
  1274  00EC8C  6E77               	movwf	_ha,c
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;Assignment_two.c: 351: lcd_init();
  1278  00EC8E  EC09  F06D         	call	_lcd_init	;wreg free
  1279                           
  1280                           ;Assignment_two.c: 352: init_adc_no_lib();
  1281  00EC92  ECCB  F06A         	call	_init_adc_no_lib	;wreg free
  1282  00EC96                     l217:
  1283  00EC96  0004               	clrwdt		;# 
  1284                           
  1285                           ;Assignment_two.c: 356: delay_ms(200);
  1286  00EC98  0E00               	movlw	0
  1287  00EC9A  6E02               	movwf	delay_ms@n+1,c
  1288  00EC9C  0EC8               	movlw	200
  1289  00EC9E  6E01               	movwf	delay_ms@n,c
  1290  00ECA0  EC00  F06B         	call	_delay_ms	;wreg free
  1291                           
  1292                           ;Assignment_two.c: 357: i = 0;
  1293  00ECA4  0E00               	movlw	0
  1294  00ECA6  0100               	movlb	0	; () banked
  1295  00ECA8  6FBB               	movwf	(_i+1)& (0+255),b
  1296  00ECAA  0E00               	movlw	0
  1297  00ECAC  6FBA               	movwf	_i& (0+255),b
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;Assignment_two.c: 358: for (channel = 0; channel < 3; channel++) {
  1301  00ECAE  0E00               	movlw	0
  1302  00ECB0  0100               	movlb	0	; () banked
  1303  00ECB2  6FAF               	movwf	main@channel& (0+255),b
  1304  00ECB4                     l4455:
  1305                           
  1306                           ; BSR set to: 0
  1307  00ECB4  0E02               	movlw	2
  1308  00ECB6  0100               	movlb	0	; () banked
  1309  00ECB8  65AF               	cpfsgt	main@channel& (0+255),b
  1310  00ECBA  D001               	goto	l4459
  1311  00ECBC  D01C               	goto	l4467
  1312  00ECBE                     l4459:
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;Assignment_two.c: 359: voltage = read_adc_voltage((unsigned char) channel);
  1316  00ECBE  0100               	movlb	0	; () banked
  1317  00ECC0  51AF               	movf	main@channel& (0+255),w,b
  1318  00ECC2  EC6D  F06D         	call	_read_adc_voltage
  1319  00ECC6  C028  F0A9         	movff	?_read_adc_voltage,main@voltage
  1320  00ECCA  C029  F0AA         	movff	?_read_adc_voltage+1,main@voltage+1
  1321  00ECCE  C02A  F0AB         	movff	?_read_adc_voltage+2,main@voltage+2
  1322                           
  1323                           ;Assignment_two.c: 360: AN[channel] = voltage;
  1324  00ECD2  0100               	movlb	0	; () banked
  1325  00ECD4  51AF               	movf	main@channel& (0+255),w,b
  1326  00ECD6  0D03               	mullw	3
  1327  00ECD8  0EA0               	movlw	low main@AN
  1328  00ECDA  24F3               	addwf	prodl,w,c
  1329  00ECDC  6ED9               	movwf	fsr2l,c
  1330  00ECDE  0E00               	movlw	high main@AN
  1331  00ECE0  20F4               	addwfc	prodh,w,c
  1332  00ECE2  6EDA               	movwf	fsr2h,c
  1333  00ECE4  C0A9  FFDE         	movff	main@voltage,postinc2
  1334  00ECE8  C0AA  FFDE         	movff	main@voltage+1,postinc2
  1335  00ECEC  C0AB  FFDE         	movff	main@voltage+2,postinc2
  1336                           
  1337                           ; BSR set to: 0
  1338  00ECF0  0100               	movlb	0	; () banked
  1339  00ECF2  2BAF               	incf	main@channel& (0+255),f,b
  1340  00ECF4  D7DF               	goto	l4455
  1341  00ECF6                     l4467:
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;Assignment_two.c: 361: }
  1345                           ;Assignment_two.c: 365: lcd_gotoxy(12, 1);
  1346  00ECF6  0E01               	movlw	1
  1347  00ECF8  6E0B               	movwf	lcd_gotoxy@y,c
  1348  00ECFA  0E0C               	movlw	12
  1349  00ECFC  EC6B  F06C         	call	_lcd_gotoxy
  1350                           
  1351                           ;Assignment_two.c: 366: sprintf(Buffer, "%4.2f", AN[2]*100);
  1352  00ED00  C0A6  F015         	movff	main@AN+6,___ftmul@f1
  1353  00ED04  C0A7  F016         	movff	main@AN+7,___ftmul@f1+1
  1354  00ED08  C0A8  F017         	movff	main@AN+8,___ftmul@f1+2
  1355  00ED0C  0E00               	movlw	0
  1356  00ED0E  6E18               	movwf	___ftmul@f2,c
  1357  00ED10  0EC8               	movlw	200
  1358  00ED12  6E19               	movwf	___ftmul@f2+1,c
  1359  00ED14  0E42               	movlw	66
  1360  00ED16  6E1A               	movwf	___ftmul@f2+2,c
  1361  00ED18  EC5C  F070         	call	___ftmul	;wreg free
  1362  00ED1C  C015  F0AC         	movff	?___ftmul,_main$1879
  1363  00ED20  C016  F0AD         	movff	?___ftmul+1,_main$1879+1
  1364  00ED24  C017  F0AE         	movff	?___ftmul+2,_main$1879+2
  1365                           
  1366                           ;Assignment_two.c: 366: sprintf(Buffer, "%4.2f", AN[2]*100);
  1367  00ED28  0E80               	movlw	low main@Buffer
  1368  00ED2A  6E40               	movwf	sprintf@sp,c
  1369  00ED2C  0E00               	movlw	high main@Buffer
  1370  00ED2E  6E41               	movwf	sprintf@sp+1,c
  1371  00ED30  0EEF               	movlw	low STR_15
  1372  00ED32  6E42               	movwf	sprintf@f,c
  1373  00ED34  0EFF               	movlw	high STR_15
  1374  00ED36  6E43               	movwf	sprintf@f+1,c
  1375  00ED38  C0AC  F044         	movff	_main$1879,?_sprintf+4
  1376  00ED3C  C0AD  F045         	movff	_main$1879+1,?_sprintf+5
  1377  00ED40  C0AE  F046         	movff	_main$1879+2,?_sprintf+6
  1378  00ED44  ECC1  F079         	call	_sprintf	;wreg free
  1379                           
  1380                           ;Assignment_two.c: 367: lcd_puts(Buffer);
  1381  00ED48  0E80               	movlw	low main@Buffer
  1382  00ED4A  6E0F               	movwf	lcd_puts@s,c
  1383  00ED4C  0E00               	movlw	high main@Buffer
  1384  00ED4E  6E10               	movwf	lcd_puts@s+1,c
  1385  00ED50  EC24  F06B         	call	_lcd_puts	;wreg free
  1386                           
  1387                           ;Assignment_two.c: 370: if (!PORTBbits.RB2) {
  1388  00ED54  A481               	btfss	3969,2,c	;volatile
  1389                           
  1390                           ;Assignment_two.c: 371: timerOnOff();
  1391  00ED56  EC9C  F06B         	call	_timerOnOff	;wreg free
  1392                           
  1393                           ;Assignment_two.c: 372: }
  1394                           ;Assignment_two.c: 374: if (!PORTBbits.RB5) {
  1395  00ED5A  BA81               	btfsc	3969,5,c	;volatile
  1396  00ED5C  D012               	goto	l4483
  1397                           
  1398                           ;Assignment_two.c: 375: heater = !heater;
  1399  00ED5E  0100               	movlb	0	; () banked
  1400  00ED60  51B8               	movf	_heater& (0+255),w,b
  1401  00ED62  0100               	movlb	0	; () banked
  1402  00ED64  11B9               	iorwf	(_heater+1)& (0+255),w,b
  1403  00ED66  A4D8               	btfss	status,2,c
  1404  00ED68  D002               	goto	u5070
  1405  00ED6A  0E01               	movlw	1
  1406  00ED6C  D001               	goto	u5080
  1407  00ED6E                     u5070:
  1408  00ED6E  0E00               	movlw	0
  1409  00ED70                     u5080:
  1410  00ED70  0100               	movlb	0	; () banked
  1411  00ED72  6FB8               	movwf	_heater& (0+255),b
  1412  00ED74  6BB9               	clrf	(_heater+1)& (0+255),b
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;Assignment_two.c: 376: PORTCbits.RC5 = heater;
  1416  00ED76  0100               	movlb	0	; () banked
  1417  00ED78  B1B8               	btfsc	_heater& (0+255),0,b
  1418  00ED7A  D002               	bra	u5095
  1419  00ED7C  9A82               	bcf	3970,5,c	;volatile
  1420  00ED7E  D001               	bra	u5096
  1421  00ED80                     u5095:
  1422  00ED80  8A82               	bsf	3970,5,c	;volatile
  1423  00ED82                     u5096:
  1424  00ED82                     l4483:
  1425                           
  1426                           ;Assignment_two.c: 377: }
  1427                           ;Assignment_two.c: 378: if (!PORTBbits.RB0) {
  1428  00ED82  A081               	btfss	3969,0,c	;volatile
  1429                           
  1430                           ;Assignment_two.c: 379: switchMode();
  1431  00ED84  EC5D  F06B         	call	_switchMode	;wreg free
  1432                           
  1433                           ;Assignment_two.c: 380: }
  1434                           ;Assignment_two.c: 381: if (mode1 != 0) {
  1435  00ED88  5079               	movf	_mode1,w,c
  1436  00ED8A  107A               	iorwf	_mode1+1,w,c
  1437  00ED8C  A4D8               	btfss	status,2,c
  1438                           
  1439                           ;Assignment_two.c: 382: if (!PORTBbits.RB1) {
  1440  00ED8E  B281               	btfsc	3969,1,c	;volatile
  1441  00ED90  D00D               	goto	l223
  1442                           
  1443                           ;Assignment_two.c: 383: if (mode1 == 1) {
  1444  00ED92  0479               	decf	_mode1,w,c
  1445  00ED94  107A               	iorwf	_mode1+1,w,c
  1446  00ED96  A4D8               	btfss	status,2,c
  1447  00ED98  D003               	goto	l4495
  1448                           
  1449                           ;Assignment_two.c: 384: switchClock();
  1450  00ED9A  EC49  F06B         	call	_switchClock	;wreg free
  1451                           
  1452                           ;Assignment_two.c: 385: } else if (mode1 == 2) {
  1453  00ED9E  D006               	goto	l223
  1454  00EDA0                     l4495:
  1455  00EDA0  0E02               	movlw	2
  1456  00EDA2  1879               	xorwf	_mode1,w,c
  1457  00EDA4  107A               	iorwf	_mode1+1,w,c
  1458  00EDA6  B4D8               	btfsc	status,2,c
  1459                           
  1460                           ;Assignment_two.c: 386: switchTimer();
  1461  00EDA8  EC71  F06B         	call	_switchTimer	;wreg free
  1462  00EDAC                     l223:
  1463                           
  1464                           ;Assignment_two.c: 387: }
  1465                           ;Assignment_two.c: 388: }
  1466                           ;Assignment_two.c: 389: }
  1467                           ;Assignment_two.c: 391: lcd_gotoxy(1, 1);
  1468  00EDAC  0E01               	movlw	1
  1469  00EDAE  6E0B               	movwf	lcd_gotoxy@y,c
  1470  00EDB0  0E01               	movlw	1
  1471  00EDB2  EC6B  F06C         	call	_lcd_gotoxy
  1472                           
  1473                           ;Assignment_two.c: 393: if (mode1 == 0 || mode1 == 2) {
  1474  00EDB6  5079               	movf	_mode1,w,c
  1475  00EDB8  107A               	iorwf	_mode1+1,w,c
  1476  00EDBA  B4D8               	btfsc	status,2,c
  1477  00EDBC  D005               	goto	l4503
  1478  00EDBE  0E02               	movlw	2
  1479  00EDC0  1879               	xorwf	_mode1,w,c
  1480  00EDC2  107A               	iorwf	_mode1+1,w,c
  1481  00EDC4  A4D8               	btfss	status,2,c
  1482  00EDC6  D005               	goto	l4505
  1483  00EDC8                     l4503:
  1484                           
  1485                           ;Assignment_two.c: 394: clock();
  1486  00EDC8  ECA0  F06D         	call	_clock	;wreg free
  1487                           
  1488                           ;Assignment_two.c: 395: SetupTimer();
  1489  00EDCC  EC35  F073         	call	_SetupTimer	;wreg free
  1490                           
  1491                           ;Assignment_two.c: 396: } else if (mode1 == 1) {
  1492  00EDD0  D005               	goto	l4509
  1493  00EDD2                     l4505:
  1494  00EDD2  0479               	decf	_mode1,w,c
  1495  00EDD4  107A               	iorwf	_mode1+1,w,c
  1496  00EDD6  B4D8               	btfsc	status,2,c
  1497                           
  1498                           ;Assignment_two.c: 397: SetupClock();
  1499  00EDD8  EC8A  F072         	call	_SetupClock	;wreg free
  1500  00EDDC                     l4509:
  1501                           
  1502                           ;Assignment_two.c: 398: }
  1503                           ;Assignment_two.c: 401: sprintf(Buffer, "%02d:%02d:%02d", h, m, s);
  1504  00EDDC  0E80               	movlw	low main@Buffer
  1505  00EDDE  6E40               	movwf	sprintf@sp,c
  1506  00EDE0  0E00               	movlw	high main@Buffer
  1507  00EDE2  6E41               	movwf	sprintf@sp+1,c
  1508  00EDE4  0E73               	movlw	low STR_16
  1509  00EDE6  6E42               	movwf	sprintf@f,c
  1510  00EDE8  0EFF               	movlw	high STR_16
  1511  00EDEA  6E43               	movwf	sprintf@f+1,c
  1512  00EDEC  C06F  F044         	movff	_h,?_sprintf+4
  1513  00EDF0  C070  F045         	movff	_h+1,?_sprintf+5
  1514  00EDF4  C071  F046         	movff	_m,?_sprintf+6
  1515  00EDF8  C072  F047         	movff	_m+1,?_sprintf+7
  1516  00EDFC  C073  F048         	movff	_s,?_sprintf+8
  1517  00EE00  C074  F049         	movff	_s+1,?_sprintf+9
  1518  00EE04  ECC1  F079         	call	_sprintf	;wreg free
  1519                           
  1520                           ;Assignment_two.c: 402: lcd_puts(Buffer);
  1521  00EE08  0E80               	movlw	low main@Buffer
  1522  00EE0A  6E0F               	movwf	lcd_puts@s,c
  1523  00EE0C  0E00               	movlw	high main@Buffer
  1524  00EE0E  6E10               	movwf	lcd_puts@s+1,c
  1525  00EE10  EC24  F06B         	call	_lcd_puts	;wreg free
  1526                           
  1527                           ;Assignment_two.c: 403: lcd_gotoxy(1, 2);
  1528  00EE14  0E02               	movlw	2
  1529  00EE16  6E0B               	movwf	lcd_gotoxy@y,c
  1530  00EE18  0E01               	movlw	1
  1531  00EE1A  EC6B  F06C         	call	_lcd_gotoxy
  1532                           
  1533                           ;Assignment_two.c: 404: sprintf(Buffer, "%02d:%02d:%02d", ha, ma, sa);
  1534  00EE1E  0E80               	movlw	low main@Buffer
  1535  00EE20  6E40               	movwf	sprintf@sp,c
  1536  00EE22  0E00               	movlw	high main@Buffer
  1537  00EE24  6E41               	movwf	sprintf@sp+1,c
  1538  00EE26  0E73               	movlw	low STR_16
  1539  00EE28  6E42               	movwf	sprintf@f,c
  1540  00EE2A  0EFF               	movlw	high STR_16
  1541  00EE2C  6E43               	movwf	sprintf@f+1,c
  1542  00EE2E  C077  F044         	movff	_ha,?_sprintf+4
  1543  00EE32  C078  F045         	movff	_ha+1,?_sprintf+5
  1544  00EE36  C0E6  F046         	movff	_ma,?_sprintf+6
  1545  00EE3A  C0E7  F047         	movff	_ma+1,?_sprintf+7
  1546  00EE3E  C075  F048         	movff	_sa,?_sprintf+8
  1547  00EE42  C076  F049         	movff	_sa+1,?_sprintf+9
  1548  00EE46  ECC1  F079         	call	_sprintf	;wreg free
  1549                           
  1550                           ;Assignment_two.c: 405: lcd_puts(Buffer);
  1551  00EE4A  0E80               	movlw	low main@Buffer
  1552  00EE4C  6E0F               	movwf	lcd_puts@s,c
  1553  00EE4E  0E00               	movlw	high main@Buffer
  1554  00EE50  6E10               	movwf	lcd_puts@s+1,c
  1555  00EE52  EC24  F06B         	call	_lcd_puts	;wreg free
  1556                           
  1557                           ;Assignment_two.c: 407: lcd_gotoxy(1, 4);
  1558  00EE56  0E04               	movlw	4
  1559  00EE58  6E0B               	movwf	lcd_gotoxy@y,c
  1560  00EE5A  0E01               	movlw	1
  1561  00EE5C  EC6B  F06C         	call	_lcd_gotoxy
  1562                           
  1563                           ;Assignment_two.c: 408: checkHeater();
  1564  00EE60  ECEE  F06B         	call	_checkHeater	;wreg free
  1565                           
  1566                           ;Assignment_two.c: 409: sprintf(Buffer, "H:%s", H);
  1567  00EE64  0E80               	movlw	low main@Buffer
  1568  00EE66  6E40               	movwf	sprintf@sp,c
  1569  00EE68  0E00               	movlw	high main@Buffer
  1570  00EE6A  6E41               	movwf	sprintf@sp+1,c
  1571  00EE6C  0EF5               	movlw	low STR_18
  1572  00EE6E  6E42               	movwf	sprintf@f,c
  1573  00EE70  0EFF               	movlw	high STR_18
  1574  00EE72  6E43               	movwf	sprintf@f+1,c
  1575  00EE74  C0E2  F044         	movff	_H,?_sprintf+4
  1576  00EE78  C0E3  F045         	movff	_H+1,?_sprintf+5
  1577  00EE7C  ECC1  F079         	call	_sprintf	;wreg free
  1578                           
  1579                           ;Assignment_two.c: 410: lcd_puts(Buffer);
  1580  00EE80  0E80               	movlw	low main@Buffer
  1581  00EE82  6E0F               	movwf	lcd_puts@s,c
  1582  00EE84  0E00               	movlw	high main@Buffer
  1583  00EE86  6E10               	movwf	lcd_puts@s+1,c
  1584  00EE88  EC24  F06B         	call	_lcd_puts	;wreg free
  1585                           
  1586                           ;Assignment_two.c: 412: lcd_gotoxy(12, 2);
  1587  00EE8C  0E02               	movlw	2
  1588  00EE8E  6E0B               	movwf	lcd_gotoxy@y,c
  1589  00EE90  0E0C               	movlw	12
  1590  00EE92  EC6B  F06C         	call	_lcd_gotoxy
  1591                           
  1592                           ;Assignment_two.c: 413: checkTimer();
  1593  00EE96  EC2B  F06C         	call	_checkTimer	;wreg free
  1594                           
  1595                           ;Assignment_two.c: 414: sprintf(Buffer, "T:%s", T);
  1596  00EE9A  0E80               	movlw	low main@Buffer
  1597  00EE9C  6E40               	movwf	sprintf@sp,c
  1598  00EE9E  0E00               	movlw	high main@Buffer
  1599  00EEA0  6E41               	movwf	sprintf@sp+1,c
  1600  00EEA2  0EFA               	movlw	low STR_19
  1601  00EEA4  6E42               	movwf	sprintf@f,c
  1602  00EEA6  0EFF               	movlw	high STR_19
  1603  00EEA8  6E43               	movwf	sprintf@f+1,c
  1604  00EEAA  C0E4  F044         	movff	_T,?_sprintf+4
  1605  00EEAE  C0E5  F045         	movff	_T+1,?_sprintf+5
  1606  00EEB2  ECC1  F079         	call	_sprintf	;wreg free
  1607                           
  1608                           ;Assignment_two.c: 415: lcd_puts(Buffer);
  1609  00EEB6  0E80               	movlw	low main@Buffer
  1610  00EEB8  6E0F               	movwf	lcd_puts@s,c
  1611  00EEBA  0E00               	movlw	high main@Buffer
  1612  00EEBC  6E10               	movwf	lcd_puts@s+1,c
  1613  00EEBE  EC24  F06B         	call	_lcd_puts	;wreg free
  1614                           
  1615                           ;Assignment_two.c: 418: lcd_gotoxy(1, 3);
  1616  00EEC2  0E03               	movlw	3
  1617  00EEC4  6E0B               	movwf	lcd_gotoxy@y,c
  1618  00EEC6  0E01               	movlw	1
  1619  00EEC8  EC6B  F06C         	call	_lcd_gotoxy
  1620                           
  1621                           ;Assignment_two.c: 419: displaymode();
  1622  00EECC  ECD6  F070         	call	_displaymode	;wreg free
  1623                           
  1624                           ;Assignment_two.c: 420: lcd_puts(Buffer1);
  1625  00EED0  0EBE               	movlw	low _Buffer1
  1626  00EED2  6E0F               	movwf	lcd_puts@s,c
  1627  00EED4  0E00               	movlw	high _Buffer1
  1628  00EED6  6E10               	movwf	lcd_puts@s+1,c
  1629  00EED8  EC24  F06B         	call	_lcd_puts	;wreg free
  1630                           
  1631                           ;Assignment_two.c: 422: lcd_gotoxy(12, 4);
  1632  00EEDC  0E04               	movlw	4
  1633  00EEDE  6E0B               	movwf	lcd_gotoxy@y,c
  1634  00EEE0  0E0C               	movlw	12
  1635  00EEE2  EC6B  F06C         	call	_lcd_gotoxy
  1636                           
  1637                           ;Assignment_two.c: 423: checkHeater();
  1638  00EEE6  ECEE  F06B         	call	_checkHeater	;wreg free
  1639                           
  1640                           ;Assignment_two.c: 424: checkTimer();
  1641  00EEEA  EC2B  F06C         	call	_checkTimer	;wreg free
  1642                           
  1643                           ;Assignment_two.c: 425: if (f == 1 && f1 == 1) {
  1644  00EEEE  0100               	movlb	0	; () banked
  1645  00EEF0  05B4               	decf	_f& (0+255),w,b
  1646  00EEF2  0100               	movlb	0	; () banked
  1647  00EEF4  11B5               	iorwf	(_f+1)& (0+255),w,b
  1648  00EEF6  A4D8               	btfss	status,2,c
  1649  00EEF8  D011               	goto	l4543
  1650                           
  1651                           ; BSR set to: 0
  1652  00EEFA  0100               	movlb	0	; () banked
  1653  00EEFC  05B6               	decf	_f1& (0+255),w,b
  1654  00EEFE  0100               	movlb	0	; () banked
  1655  00EF00  11B7               	iorwf	(_f1+1)& (0+255),w,b
  1656  00EF02  A4D8               	btfss	status,2,c
  1657  00EF04  D00B               	goto	l4543
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;Assignment_two.c: 426: sprintf(Buffer, "S:ON ");}
  1661  00EF06  0E80               	movlw	low main@Buffer
  1662  00EF08  6E40               	movwf	sprintf@sp,c
  1663  00EF0A  0E00               	movlw	high main@Buffer
  1664  00EF0C  6E41               	movwf	sprintf@sp+1,c
  1665  00EF0E  0EE3               	movlw	low STR_20
  1666  00EF10  6E42               	movwf	sprintf@f,c
  1667  00EF12  0EFF               	movlw	high STR_20
  1668  00EF14  6E43               	movwf	sprintf@f+1,c
  1669  00EF16  ECC1  F079         	call	_sprintf	;wreg free
  1670  00EF1A  D00A               	goto	l4545
  1671  00EF1C                     l4543:
  1672                           
  1673                           ;Assignment_two.c: 427: else {
  1674                           ;Assignment_two.c: 428: sprintf(Buffer, "S:OFF");}
  1675  00EF1C  0E80               	movlw	low main@Buffer
  1676  00EF1E  6E40               	movwf	sprintf@sp,c
  1677  00EF20  0E00               	movlw	high main@Buffer
  1678  00EF22  6E41               	movwf	sprintf@sp+1,c
  1679  00EF24  0EE9               	movlw	low STR_21
  1680  00EF26  6E42               	movwf	sprintf@f,c
  1681  00EF28  0EFF               	movlw	high STR_21
  1682  00EF2A  6E43               	movwf	sprintf@f+1,c
  1683  00EF2C  ECC1  F079         	call	_sprintf	;wreg free
  1684  00EF30                     l4545:
  1685                           
  1686                           ;Assignment_two.c: 429: lcd_puts(Buffer);
  1687  00EF30  0E80               	movlw	low main@Buffer
  1688  00EF32  6E0F               	movwf	lcd_puts@s,c
  1689  00EF34  0E00               	movlw	high main@Buffer
  1690  00EF36  6E10               	movwf	lcd_puts@s+1,c
  1691  00EF38  EC24  F06B         	call	_lcd_puts	;wreg free
  1692                           
  1693                           ;Assignment_two.c: 432: delay_ms(500);
  1694  00EF3C  0E01               	movlw	1
  1695  00EF3E  6E02               	movwf	delay_ms@n+1,c
  1696  00EF40  0EF4               	movlw	244
  1697  00EF42  6E01               	movwf	delay_ms@n,c
  1698  00EF44  EC00  F06B         	call	_delay_ms	;wreg free
  1699  00EF48  D6A6               	goto	l217
  1700  00EF4A                     __end_of_main:
  1701                           	opt stack 0
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           prodh	equ	0xFF4
  1707                           prodl	equ	0xFF3
  1708                           intcon	equ	0xFF2
  1709                           intcon2	equ	0xFF1
  1710                           intcon3	equ	0xFF0
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           postdec1	equ	0xFE5
  1714                           fsr1l	equ	0xFE1
  1715                           postinc2	equ	0xFDE
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _timerOnOff *****************
  1721 ;; Defined at:
  1722 ;;		line 308 in file "Assignment_two.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;		None
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;		None
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  1    wreg      void 
  1729 ;; Registers used:
  1730 ;;		wreg, status,2, status,0
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;Total ram usage:        0 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; This function calls:
  1743 ;;		Nothing
  1744 ;; This function is called by:
  1745 ;;		_main
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text1
  1750  00D738                     __ptext1:
  1751                           	opt stack 0
  1752  00D738                     _timerOnOff:
  1753                           	opt stack 30
  1754                           
  1755                           ;Assignment_two.c: 310: INTCON3bits.INT2IF=0;
  1756                           
  1757                           ;incstack = 0
  1758  00D738  92F0               	bcf	intcon3,1,c	;volatile
  1759                           
  1760                           ;Assignment_two.c: 312: if(mode==1)
  1761  00D73A  0100               	movlb	0	; () banked
  1762  00D73C  05BC               	decf	_mode& (0+255),w,b
  1763  00D73E  0100               	movlb	0	; () banked
  1764  00D740  11BD               	iorwf	(_mode+1)& (0+255),w,b
  1765  00D742  A4D8               	btfss	status,2,c
  1766  00D744  D006               	goto	l4335
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;Assignment_two.c: 313: {
  1770                           ;Assignment_two.c: 314: mode=0;
  1771  00D746  0E00               	movlw	0
  1772  00D748  0100               	movlb	0	; () banked
  1773  00D74A  6FBD               	movwf	(_mode+1)& (0+255),b
  1774  00D74C  0E00               	movlw	0
  1775  00D74E  6FBC               	movwf	_mode& (0+255),b
  1776                           
  1777                           ;Assignment_two.c: 315: }
  1778  00D750  0012               	return	
  1779  00D752                     l4335:
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;Assignment_two.c: 316: else if(mode==0){
  1783  00D752  0100               	movlb	0	; () banked
  1784  00D754  51BC               	movf	_mode& (0+255),w,b
  1785  00D756  0100               	movlb	0	; () banked
  1786  00D758  11BD               	iorwf	(_mode+1)& (0+255),w,b
  1787  00D75A  A4D8               	btfss	status,2,c
  1788  00D75C  0012               	return	
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;Assignment_two.c: 317: mode=1;
  1792  00D75E  0E00               	movlw	0
  1793  00D760  0100               	movlb	0	; () banked
  1794  00D762  6FBD               	movwf	(_mode+1)& (0+255),b
  1795  00D764  0E01               	movlw	1
  1796  00D766  6FBC               	movwf	_mode& (0+255),b
  1797                           
  1798                           ; BSR set to: 0
  1799  00D768  0012               	return	
  1800  00D76A                     __end_of_timerOnOff:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           prodh	equ	0xFF4
  1807                           prodl	equ	0xFF3
  1808                           intcon	equ	0xFF2
  1809                           intcon2	equ	0xFF1
  1810                           intcon3	equ	0xFF0
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           postdec1	equ	0xFE5
  1814                           fsr1l	equ	0xFE1
  1815                           postinc2	equ	0xFDE
  1816                           fsr2h	equ	0xFDA
  1817                           fsr2l	equ	0xFD9
  1818                           status	equ	0xFD8
  1819                           
  1820 ;; *************** function _switchTimer *****************
  1821 ;; Defined at:
  1822 ;;		line 127 in file "Assignment_two.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, status,2, status,0, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    1
  1843 ;; This function calls:
  1844 ;;		_delay_ms
  1845 ;; This function is called by:
  1846 ;;		_main
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text2
  1851  00D6E2                     __ptext2:
  1852                           	opt stack 0
  1853  00D6E2                     _switchTimer:
  1854                           	opt stack 29
  1855                           
  1856                           ;Assignment_two.c: 128: INTCON3bits.INT1IF=0;
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;incstack = 0
  1860  00D6E2  90F0               	bcf	intcon3,0,c	;volatile
  1861                           
  1862                           ;Assignment_two.c: 129: delay_ms(300);
  1863  00D6E4  0E01               	movlw	1
  1864  00D6E6  6E02               	movwf	delay_ms@n+1,c
  1865  00D6E8  0E2C               	movlw	44
  1866  00D6EA  6E01               	movwf	delay_ms@n,c
  1867  00D6EC  EC00  F06B         	call	_delay_ms	;wreg free
  1868                           
  1869                           ;Assignment_two.c: 130: if(mode3==2)
  1870  00D6F0  0E02               	movlw	2
  1871  00D6F2  187D               	xorwf	_mode3,w,c
  1872  00D6F4  107E               	iorwf	_mode3+1,w,c
  1873  00D6F6  A4D8               	btfss	status,2,c
  1874  00D6F8  D005               	goto	l4095
  1875                           
  1876                           ;Assignment_two.c: 131: {
  1877                           ;Assignment_two.c: 132: mode3=0;
  1878  00D6FA  0E00               	movlw	0
  1879  00D6FC  6E7E               	movwf	_mode3+1,c
  1880  00D6FE  0E00               	movlw	0
  1881  00D700  6E7D               	movwf	_mode3,c
  1882                           
  1883                           ;Assignment_two.c: 133: }
  1884  00D702  0012               	return	
  1885  00D704                     l4095:
  1886                           
  1887                           ;Assignment_two.c: 134: else {
  1888                           ;Assignment_two.c: 135: mode3++;
  1889  00D704  4A7D               	infsnz	_mode3,f,c
  1890  00D706  2A7E               	incf	_mode3+1,f,c
  1891  00D708  0012               	return	
  1892  00D70A                     __end_of_switchTimer:
  1893                           	opt stack 0
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           prodh	equ	0xFF4
  1899                           prodl	equ	0xFF3
  1900                           intcon	equ	0xFF2
  1901                           intcon2	equ	0xFF1
  1902                           intcon3	equ	0xFF0
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           fsr1l	equ	0xFE1
  1907                           postinc2	equ	0xFDE
  1908                           fsr2h	equ	0xFDA
  1909                           fsr2l	equ	0xFD9
  1910                           status	equ	0xFD8
  1911                           
  1912 ;; *************** function _switchMode *****************
  1913 ;; Defined at:
  1914 ;;		line 115 in file "Assignment_two.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;		None
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;		None
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  1    wreg      void 
  1921 ;; Registers used:
  1922 ;;		wreg, status,2, status,0, cstack
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;Total ram usage:        0 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    1
  1935 ;; This function calls:
  1936 ;;		_delay_ms
  1937 ;; This function is called by:
  1938 ;;		_main
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text3
  1943  00D6BA                     __ptext3:
  1944                           	opt stack 0
  1945  00D6BA                     _switchMode:
  1946                           	opt stack 29
  1947                           
  1948                           ;Assignment_two.c: 116: INTCONbits.INT0IF=0;
  1949                           
  1950                           ;incstack = 0
  1951  00D6BA  92F2               	bcf	intcon,1,c	;volatile
  1952                           
  1953                           ;Assignment_two.c: 117: delay_ms(300);
  1954  00D6BC  0E01               	movlw	1
  1955  00D6BE  6E02               	movwf	delay_ms@n+1,c
  1956  00D6C0  0E2C               	movlw	44
  1957  00D6C2  6E01               	movwf	delay_ms@n,c
  1958  00D6C4  EC00  F06B         	call	_delay_ms	;wreg free
  1959                           
  1960                           ;Assignment_two.c: 118: if(mode1==2)
  1961  00D6C8  0E02               	movlw	2
  1962  00D6CA  1879               	xorwf	_mode1,w,c
  1963  00D6CC  107A               	iorwf	_mode1+1,w,c
  1964  00D6CE  A4D8               	btfss	status,2,c
  1965  00D6D0  D005               	goto	l4085
  1966                           
  1967                           ;Assignment_two.c: 119: {
  1968                           ;Assignment_two.c: 120: mode1=0;
  1969  00D6D2  0E00               	movlw	0
  1970  00D6D4  6E7A               	movwf	_mode1+1,c
  1971  00D6D6  0E00               	movlw	0
  1972  00D6D8  6E79               	movwf	_mode1,c
  1973                           
  1974                           ;Assignment_two.c: 121: }
  1975  00D6DA  0012               	return	
  1976  00D6DC                     l4085:
  1977                           
  1978                           ;Assignment_two.c: 122: else {
  1979                           ;Assignment_two.c: 123: mode1++;
  1980  00D6DC  4A79               	infsnz	_mode1,f,c
  1981  00D6DE  2A7A               	incf	_mode1+1,f,c
  1982  00D6E0  0012               	return	
  1983  00D6E2                     __end_of_switchMode:
  1984                           	opt stack 0
  1985                           tblptru	equ	0xFF8
  1986                           tblptrh	equ	0xFF7
  1987                           tblptrl	equ	0xFF6
  1988                           tablat	equ	0xFF5
  1989                           prodh	equ	0xFF4
  1990                           prodl	equ	0xFF3
  1991                           intcon	equ	0xFF2
  1992                           intcon2	equ	0xFF1
  1993                           intcon3	equ	0xFF0
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           postdec1	equ	0xFE5
  1997                           fsr1l	equ	0xFE1
  1998                           postinc2	equ	0xFDE
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _switchClock *****************
  2004 ;; Defined at:
  2005 ;;		line 139 in file "Assignment_two.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;		None
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;		None
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;Total ram usage:        0 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    1
  2026 ;; This function calls:
  2027 ;;		_delay_ms
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text4
  2034  00D692                     __ptext4:
  2035                           	opt stack 0
  2036  00D692                     _switchClock:
  2037                           	opt stack 29
  2038                           
  2039                           ;Assignment_two.c: 140: INTCON3bits.INT2IF=0;
  2040                           
  2041                           ;incstack = 0
  2042  00D692  92F0               	bcf	intcon3,1,c	;volatile
  2043                           
  2044                           ;Assignment_two.c: 141: delay_ms(300);
  2045  00D694  0E01               	movlw	1
  2046  00D696  6E02               	movwf	delay_ms@n+1,c
  2047  00D698  0E2C               	movlw	44
  2048  00D69A  6E01               	movwf	delay_ms@n,c
  2049  00D69C  EC00  F06B         	call	_delay_ms	;wreg free
  2050                           
  2051                           ;Assignment_two.c: 142: if(mode2==2)
  2052  00D6A0  0E02               	movlw	2
  2053  00D6A2  187B               	xorwf	_mode2,w,c
  2054  00D6A4  107C               	iorwf	_mode2+1,w,c
  2055  00D6A6  A4D8               	btfss	status,2,c
  2056  00D6A8  D005               	goto	l4105
  2057                           
  2058                           ;Assignment_two.c: 143: {
  2059                           ;Assignment_two.c: 144: mode2=0;
  2060  00D6AA  0E00               	movlw	0
  2061  00D6AC  6E7C               	movwf	_mode2+1,c
  2062  00D6AE  0E00               	movlw	0
  2063  00D6B0  6E7B               	movwf	_mode2,c
  2064                           
  2065                           ;Assignment_two.c: 145: }
  2066  00D6B2  0012               	return	
  2067  00D6B4                     l4105:
  2068                           
  2069                           ;Assignment_two.c: 146: else {
  2070                           ;Assignment_two.c: 147: mode2++;
  2071  00D6B4  4A7B               	infsnz	_mode2,f,c
  2072  00D6B6  2A7C               	incf	_mode2+1,f,c
  2073  00D6B8  0012               	return	
  2074  00D6BA                     __end_of_switchClock:
  2075                           	opt stack 0
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           prodh	equ	0xFF4
  2081                           prodl	equ	0xFF3
  2082                           intcon	equ	0xFF2
  2083                           intcon2	equ	0xFF1
  2084                           intcon3	equ	0xFF0
  2085                           postinc0	equ	0xFEE
  2086                           wreg	equ	0xFE8
  2087                           postdec1	equ	0xFE5
  2088                           fsr1l	equ	0xFE1
  2089                           postinc2	equ	0xFDE
  2090                           fsr2h	equ	0xFDA
  2091                           fsr2l	equ	0xFD9
  2092                           status	equ	0xFD8
  2093                           
  2094 ;; *************** function _setupPorts *****************
  2095 ;; Defined at:
  2096 ;;		line 89 in file "Assignment_two.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;Total ram usage:        0 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text5
  2124  00D5C0                     __ptext5:
  2125                           	opt stack 0
  2126  00D5C0                     _setupPorts:
  2127                           	opt stack 30
  2128                           
  2129                           ;Assignment_two.c: 90: ADCON0 = 0;
  2130                           
  2131                           ;incstack = 0
  2132  00D5C0  0E00               	movlw	0
  2133  00D5C2  6EC2               	movwf	4034,c	;volatile
  2134                           
  2135                           ;Assignment_two.c: 91: ADCON1 = 0b00001100;
  2136  00D5C4  0E0C               	movlw	12
  2137  00D5C6  6EC1               	movwf	4033,c	;volatile
  2138                           
  2139                           ;Assignment_two.c: 92: TRISB = 0xFF;
  2140  00D5C8  6893               	setf	3987,c	;volatile
  2141                           
  2142                           ;Assignment_two.c: 93: TRISC = 0x80;
  2143  00D5CA  0E80               	movlw	128
  2144  00D5CC  6E94               	movwf	3988,c	;volatile
  2145                           
  2146                           ;Assignment_two.c: 94: PORTC =0;
  2147  00D5CE  0E00               	movlw	0
  2148  00D5D0  6E82               	movwf	3970,c	;volatile
  2149                           
  2150                           ;Assignment_two.c: 95: TRISA = 0xFF;
  2151  00D5D2  6892               	setf	3986,c	;volatile
  2152                           
  2153                           ;Assignment_two.c: 96: TRISD = 0x00;
  2154  00D5D4  0E00               	movlw	0
  2155  00D5D6  6E95               	movwf	3989,c	;volatile
  2156                           
  2157                           ;Assignment_two.c: 97: TRISE = 0x00;
  2158  00D5D8  0E00               	movlw	0
  2159  00D5DA  6E96               	movwf	3990,c	;volatile
  2160  00D5DC  0012               	return		;funcret
  2161  00D5DE                     __end_of_setupPorts:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           intcon	equ	0xFF2
  2170                           intcon2	equ	0xFF1
  2171                           intcon3	equ	0xFF0
  2172                           postinc0	equ	0xFEE
  2173                           wreg	equ	0xFE8
  2174                           postdec1	equ	0xFE5
  2175                           fsr1l	equ	0xFE1
  2176                           postinc2	equ	0xFDE
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181 ;; *************** function _read_adc_voltage *****************
  2182 ;; Defined at:
  2183 ;;		line 48 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/my_adc.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;  channel         1    wreg     unsigned char 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  channel         1   47[COMRAM] unsigned char 
  2188 ;;  voltage         3   42[COMRAM] float 
  2189 ;;  raw_value       2   45[COMRAM] int 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  3   39[COMRAM] float 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2199 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;Total ram usage:        9 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    2
  2206 ;; This function calls:
  2207 ;;		___awtoft
  2208 ;;		___ftdiv
  2209 ;;		___wmul
  2210 ;;		_read_adc_raw_no_lib
  2211 ;; This function is called by:
  2212 ;;		_main
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text6
  2217  00DADA                     __ptext6:
  2218                           	opt stack 0
  2219  00DADA                     _read_adc_voltage:
  2220                           	opt stack 28
  2221                           
  2222                           ;incstack = 0
  2223                           ;read_adc_voltage@channel stored from wreg
  2224  00DADA  6E30               	movwf	read_adc_voltage@channel,c
  2225                           
  2226                           ;my_adc.c: 49: int raw_value;
  2227                           ;my_adc.c: 50: float voltage;
  2228                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  2229  00DADC  5030               	movf	read_adc_voltage@channel,w,c
  2230  00DADE  ECD1  F06B         	call	_read_adc_raw_no_lib
  2231  00DAE2  C001  F02E         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  2232  00DAE6  C002  F02F         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  2233                           
  2234                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  2235  00DAEA  C02E  F00F         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  2236  00DAEE  C02F  F010         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  2237  00DAF2  0E00               	movlw	0
  2238  00DAF4  6E12               	movwf	___wmul@multiplicand+1,c
  2239  00DAF6  0E05               	movlw	5
  2240  00DAF8  6E11               	movwf	___wmul@multiplicand,c
  2241  00DAFA  EC36  F06B         	call	___wmul	;wreg free
  2242  00DAFE  C00F  F015         	movff	?___wmul,___awtoft@c
  2243  00DB02  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  2244  00DB06  ECB5  F06B         	call	___awtoft	;wreg free
  2245  00DB0A  C015  F019         	movff	?___awtoft,___ftdiv@f1
  2246  00DB0E  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
  2247  00DB12  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
  2248  00DB16  0EC0               	movlw	192
  2249  00DB18  6E1C               	movwf	___ftdiv@f2,c
  2250  00DB1A  0E7F               	movlw	127
  2251  00DB1C  6E1D               	movwf	___ftdiv@f2+1,c
  2252  00DB1E  0E44               	movlw	68
  2253  00DB20  6E1E               	movwf	___ftdiv@f2+2,c
  2254  00DB22  EC6F  F06F         	call	___ftdiv	;wreg free
  2255  00DB26  C019  F02B         	movff	?___ftdiv,read_adc_voltage@voltage
  2256  00DB2A  C01A  F02C         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  2257  00DB2E  C01B  F02D         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  2258                           
  2259                           ;my_adc.c: 53: return voltage;
  2260  00DB32  C02B  F028         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  2261  00DB36  C02C  F029         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  2262  00DB3A  C02D  F02A         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  2263  00DB3E  0012               	return	
  2264  00DB40                     __end_of_read_adc_voltage:
  2265                           	opt stack 0
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           prodh	equ	0xFF4
  2271                           prodl	equ	0xFF3
  2272                           intcon	equ	0xFF2
  2273                           intcon2	equ	0xFF1
  2274                           intcon3	equ	0xFF0
  2275                           postinc0	equ	0xFEE
  2276                           wreg	equ	0xFE8
  2277                           postdec1	equ	0xFE5
  2278                           fsr1l	equ	0xFE1
  2279                           postinc2	equ	0xFDE
  2280                           fsr2h	equ	0xFDA
  2281                           fsr2l	equ	0xFD9
  2282                           status	equ	0xFD8
  2283                           
  2284 ;; *************** function _read_adc_raw_no_lib *****************
  2285 ;; Defined at:
  2286 ;;		line 32 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/my_adc.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  channel         1    wreg     unsigned char 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  channel         1    6[COMRAM] unsigned char 
  2291 ;;  raw_value       2    4[COMRAM] int 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  2    0[COMRAM] int 
  2294 ;; Registers used:
  2295 ;;		wreg, status,2, status,0
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;Total ram usage:        7 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; This function calls:
  2308 ;;		Nothing
  2309 ;; This function is called by:
  2310 ;;		_read_adc_voltage
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text7
  2315  00D7A2                     __ptext7:
  2316                           	opt stack 0
  2317  00D7A2                     _read_adc_raw_no_lib:
  2318                           	opt stack 29
  2319                           
  2320                           ;incstack = 0
  2321                           ;read_adc_raw_no_lib@channel stored from wreg
  2322  00D7A2  6E07               	movwf	read_adc_raw_no_lib@channel,c
  2323                           
  2324                           ;my_adc.c: 33: int raw_value;
  2325                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  2326  00D7A4  C007  F003         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  2327  00D7A8  4603               	rlncf	??_read_adc_raw_no_lib,f,c
  2328  00D7AA  4603               	rlncf	??_read_adc_raw_no_lib,f,c
  2329  00D7AC  50C2               	movf	4034,w,c	;volatile
  2330  00D7AE  1803               	xorwf	??_read_adc_raw_no_lib,w,c
  2331  00D7B0  0BC3               	andlw	-61
  2332  00D7B2  1803               	xorwf	??_read_adc_raw_no_lib,w,c
  2333  00D7B4  6EC2               	movwf	4034,c	;volatile
  2334                           
  2335                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  2336  00D7B6  82C2               	bsf	4034,1,c	;volatile
  2337  00D7B8                     l318:
  2338  00D7B8  B2C2               	btfsc	4034,1,c	;volatile
  2339  00D7BA  D7FE               	goto	l318
  2340                           
  2341                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  2342  00D7BC  50C3               	movf	4035,w,c	;volatile
  2343  00D7BE  CFC4 F003          	movff	4036,??_read_adc_raw_no_lib	;volatile
  2344  00D7C2  6A04               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  2345  00D7C4  C003  F004         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  2346  00D7C8  6A03               	clrf	??_read_adc_raw_no_lib,c
  2347  00D7CA  1003               	iorwf	??_read_adc_raw_no_lib,w,c
  2348  00D7CC  6E05               	movwf	read_adc_raw_no_lib@raw_value,c
  2349  00D7CE  5004               	movf	??_read_adc_raw_no_lib+1,w,c
  2350  00D7D0  6E06               	movwf	read_adc_raw_no_lib@raw_value+1,c
  2351                           
  2352                           ;my_adc.c: 45: return raw_value;
  2353  00D7D2  C005  F001         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  2354  00D7D6  C006  F002         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  2355  00D7DA  0012               	return	
  2356  00D7DC                     __end_of_read_adc_raw_no_lib:
  2357                           	opt stack 0
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           prodh	equ	0xFF4
  2363                           prodl	equ	0xFF3
  2364                           intcon	equ	0xFF2
  2365                           intcon2	equ	0xFF1
  2366                           intcon3	equ	0xFF0
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postdec1	equ	0xFE5
  2370                           fsr1l	equ	0xFE1
  2371                           postinc2	equ	0xFDE
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function ___ftdiv *****************
  2377 ;; Defined at:
  2378 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  f1              3   24[COMRAM] float 
  2381 ;;  f2              3   27[COMRAM] float 
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  f3              3   34[COMRAM] float 
  2384 ;;  sign            1   38[COMRAM] unsigned char 
  2385 ;;  exp             1   37[COMRAM] unsigned char 
  2386 ;;  cntr            1   33[COMRAM] unsigned char 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  3   24[COMRAM] float 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2396 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;Total ram usage:       15 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    1
  2403 ;; This function calls:
  2404 ;;		___ftpack
  2405 ;; This function is called by:
  2406 ;;		_read_adc_voltage
  2407 ;;		_set_pwm1_percent
  2408 ;;		_set_pwm1_voltage
  2409 ;;		_set_pwm1_general
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text8
  2414  00DEDE                     __ptext8:
  2415                           	opt stack 0
  2416  00DEDE                     ___ftdiv:
  2417                           	opt stack 28
  2418                           
  2419                           ;incstack = 0
  2420  00DEDE  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
  2421  00DEE2  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  2422  00DEE4  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  2423  00DEE6  341A               	rlcf	___ftdiv@f1+1,w,c
  2424  00DEE8  361F               	rlcf	??___ftdiv& (0+255),f,c
  2425  00DEEA  E301               	bnc	u4301
  2426  00DEEC  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  2427  00DEEE                     u4301:
  2428  00DEEE  501F               	movf	??___ftdiv,w,c
  2429  00DEF0  6E26               	movwf	___ftdiv@exp,c
  2430  00DEF2  5026               	movf	___ftdiv@exp,w,c
  2431  00DEF4  A4D8               	btfss	status,2,c
  2432  00DEF6  D007               	goto	l4001
  2433  00DEF8  0E00               	movlw	0
  2434  00DEFA  6E19               	movwf	?___ftdiv,c
  2435  00DEFC  0E00               	movlw	0
  2436  00DEFE  6E1A               	movwf	?___ftdiv+1,c
  2437  00DF00  0E00               	movlw	0
  2438  00DF02  6E1B               	movwf	?___ftdiv+2,c
  2439  00DF04  0012               	return	
  2440  00DF06                     l4001:
  2441  00DF06  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
  2442  00DF0A  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  2443  00DF0C  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  2444  00DF0E  341D               	rlcf	___ftdiv@f2+1,w,c
  2445  00DF10  361F               	rlcf	??___ftdiv& (0+255),f,c
  2446  00DF12  E301               	bnc	u4321
  2447  00DF14  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  2448  00DF16                     u4321:
  2449  00DF16  501F               	movf	??___ftdiv,w,c
  2450  00DF18  6E27               	movwf	___ftdiv@sign,c
  2451  00DF1A  5027               	movf	___ftdiv@sign,w,c
  2452  00DF1C  A4D8               	btfss	status,2,c
  2453  00DF1E  D007               	goto	l4007
  2454  00DF20  0E00               	movlw	0
  2455  00DF22  6E19               	movwf	?___ftdiv,c
  2456  00DF24  0E00               	movlw	0
  2457  00DF26  6E1A               	movwf	?___ftdiv+1,c
  2458  00DF28  0E00               	movlw	0
  2459  00DF2A  6E1B               	movwf	?___ftdiv+2,c
  2460  00DF2C  0012               	return	
  2461  00DF2E                     l4007:
  2462  00DF2E  0E00               	movlw	0
  2463  00DF30  6E23               	movwf	___ftdiv@f3,c
  2464  00DF32  0E00               	movlw	0
  2465  00DF34  6E24               	movwf	___ftdiv@f3+1,c
  2466  00DF36  0E00               	movlw	0
  2467  00DF38  6E25               	movwf	___ftdiv@f3+2,c
  2468  00DF3A  5027               	movf	___ftdiv@sign,w,c
  2469  00DF3C  0F89               	addlw	137
  2470  00DF3E  5E26               	subwf	___ftdiv@exp,f,c
  2471  00DF40  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
  2472  00DF44  501E               	movf	___ftdiv@f2+2,w,c
  2473  00DF46  1A27               	xorwf	___ftdiv@sign,f,c
  2474  00DF48  0E80               	movlw	128
  2475  00DF4A  1627               	andwf	___ftdiv@sign,f,c
  2476  00DF4C  8E1A               	bsf	___ftdiv@f1+1,7,c
  2477  00DF4E  0EFF               	movlw	255
  2478  00DF50  1619               	andwf	___ftdiv@f1,f,c
  2479  00DF52  0EFF               	movlw	255
  2480  00DF54  161A               	andwf	___ftdiv@f1+1,f,c
  2481  00DF56  0E00               	movlw	0
  2482  00DF58  161B               	andwf	___ftdiv@f1+2,f,c
  2483  00DF5A  8E1D               	bsf	___ftdiv@f2+1,7,c
  2484  00DF5C  0EFF               	movlw	255
  2485  00DF5E  161C               	andwf	___ftdiv@f2,f,c
  2486  00DF60  0EFF               	movlw	255
  2487  00DF62  161D               	andwf	___ftdiv@f2+1,f,c
  2488  00DF64  0E00               	movlw	0
  2489  00DF66  161E               	andwf	___ftdiv@f2+2,f,c
  2490  00DF68  0E18               	movlw	24
  2491  00DF6A  6E22               	movwf	___ftdiv@cntr,c
  2492  00DF6C                     l4027:
  2493  00DF6C  90D8               	bcf	status,0,c
  2494  00DF6E  3623               	rlcf	___ftdiv@f3,f,c
  2495  00DF70  3624               	rlcf	___ftdiv@f3+1,f,c
  2496  00DF72  3625               	rlcf	___ftdiv@f3+2,f,c
  2497  00DF74  501C               	movf	___ftdiv@f2,w,c
  2498  00DF76  5C19               	subwf	___ftdiv@f1,w,c
  2499  00DF78  501D               	movf	___ftdiv@f2+1,w,c
  2500  00DF7A  581A               	subwfb	___ftdiv@f1+1,w,c
  2501  00DF7C  501E               	movf	___ftdiv@f2+2,w,c
  2502  00DF7E  581B               	subwfb	___ftdiv@f1+2,w,c
  2503  00DF80  A0D8               	btfss	status,0,c
  2504  00DF82  D007               	goto	l858
  2505  00DF84  501C               	movf	___ftdiv@f2,w,c
  2506  00DF86  5E19               	subwf	___ftdiv@f1,f,c
  2507  00DF88  501D               	movf	___ftdiv@f2+1,w,c
  2508  00DF8A  5A1A               	subwfb	___ftdiv@f1+1,f,c
  2509  00DF8C  501E               	movf	___ftdiv@f2+2,w,c
  2510  00DF8E  5A1B               	subwfb	___ftdiv@f1+2,f,c
  2511  00DF90  8023               	bsf	___ftdiv@f3,0,c
  2512  00DF92                     l858:
  2513  00DF92  90D8               	bcf	status,0,c
  2514  00DF94  3619               	rlcf	___ftdiv@f1,f,c
  2515  00DF96  361A               	rlcf	___ftdiv@f1+1,f,c
  2516  00DF98  361B               	rlcf	___ftdiv@f1+2,f,c
  2517  00DF9A  2E22               	decfsz	___ftdiv@cntr,f,c
  2518  00DF9C  D7E7               	goto	l4027
  2519  00DF9E  C023  F001         	movff	___ftdiv@f3,___ftpack@arg
  2520  00DFA2  C024  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2521  00DFA6  C025  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2522  00DFAA  C026  F004         	movff	___ftdiv@exp,___ftpack@exp
  2523  00DFAE  C027  F005         	movff	___ftdiv@sign,___ftpack@sign
  2524  00DFB2  EC18  F06F         	call	___ftpack	;wreg free
  2525  00DFB6  C001  F019         	movff	?___ftpack,?___ftdiv
  2526  00DFBA  C002  F01A         	movff	?___ftpack+1,?___ftdiv+1
  2527  00DFBE  C003  F01B         	movff	?___ftpack+2,?___ftdiv+2
  2528  00DFC2  0012               	return	
  2529  00DFC4                     __end_of___ftdiv:
  2530                           	opt stack 0
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           prodh	equ	0xFF4
  2536                           prodl	equ	0xFF3
  2537                           intcon	equ	0xFF2
  2538                           intcon2	equ	0xFF1
  2539                           intcon3	equ	0xFF0
  2540                           postinc0	equ	0xFEE
  2541                           wreg	equ	0xFE8
  2542                           postdec1	equ	0xFE5
  2543                           fsr1l	equ	0xFE1
  2544                           postinc2	equ	0xFDE
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function ___awtoft *****************
  2550 ;; Defined at:
  2551 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  c               2   20[COMRAM] int 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  sign            1   23[COMRAM] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  3   20[COMRAM] float 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2565 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;Total ram usage:        4 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    1
  2572 ;; This function calls:
  2573 ;;		___ftpack
  2574 ;; This function is called by:
  2575 ;;		_read_adc_voltage
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text9
  2580  00D76A                     __ptext9:
  2581                           	opt stack 0
  2582  00D76A                     ___awtoft:
  2583                           	opt stack 28
  2584                           
  2585                           ;incstack = 0
  2586  00D76A  0E00               	movlw	0
  2587  00D76C  6E18               	movwf	___awtoft@sign,c
  2588  00D76E  AE16               	btfss	___awtoft@c+1,7,c
  2589  00D770  D006               	goto	l4049
  2590  00D772  6C15               	negf	___awtoft@c,c
  2591  00D774  1E16               	comf	___awtoft@c+1,f,c
  2592  00D776  B0D8               	btfsc	status,0,c
  2593  00D778  2A16               	incf	___awtoft@c+1,f,c
  2594  00D77A  0E01               	movlw	1
  2595  00D77C  6E18               	movwf	___awtoft@sign,c
  2596  00D77E                     l4049:
  2597  00D77E  C015  F001         	movff	___awtoft@c,___ftpack@arg
  2598  00D782  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2599  00D786  6A03               	clrf	___ftpack@arg+2,c
  2600  00D788  0E8E               	movlw	142
  2601  00D78A  6E04               	movwf	___ftpack@exp,c
  2602  00D78C  C018  F005         	movff	___awtoft@sign,___ftpack@sign
  2603  00D790  EC18  F06F         	call	___ftpack	;wreg free
  2604  00D794  C001  F015         	movff	?___ftpack,?___awtoft
  2605  00D798  C002  F016         	movff	?___ftpack+1,?___awtoft+1
  2606  00D79C  C003  F017         	movff	?___ftpack+2,?___awtoft+2
  2607  00D7A0  0012               	return	
  2608  00D7A2                     __end_of___awtoft:
  2609                           	opt stack 0
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon	equ	0xFF2
  2617                           intcon2	equ	0xFF1
  2618                           intcon3	equ	0xFF0
  2619                           postinc0	equ	0xFEE
  2620                           wreg	equ	0xFE8
  2621                           postdec1	equ	0xFE5
  2622                           fsr1l	equ	0xFE1
  2623                           postinc2	equ	0xFDE
  2624                           fsr2h	equ	0xFDA
  2625                           fsr2l	equ	0xFD9
  2626                           status	equ	0xFD8
  2627                           
  2628 ;; *************** function _lcd_puts *****************
  2629 ;; Defined at:
  2630 ;;		line 120 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/lcd_x8.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  s               2   14[COMRAM] PTR unsigned char 
  2633 ;;		 -> main@Buffer(32), Buffer1(32), 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;Total ram usage:        2 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    5
  2652 ;; This function calls:
  2653 ;;		_lcd_putc
  2654 ;; This function is called by:
  2655 ;;		_main
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           	psect	text10
  2660  00D648                     __ptext10:
  2661                           	opt stack 0
  2662  00D648                     _lcd_puts:
  2663                           	opt stack 25
  2664                           
  2665                           ;lcd_x8.c: 121: while (*s) {
  2666                           
  2667                           ;incstack = 0
  2668  00D648  D009               	goto	l4387
  2669  00D64A                     l4383:
  2670                           
  2671                           ;lcd_x8.c: 122: lcd_putc(*s);
  2672  00D64A  C00F  FFD9         	movff	lcd_puts@s,fsr2l
  2673  00D64E  C010  FFDA         	movff	lcd_puts@s+1,fsr2h
  2674  00D652  50DF               	movf	indf2,w,c
  2675  00D654  ECB0  F06C         	call	_lcd_putc
  2676                           
  2677                           ;lcd_x8.c: 123: s++;
  2678  00D658  4A0F               	infsnz	lcd_puts@s,f,c
  2679  00D65A  2A10               	incf	lcd_puts@s+1,f,c
  2680  00D65C                     l4387:
  2681  00D65C  C00F  FFD9         	movff	lcd_puts@s,fsr2l
  2682  00D660  C010  FFDA         	movff	lcd_puts@s+1,fsr2h
  2683  00D664  50DF               	movf	indf2,w,c
  2684  00D666  B4D8               	btfsc	status,2,c
  2685  00D668  0012               	return	
  2686  00D66A  D7EF               	goto	l4383
  2687  00D66C                     __end_of_lcd_puts:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           intcon	equ	0xFF2
  2696                           intcon2	equ	0xFF1
  2697                           intcon3	equ	0xFF0
  2698                           postinc0	equ	0xFEE
  2699                           wreg	equ	0xFE8
  2700                           postdec1	equ	0xFE5
  2701                           fsr1l	equ	0xFE1
  2702                           indf2	equ	0xFDF
  2703                           postinc2	equ	0xFDE
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _lcd_putc *****************
  2709 ;; Defined at:
  2710 ;;		line 106 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/lcd_x8.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  c               1    wreg     unsigned char 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  c               1   13[COMRAM] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;Total ram usage:        1 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    4
  2731 ;; This function calls:
  2732 ;;		_delay_ms
  2733 ;;		_lcd_gotoxy
  2734 ;;		_lcd_send_byte
  2735 ;; This function is called by:
  2736 ;;		_lcd_puts
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text11
  2741  00D960                     __ptext11:
  2742                           	opt stack 0
  2743  00D960                     _lcd_putc:
  2744                           	opt stack 25
  2745                           
  2746                           ;incstack = 0
  2747                           ;lcd_putc@c stored from wreg
  2748  00D960  6E0E               	movwf	lcd_putc@c,c
  2749                           
  2750                           ;lcd_x8.c: 107: switch (c) {
  2751  00D962  D01E               	goto	l3983
  2752  00D964                     l3973:
  2753  00D964  0E01               	movlw	1
  2754  00D966  6E09               	movwf	lcd_send_byte@n,c
  2755  00D968  0E00               	movlw	0
  2756  00D96A  EC8C  F06C         	call	_lcd_send_byte
  2757                           
  2758                           ;lcd_x8.c: 109: delay_ms(2);
  2759  00D96E  0E00               	movlw	0
  2760  00D970  6E02               	movwf	delay_ms@n+1,c
  2761  00D972  0E02               	movlw	2
  2762  00D974  6E01               	movwf	delay_ms@n,c
  2763  00D976  EC00  F06B         	call	_delay_ms	;wreg free
  2764                           
  2765                           ;lcd_x8.c: 110: break;
  2766  00D97A  0012               	return	
  2767  00D97C                     l3975:
  2768  00D97C  0E02               	movlw	2
  2769  00D97E  6E0B               	movwf	lcd_gotoxy@y,c
  2770  00D980  0E01               	movlw	1
  2771  00D982  EC6B  F06C         	call	_lcd_gotoxy
  2772                           
  2773                           ;lcd_x8.c: 112: break;
  2774  00D986  0012               	return	
  2775  00D988                     l3977:
  2776  00D988  0E10               	movlw	16
  2777  00D98A  6E09               	movwf	lcd_send_byte@n,c
  2778  00D98C  0E00               	movlw	0
  2779  00D98E  EC8C  F06C         	call	_lcd_send_byte
  2780                           
  2781                           ;lcd_x8.c: 114: break;
  2782  00D992  0012               	return	
  2783  00D994                     l3979:
  2784  00D994  C00E  F009         	movff	lcd_putc@c,lcd_send_byte@n
  2785  00D998  0E01               	movlw	1
  2786  00D99A  EC8C  F06C         	call	_lcd_send_byte
  2787                           
  2788                           ;lcd_x8.c: 117: }
  2789                           
  2790                           ;lcd_x8.c: 116: break;
  2791  00D99E  0012               	return	
  2792  00D9A0                     l3983:
  2793  00D9A0  500E               	movf	lcd_putc@c,w,c
  2794                           
  2795                           ; Switch size 1, requested type "space"
  2796                           ; Number of cases is 3, Range of values is 8 to 12
  2797                           ; switch strategies available:
  2798                           ; Name         Instructions Cycles
  2799                           ; simple_byte           10     6 (average)
  2800                           ;	Chosen strategy is simple_byte
  2801  00D9A2  0A08               	xorlw	8	; case 8
  2802  00D9A4  B4D8               	btfsc	status,2,c
  2803  00D9A6  D7F0               	goto	l3977
  2804  00D9A8  0A02               	xorlw	2	; case 10
  2805  00D9AA  B4D8               	btfsc	status,2,c
  2806  00D9AC  D7E7               	goto	l3975
  2807  00D9AE  0A06               	xorlw	6	; case 12
  2808  00D9B0  B4D8               	btfsc	status,2,c
  2809  00D9B2  D7D8               	goto	l3973
  2810  00D9B4  D7EF               	goto	l3979
  2811  00D9B6                     __end_of_lcd_putc:
  2812                           	opt stack 0
  2813                           tblptru	equ	0xFF8
  2814                           tblptrh	equ	0xFF7
  2815                           tblptrl	equ	0xFF6
  2816                           tablat	equ	0xFF5
  2817                           prodh	equ	0xFF4
  2818                           prodl	equ	0xFF3
  2819                           intcon	equ	0xFF2
  2820                           intcon2	equ	0xFF1
  2821                           intcon3	equ	0xFF0
  2822                           postinc0	equ	0xFEE
  2823                           wreg	equ	0xFE8
  2824                           postdec1	equ	0xFE5
  2825                           fsr1l	equ	0xFE1
  2826                           indf2	equ	0xFDF
  2827                           postinc2	equ	0xFDE
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _lcd_gotoxy *****************
  2833 ;; Defined at:
  2834 ;;		line 89 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/lcd_x8.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  x               1    wreg     unsigned char 
  2837 ;;  y               1   10[COMRAM] unsigned char 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  x               1   11[COMRAM] unsigned char 
  2840 ;;  address         1   12[COMRAM] unsigned char 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2850 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;Total ram usage:        3 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    3
  2857 ;; This function calls:
  2858 ;;		_lcd_send_byte
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;;		_lcd_putc
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text12
  2866  00D8D6                     __ptext12:
  2867                           	opt stack 0
  2868  00D8D6                     _lcd_gotoxy:
  2869                           	opt stack 25
  2870                           
  2871                           ;incstack = 0
  2872                           ;lcd_gotoxy@x stored from wreg
  2873  00D8D6  6E0C               	movwf	lcd_gotoxy@x,c
  2874                           
  2875                           ;lcd_x8.c: 90: unsigned char address;
  2876                           ;lcd_x8.c: 92: switch (y) {
  2877  00D8D8  D009               	goto	l3259
  2878  00D8DA                     l3249:
  2879  00D8DA  0E80               	movlw	128
  2880  00D8DC  D005               	goto	L3
  2881  00D8DE                     l3251:
  2882  00D8DE  0EC0               	movlw	192
  2883  00D8E0  D003               	goto	L3
  2884  00D8E2                     l3253:
  2885  00D8E2  0E90               	movlw	144
  2886  00D8E4  D001               	goto	L3
  2887  00D8E6                     l3255:
  2888  00D8E6  0ED0               	movlw	208
  2889  00D8E8                     L3:
  2890  00D8E8  6E0D               	movwf	lcd_gotoxy@address,c
  2891                           
  2892                           ;lcd_x8.c: 101: }
  2893                           
  2894                           ;lcd_x8.c: 100: break;
  2895  00D8EA  D00D               	goto	l3261
  2896  00D8EC                     l3259:
  2897  00D8EC  500B               	movf	lcd_gotoxy@y,w,c
  2898                           
  2899                           ; Switch size 1, requested type "space"
  2900                           ; Number of cases is 4, Range of values is 1 to 4
  2901                           ; switch strategies available:
  2902                           ; Name         Instructions Cycles
  2903                           ; simple_byte           13     7 (average)
  2904                           ;	Chosen strategy is simple_byte
  2905  00D8EE  0A01               	xorlw	1	; case 1
  2906  00D8F0  B4D8               	btfsc	status,2,c
  2907  00D8F2  D7F3               	goto	l3249
  2908  00D8F4  0A03               	xorlw	3	; case 2
  2909  00D8F6  B4D8               	btfsc	status,2,c
  2910  00D8F8  D7F2               	goto	l3251
  2911  00D8FA  0A01               	xorlw	1	; case 3
  2912  00D8FC  B4D8               	btfsc	status,2,c
  2913  00D8FE  D7F1               	goto	l3253
  2914  00D900  0A07               	xorlw	7	; case 4
  2915  00D902  B4D8               	btfsc	status,2,c
  2916  00D904  D7F0               	goto	l3255
  2917  00D906                     l3261:
  2918                           
  2919                           ;lcd_x8.c: 102: address += x - 1;
  2920  00D906  040C               	decf	lcd_gotoxy@x,w,c
  2921  00D908  260D               	addwf	lcd_gotoxy@address,f,c
  2922                           
  2923                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  2924  00D90A  500D               	movf	lcd_gotoxy@address,w,c
  2925  00D90C  0980               	iorlw	128
  2926  00D90E  6E09               	movwf	lcd_send_byte@n,c
  2927  00D910  0E00               	movlw	0
  2928  00D912  EC8C  F06C         	call	_lcd_send_byte
  2929  00D916  0012               	return		;funcret
  2930  00D918                     __end_of_lcd_gotoxy:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           intcon	equ	0xFF2
  2939                           intcon2	equ	0xFF1
  2940                           intcon3	equ	0xFF0
  2941                           postinc0	equ	0xFEE
  2942                           wreg	equ	0xFE8
  2943                           postdec1	equ	0xFE5
  2944                           fsr1l	equ	0xFE1
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _lcd_init *****************
  2952 ;; Defined at:
  2953 ;;		line 56 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/lcd_x8.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  i               1   10[COMRAM] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;Total ram usage:        1 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    3
  2974 ;; This function calls:
  2975 ;;		_delay_ms
  2976 ;;		_lcd_send_byte
  2977 ;;		_lcd_send_nibble
  2978 ;; This function is called by:
  2979 ;;		_main
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text13
  2984  00DA12                     __ptext13:
  2985                           	opt stack 0
  2986  00DA12                     _lcd_init:
  2987                           	opt stack 27
  2988                           
  2989                           ;lcd_x8.c: 58: unsigned char i;
  2990                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2991                           
  2992                           ;incstack = 0
  2993  00DA12  9484               	bcf	3972,2,c	;volatile
  2994                           
  2995                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2996  00DA14  9284               	bcf	3972,1,c	;volatile
  2997                           
  2998                           ;lcd_x8.c: 65: delay_ms(25);
  2999  00DA16  0E00               	movlw	0
  3000  00DA18  6E02               	movwf	delay_ms@n+1,c
  3001  00DA1A  0E19               	movlw	25
  3002  00DA1C  6E01               	movwf	delay_ms@n,c
  3003  00DA1E  EC00  F06B         	call	_delay_ms	;wreg free
  3004                           
  3005                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  3006  00DA22  0E01               	movlw	1
  3007  00DA24  6E0B               	movwf	lcd_init@i,c
  3008  00DA26                     l4345:
  3009  00DA26  0E03               	movlw	3
  3010  00DA28  640B               	cpfsgt	lcd_init@i,c
  3011  00DA2A  D001               	goto	l4349
  3012  00DA2C  D00B               	goto	l4355
  3013  00DA2E                     l4349:
  3014                           
  3015                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  3016  00DA2E  0E03               	movlw	3
  3017  00DA30  ECEF  F06A         	call	_lcd_send_nibble
  3018                           
  3019                           ;lcd_x8.c: 69: delay_ms(6);
  3020  00DA34  0E00               	movlw	0
  3021  00DA36  6E02               	movwf	delay_ms@n+1,c
  3022  00DA38  0E06               	movlw	6
  3023  00DA3A  6E01               	movwf	delay_ms@n,c
  3024  00DA3C  EC00  F06B         	call	_delay_ms	;wreg free
  3025  00DA40  2A0B               	incf	lcd_init@i,f,c
  3026  00DA42  D7F1               	goto	l4345
  3027  00DA44                     l4355:
  3028                           
  3029                           ;lcd_x8.c: 70: }
  3030                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  3031  00DA44  0E02               	movlw	2
  3032  00DA46  ECEF  F06A         	call	_lcd_send_nibble
  3033                           
  3034                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  3035  00DA4A  0E00               	movlw	0
  3036  00DA4C  6E0B               	movwf	lcd_init@i,c
  3037  00DA4E                     l4359:
  3038  00DA4E  0E03               	movlw	3
  3039  00DA50  640B               	cpfsgt	lcd_init@i,c
  3040  00DA52  D001               	goto	l4363
  3041  00DA54  0012               	return	
  3042  00DA56                     l4363:
  3043                           
  3044                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3045  00DA56  500B               	movf	lcd_init@i,w,c
  3046  00DA58  0D01               	mullw	1
  3047  00DA5A  0EDE               	movlw	low _LCD_INIT_STRING
  3048  00DA5C  24F3               	addwf	prodl,w,c
  3049  00DA5E  6ED9               	movwf	fsr2l,c
  3050  00DA60  0E00               	movlw	high _LCD_INIT_STRING
  3051  00DA62  20F4               	addwfc	prodh,w,c
  3052  00DA64  6EDA               	movwf	fsr2h,c
  3053  00DA66  50DF               	movf	indf2,w,c
  3054  00DA68  6E09               	movwf	lcd_send_byte@n,c
  3055  00DA6A  0E00               	movlw	0
  3056  00DA6C  EC8C  F06C         	call	_lcd_send_byte
  3057  00DA70  2A0B               	incf	lcd_init@i,f,c
  3058  00DA72  D7ED               	goto	l4359
  3059  00DA74                     __end_of_lcd_init:
  3060                           	opt stack 0
  3061                           tblptru	equ	0xFF8
  3062                           tblptrh	equ	0xFF7
  3063                           tblptrl	equ	0xFF6
  3064                           tablat	equ	0xFF5
  3065                           prodh	equ	0xFF4
  3066                           prodl	equ	0xFF3
  3067                           intcon	equ	0xFF2
  3068                           intcon2	equ	0xFF1
  3069                           intcon3	equ	0xFF0
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           postdec1	equ	0xFE5
  3073                           fsr1l	equ	0xFE1
  3074                           indf2	equ	0xFDF
  3075                           postinc2	equ	0xFDE
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function _lcd_send_byte *****************
  3081 ;; Defined at:
  3082 ;;		line 39 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/lcd_x8.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  cm_data         1    wreg     unsigned char 
  3085 ;;  n               1    8[COMRAM] unsigned char 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  cm_data         1    9[COMRAM] unsigned char 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3097 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;Total ram usage:        2 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    2
  3104 ;; This function calls:
  3105 ;;		_delay_cycles
  3106 ;;		_delay_ms
  3107 ;;		_lcd_send_nibble
  3108 ;; This function is called by:
  3109 ;;		_lcd_init
  3110 ;;		_lcd_gotoxy
  3111 ;;		_lcd_putc
  3112 ;;		_Lcd_Shift_Right
  3113 ;;		_Lcd_Shift_Left
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text14
  3118  00D918                     __ptext14:
  3119                           	opt stack 0
  3120  00D918                     _lcd_send_byte:
  3121                           	opt stack 26
  3122                           
  3123                           ;incstack = 0
  3124                           ;lcd_send_byte@cm_data stored from wreg
  3125  00D918  6E0A               	movwf	lcd_send_byte@cm_data,c
  3126                           
  3127                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  3128  00D91A  B00A               	btfsc	lcd_send_byte@cm_data,0,c
  3129  00D91C  D002               	bra	u2755
  3130  00D91E  9484               	bcf	3972,2,c	;volatile
  3131  00D920  D001               	bra	u2756
  3132  00D922                     u2755:
  3133  00D922  8484               	bsf	3972,2,c	;volatile
  3134  00D924                     u2756:
  3135                           
  3136                           ;lcd_x8.c: 44: delay_cycles(1);
  3137  00D924  0E01               	movlw	1
  3138  00D926  EC85  F06B         	call	_delay_cycles
  3139                           
  3140                           ;lcd_x8.c: 46: delay_cycles(1);
  3141  00D92A  0E01               	movlw	1
  3142  00D92C  EC85  F06B         	call	_delay_cycles
  3143                           
  3144                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  3145  00D930  9284               	bcf	3972,1,c	;volatile
  3146                           
  3147                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  3148  00D932  3809               	swapf	lcd_send_byte@n,w,c
  3149  00D934  0B0F               	andlw	15
  3150  00D936  ECEF  F06A         	call	_lcd_send_nibble
  3151                           
  3152                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  3153  00D93A  5009               	movf	lcd_send_byte@n,w,c
  3154  00D93C  0B0F               	andlw	15
  3155  00D93E  ECEF  F06A         	call	_lcd_send_nibble
  3156                           
  3157                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  3158  00D942  500A               	movf	lcd_send_byte@cm_data,w,c
  3159  00D944  B4D8               	btfsc	status,2,c
  3160  00D946  D005               	goto	l3041
  3161  00D948  0E32               	movlw	50
  3162  00D94A                     u5237:
  3163  00D94A  0004               	clrwdt	
  3164  00D94C  2EE8               	decfsz	wreg,f,c
  3165  00D94E  D7FD               	goto	u5237
  3166  00D950  0012               	return	
  3167  00D952                     l3041:
  3168                           
  3169                           ;lcd_x8.c: 51: else
  3170                           ;lcd_x8.c: 52: delay_ms(2);
  3171  00D952  0E00               	movlw	0
  3172  00D954  6E02               	movwf	delay_ms@n+1,c
  3173  00D956  0E02               	movlw	2
  3174  00D958  6E01               	movwf	delay_ms@n,c
  3175  00D95A  EC00  F06B         	call	_delay_ms	;wreg free
  3176  00D95E  0012               	return	
  3177  00D960                     __end_of_lcd_send_byte:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           prodh	equ	0xFF4
  3184                           prodl	equ	0xFF3
  3185                           intcon	equ	0xFF2
  3186                           intcon2	equ	0xFF1
  3187                           intcon3	equ	0xFF0
  3188                           postinc0	equ	0xFEE
  3189                           wreg	equ	0xFE8
  3190                           postdec1	equ	0xFE5
  3191                           fsr1l	equ	0xFE1
  3192                           indf2	equ	0xFDF
  3193                           postinc2	equ	0xFDE
  3194                           fsr2h	equ	0xFDA
  3195                           fsr2l	equ	0xFD9
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _lcd_send_nibble *****************
  3199 ;; Defined at:
  3200 ;;		line 29 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/lcd_x8.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  n               1    wreg     unsigned char 
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  n               1    7[COMRAM] unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		wreg, status,2, status,0, cstack
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;Total ram usage:        2 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    1
  3221 ;; This function calls:
  3222 ;;		_delay_cycles
  3223 ;; This function is called by:
  3224 ;;		_lcd_send_byte
  3225 ;;		_lcd_init
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text15
  3230  00D5DE                     __ptext15:
  3231                           	opt stack 0
  3232  00D5DE                     _lcd_send_nibble:
  3233                           	opt stack 26
  3234                           
  3235                           ;incstack = 0
  3236                           ;lcd_send_nibble@n stored from wreg
  3237  00D5DE  6E08               	movwf	lcd_send_nibble@n,c
  3238                           
  3239                           ;lcd_x8.c: 31: lcd.data = n;
  3240  00D5E0  C008  F007         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  3241  00D5E4  3A07               	swapf	??_lcd_send_nibble,f,c
  3242  00D5E6  5083               	movf	3971,w,c
  3243  00D5E8  1807               	xorwf	??_lcd_send_nibble,w,c
  3244  00D5EA  0B0F               	andlw	-241
  3245  00D5EC  1807               	xorwf	??_lcd_send_nibble,w,c
  3246  00D5EE  6E83               	movwf	3971,c
  3247                           
  3248                           ;lcd_x8.c: 33: delay_cycles(1);
  3249  00D5F0  0E01               	movlw	1
  3250  00D5F2  EC85  F06B         	call	_delay_cycles
  3251                           
  3252                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  3253  00D5F6  8284               	bsf	3972,1,c	;volatile
  3254                           
  3255                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  3256  00D5F8  0004               	clrwdt	
  3257  00D5FA  F000               	nop		;2 cycle nop
  3258                           
  3259                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  3260  00D5FC  9284               	bcf	3972,1,c	;volatile
  3261  00D5FE  0012               	return		;funcret
  3262  00D600                     __end_of_lcd_send_nibble:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           intcon2	equ	0xFF1
  3272                           intcon3	equ	0xFF0
  3273                           postinc0	equ	0xFEE
  3274                           wreg	equ	0xFE8
  3275                           postdec1	equ	0xFE5
  3276                           fsr1l	equ	0xFE1
  3277                           indf2	equ	0xFDF
  3278                           postinc2	equ	0xFDE
  3279                           fsr2h	equ	0xFDA
  3280                           fsr2l	equ	0xFD9
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function _delay_cycles *****************
  3284 ;; Defined at:
  3285 ;;		line 20 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/lcd_x8.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  n               1    wreg     unsigned char 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  n               1    3[COMRAM] unsigned char 
  3290 ;;  x               2    4[COMRAM] int 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;Total ram usage:        6 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		_lcd_send_nibble
  3310 ;;		_lcd_send_byte
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text16
  3315  00D70A                     __ptext16:
  3316                           	opt stack 0
  3317  00D70A                     _delay_cycles:
  3318                           	opt stack 26
  3319                           
  3320                           ;incstack = 0
  3321                           ;delay_cycles@n stored from wreg
  3322  00D70A  6E04               	movwf	delay_cycles@n,c
  3323                           
  3324                           ;lcd_x8.c: 21: int x;
  3325                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  3326  00D70C  0E00               	movlw	0
  3327  00D70E  6E06               	movwf	delay_cycles@x+1,c
  3328  00D710  0E00               	movlw	0
  3329  00D712  6E05               	movwf	delay_cycles@x,c
  3330  00D714  D003               	goto	l2971
  3331  00D716                     l255:
  3332  00D716  0004               	clrwdt		;# 
  3333  00D718  4A05               	infsnz	delay_cycles@x,f,c
  3334  00D71A  2A06               	incf	delay_cycles@x+1,f,c
  3335  00D71C                     l2971:
  3336  00D71C  5004               	movf	delay_cycles@n,w,c
  3337  00D71E  6E01               	movwf	??_delay_cycles& (0+255),c
  3338  00D720  6A02               	clrf	(??_delay_cycles+1)& (0+255),c
  3339  00D722  5005               	movf	delay_cycles@x,w,c
  3340  00D724  5C01               	subwf	??_delay_cycles,w,c
  3341  00D726  5002               	movf	??_delay_cycles+1,w,c
  3342  00D728  0A80               	xorlw	128
  3343  00D72A  6E03               	movwf	(??_delay_cycles+2)& (0+255),c
  3344  00D72C  5006               	movf	delay_cycles@x+1,w,c
  3345  00D72E  0A80               	xorlw	128
  3346  00D730  5803               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  3347  00D732  A0D8               	btfss	status,0,c
  3348  00D734  0012               	return	
  3349  00D736  D7EF               	goto	l255
  3350  00D738                     __end_of_delay_cycles:
  3351                           	opt stack 0
  3352                           tblptru	equ	0xFF8
  3353                           tblptrh	equ	0xFF7
  3354                           tblptrl	equ	0xFF6
  3355                           tablat	equ	0xFF5
  3356                           prodh	equ	0xFF4
  3357                           prodl	equ	0xFF3
  3358                           intcon	equ	0xFF2
  3359                           intcon2	equ	0xFF1
  3360                           intcon3	equ	0xFF0
  3361                           postinc0	equ	0xFEE
  3362                           wreg	equ	0xFE8
  3363                           postdec1	equ	0xFE5
  3364                           fsr1l	equ	0xFE1
  3365                           indf2	equ	0xFDF
  3366                           postinc2	equ	0xFDE
  3367                           fsr2h	equ	0xFDA
  3368                           fsr2l	equ	0xFD9
  3369                           status	equ	0xFD8
  3370                           
  3371 ;; *************** function _init_adc_no_lib *****************
  3372 ;; Defined at:
  3373 ;;		line 11 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/my_adc.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;		None
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;		None
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg, status,2
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;Total ram usage:        0 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_main
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text17
  3401  00D596                     __ptext17:
  3402                           	opt stack 0
  3403  00D596                     _init_adc_no_lib:
  3404                           	opt stack 30
  3405                           
  3406                           ;my_adc.c: 14: ADCON0 = 0;
  3407                           
  3408                           ;incstack = 0
  3409  00D596  0E00               	movlw	0
  3410  00D598  6EC2               	movwf	4034,c	;volatile
  3411                           
  3412                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  3413  00D59A  80C2               	bsf	4034,0,c	;volatile
  3414                           
  3415                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  3416  00D59C  0E89               	movlw	137
  3417  00D59E  6EC0               	movwf	4032,c	;volatile
  3418  00D5A0  0012               	return		;funcret
  3419  00D5A2                     __end_of_init_adc_no_lib:
  3420                           	opt stack 0
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           intcon2	equ	0xFF1
  3429                           intcon3	equ	0xFF0
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           postdec1	equ	0xFE5
  3433                           fsr1l	equ	0xFE1
  3434                           indf2	equ	0xFDF
  3435                           postinc2	equ	0xFDE
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _displaymode *****************
  3441 ;; Defined at:
  3442 ;;		line 152 in file "Assignment_two.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;Total ram usage:        2 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    4
  3463 ;; This function calls:
  3464 ;;		_sprintf
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text18
  3471  00E1AC                     __ptext18:
  3472                           	opt stack 0
  3473  00E1AC                     _displaymode:
  3474                           	opt stack 26
  3475                           
  3476                           ;Assignment_two.c: 154: switch(mode1){
  3477                           
  3478                           ;incstack = 0
  3479  00E1AC  D073               	goto	l4133
  3480  00E1AE                     l4109:
  3481                           
  3482                           ;Assignment_two.c: 156: sprintf(Buffer1, "Normal         ");
  3483  00E1AE  0EBE               	movlw	low _Buffer1
  3484  00E1B0  6E40               	movwf	sprintf@sp,c
  3485  00E1B2  0E00               	movlw	high _Buffer1
  3486  00E1B4  6E41               	movwf	sprintf@sp+1,c
  3487  00E1B6  0E63               	movlw	low STR_3
  3488  00E1B8  6E42               	movwf	sprintf@f,c
  3489  00E1BA  0EFF               	movlw	high STR_3
  3490  00E1BC  6E43               	movwf	sprintf@f+1,c
  3491  00E1BE  ECC1  F079         	call	_sprintf	;wreg free
  3492                           
  3493                           ;Assignment_two.c: 157: }
  3494                           ;Assignment_two.c: 158: break;
  3495  00E1C2  0012               	return	
  3496  00E1C4                     l4111:
  3497                           
  3498                           ;Assignment_two.c: 162: sprintf(Buffer1, "Clock hrs  ");
  3499  00E1C4  0EBE               	movlw	low _Buffer1
  3500  00E1C6  6E40               	movwf	sprintf@sp,c
  3501  00E1C8  0E00               	movlw	high _Buffer1
  3502  00E1CA  6E41               	movwf	sprintf@sp+1,c
  3503  00E1CC  0E9C               	movlw	low STR_4
  3504  00E1CE  6E42               	movwf	sprintf@f,c
  3505  00E1D0  0EFF               	movlw	high STR_4
  3506  00E1D2  6E43               	movwf	sprintf@f+1,c
  3507  00E1D4  ECC1  F079         	call	_sprintf	;wreg free
  3508                           
  3509                           ;Assignment_two.c: 163: break;
  3510  00E1D8  0012               	return	
  3511  00E1DA                     l4113:
  3512                           
  3513                           ;Assignment_two.c: 165: sprintf(Buffer1, "Clock min   ");
  3514  00E1DA  0EBE               	movlw	low _Buffer1
  3515  00E1DC  6E40               	movwf	sprintf@sp,c
  3516  00E1DE  0E00               	movlw	high _Buffer1
  3517  00E1E0  6E41               	movwf	sprintf@sp+1,c
  3518  00E1E2  0E82               	movlw	low STR_5
  3519  00E1E4  6E42               	movwf	sprintf@f,c
  3520  00E1E6  0EFF               	movlw	high STR_5
  3521  00E1E8  6E43               	movwf	sprintf@f+1,c
  3522  00E1EA  ECC1  F079         	call	_sprintf	;wreg free
  3523                           
  3524                           ;Assignment_two.c: 166: break;
  3525  00E1EE  0012               	return	
  3526  00E1F0                     l4115:
  3527                           
  3528                           ;Assignment_two.c: 168: sprintf(Buffer1, "Clock sec ");
  3529  00E1F0  0EBE               	movlw	low _Buffer1
  3530  00E1F2  6E40               	movwf	sprintf@sp,c
  3531  00E1F4  0E00               	movlw	high _Buffer1
  3532  00E1F6  6E41               	movwf	sprintf@sp+1,c
  3533  00E1F8  0EB4               	movlw	low STR_6
  3534  00E1FA  6E42               	movwf	sprintf@f,c
  3535  00E1FC  0EFF               	movlw	high STR_6
  3536  00E1FE  6E43               	movwf	sprintf@f+1,c
  3537  00E200  ECC1  F079         	call	_sprintf	;wreg free
  3538                           
  3539                           ;Assignment_two.c: 170: }
  3540                           
  3541                           ;Assignment_two.c: 169: break;
  3542  00E204  0012               	return	
  3543  00E206                     l4119:
  3544  00E206  C07B  F06D         	movff	_mode2,??_displaymode
  3545  00E20A  C07C  F06E         	movff	_mode2+1,??_displaymode+1
  3546                           
  3547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3548                           ; Switch size 1, requested type "space"
  3549                           ; Number of cases is 1, Range of values is 0 to 0
  3550                           ; switch strategies available:
  3551                           ; Name         Instructions Cycles
  3552                           ; simple_byte            4     3 (average)
  3553                           ;	Chosen strategy is simple_byte
  3554  00E20E  506E               	movf	??_displaymode+1,w,c
  3555  00E210  0A00               	xorlw	0	; case 0
  3556  00E212  A4D8               	btfss	status,2,c
  3557  00E214  0012               	return	
  3558                           
  3559                           ; Switch size 1, requested type "space"
  3560                           ; Number of cases is 3, Range of values is 0 to 2
  3561                           ; switch strategies available:
  3562                           ; Name         Instructions Cycles
  3563                           ; simple_byte           10     6 (average)
  3564                           ;	Chosen strategy is simple_byte
  3565  00E216  506D               	movf	??_displaymode,w,c
  3566  00E218  0A00               	xorlw	0	; case 0
  3567  00E21A  B4D8               	btfsc	status,2,c
  3568  00E21C  D7D3               	goto	l4111
  3569  00E21E  0A01               	xorlw	1	; case 1
  3570  00E220  B4D8               	btfsc	status,2,c
  3571  00E222  D7DB               	goto	l4113
  3572  00E224  0A03               	xorlw	3	; case 2
  3573  00E226  A4D8               	btfss	status,2,c
  3574                           
  3575                           ;Assignment_two.c: 171: }
  3576                           ;Assignment_two.c: 172: break;
  3577  00E228  0012               	return	
  3578  00E22A  D7E2               	goto	l4115
  3579  00E22C                     l4121:
  3580                           
  3581                           ;Assignment_two.c: 176: sprintf(Buffer1, "Timer hrs  ");
  3582  00E22C  0EBE               	movlw	low _Buffer1
  3583  00E22E  6E40               	movwf	sprintf@sp,c
  3584  00E230  0E00               	movlw	high _Buffer1
  3585  00E232  6E41               	movwf	sprintf@sp+1,c
  3586  00E234  0EA8               	movlw	low STR_7
  3587  00E236  6E42               	movwf	sprintf@f,c
  3588  00E238  0EFF               	movlw	high STR_7
  3589  00E23A  6E43               	movwf	sprintf@f+1,c
  3590  00E23C  ECC1  F079         	call	_sprintf	;wreg free
  3591                           
  3592                           ;Assignment_two.c: 177: break;
  3593  00E240  0012               	return	
  3594  00E242                     l4123:
  3595                           
  3596                           ;Assignment_two.c: 179: sprintf(Buffer1, "Timer min   ");
  3597  00E242  0EBE               	movlw	low _Buffer1
  3598  00E244  6E40               	movwf	sprintf@sp,c
  3599  00E246  0E00               	movlw	high _Buffer1
  3600  00E248  6E41               	movwf	sprintf@sp+1,c
  3601  00E24A  0E8F               	movlw	low STR_8
  3602  00E24C  6E42               	movwf	sprintf@f,c
  3603  00E24E  0EFF               	movlw	high STR_8
  3604  00E250  6E43               	movwf	sprintf@f+1,c
  3605  00E252  ECC1  F079         	call	_sprintf	;wreg free
  3606                           
  3607                           ;Assignment_two.c: 180: break;
  3608  00E256  0012               	return	
  3609  00E258                     l4125:
  3610                           
  3611                           ;Assignment_two.c: 182: sprintf(Buffer1, "Timer sec ");
  3612  00E258  0EBE               	movlw	low _Buffer1
  3613  00E25A  6E40               	movwf	sprintf@sp,c
  3614  00E25C  0E00               	movlw	high _Buffer1
  3615  00E25E  6E41               	movwf	sprintf@sp+1,c
  3616  00E260  0EBF               	movlw	low STR_9
  3617  00E262  6E42               	movwf	sprintf@f,c
  3618  00E264  0EFF               	movlw	high STR_9
  3619  00E266  6E43               	movwf	sprintf@f+1,c
  3620  00E268  ECC1  F079         	call	_sprintf	;wreg free
  3621                           
  3622                           ;Assignment_two.c: 184: }
  3623                           
  3624                           ;Assignment_two.c: 183: break;
  3625  00E26C  0012               	return	
  3626  00E26E                     l4129:
  3627  00E26E  C07D  F06D         	movff	_mode3,??_displaymode
  3628  00E272  C07E  F06E         	movff	_mode3+1,??_displaymode+1
  3629                           
  3630                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3631                           ; Switch size 1, requested type "space"
  3632                           ; Number of cases is 1, Range of values is 0 to 0
  3633                           ; switch strategies available:
  3634                           ; Name         Instructions Cycles
  3635                           ; simple_byte            4     3 (average)
  3636                           ;	Chosen strategy is simple_byte
  3637  00E276  506E               	movf	??_displaymode+1,w,c
  3638  00E278  0A00               	xorlw	0	; case 0
  3639  00E27A  A4D8               	btfss	status,2,c
  3640  00E27C  0012               	return	
  3641                           
  3642                           ; Switch size 1, requested type "space"
  3643                           ; Number of cases is 3, Range of values is 0 to 2
  3644                           ; switch strategies available:
  3645                           ; Name         Instructions Cycles
  3646                           ; simple_byte           10     6 (average)
  3647                           ;	Chosen strategy is simple_byte
  3648  00E27E  506D               	movf	??_displaymode,w,c
  3649  00E280  0A00               	xorlw	0	; case 0
  3650  00E282  B4D8               	btfsc	status,2,c
  3651  00E284  D7D3               	goto	l4121
  3652  00E286  0A01               	xorlw	1	; case 1
  3653  00E288  B4D8               	btfsc	status,2,c
  3654  00E28A  D7DB               	goto	l4123
  3655  00E28C  0A03               	xorlw	3	; case 2
  3656  00E28E  A4D8               	btfss	status,2,c
  3657                           
  3658                           ;Assignment_two.c: 189: }
  3659                           
  3660                           ;Assignment_two.c: 186: }
  3661                           ;Assignment_two.c: 187: break;
  3662  00E290  0012               	return	
  3663  00E292  D7E2               	goto	l4125
  3664  00E294                     l4133:
  3665  00E294  C079  F06D         	movff	_mode1,??_displaymode
  3666  00E298  C07A  F06E         	movff	_mode1+1,??_displaymode+1
  3667                           
  3668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3669                           ; Switch size 1, requested type "space"
  3670                           ; Number of cases is 1, Range of values is 0 to 0
  3671                           ; switch strategies available:
  3672                           ; Name         Instructions Cycles
  3673                           ; simple_byte            4     3 (average)
  3674                           ;	Chosen strategy is simple_byte
  3675  00E29C  506E               	movf	??_displaymode+1,w,c
  3676  00E29E  0A00               	xorlw	0	; case 0
  3677  00E2A0  A4D8               	btfss	status,2,c
  3678  00E2A2  0012               	return	
  3679                           
  3680                           ; Switch size 1, requested type "space"
  3681                           ; Number of cases is 3, Range of values is 0 to 2
  3682                           ; switch strategies available:
  3683                           ; Name         Instructions Cycles
  3684                           ; simple_byte           10     6 (average)
  3685                           ;	Chosen strategy is simple_byte
  3686  00E2A4  506D               	movf	??_displaymode,w,c
  3687  00E2A6  0A00               	xorlw	0	; case 0
  3688  00E2A8  B4D8               	btfsc	status,2,c
  3689  00E2AA  D781               	goto	l4109
  3690  00E2AC  0A01               	xorlw	1	; case 1
  3691  00E2AE  B4D8               	btfsc	status,2,c
  3692  00E2B0  D7AA               	goto	l4119
  3693  00E2B2  0A03               	xorlw	3	; case 2
  3694  00E2B4  A4D8               	btfss	status,2,c
  3695  00E2B6  0012               	return	
  3696  00E2B8  D7DA               	goto	l4129
  3697  00E2BA                     __end_of_displaymode:
  3698                           	opt stack 0
  3699                           tblptru	equ	0xFF8
  3700                           tblptrh	equ	0xFF7
  3701                           tblptrl	equ	0xFF6
  3702                           tablat	equ	0xFF5
  3703                           prodh	equ	0xFF4
  3704                           prodl	equ	0xFF3
  3705                           intcon	equ	0xFF2
  3706                           intcon2	equ	0xFF1
  3707                           intcon3	equ	0xFF0
  3708                           postinc0	equ	0xFEE
  3709                           wreg	equ	0xFE8
  3710                           postdec1	equ	0xFE5
  3711                           fsr1l	equ	0xFE1
  3712                           indf2	equ	0xFDF
  3713                           postinc2	equ	0xFDE
  3714                           fsr2h	equ	0xFDA
  3715                           fsr2l	equ	0xFD9
  3716                           status	equ	0xFD8
  3717                           
  3718 ;; *************** function _sprintf *****************
  3719 ;; Defined at:
  3720 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;  sp              2   63[COMRAM] PTR unsigned char 
  3723 ;;		 -> main@Buffer(32), Buffer1(32), 
  3724 ;;  f               2   65[COMRAM] PTR const unsigned char 
  3725 ;;		 -> STR_21(6), STR_20(6), STR_19(5), STR_18(5), 
  3726 ;;		 -> STR_17(15), STR_16(15), STR_15(6), STR_9(11), 
  3727 ;;		 -> STR_8(13), STR_7(12), STR_6(11), STR_5(13), 
  3728 ;;		 -> STR_4(12), STR_3(16), 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  val             4   92[COMRAM] unsigned long 
  3731 ;;  tmpval          4   88[COMRAM] struct .
  3732 ;;  fval            3  100[COMRAM] struct .
  3733 ;;  prec            2  105[COMRAM] int 
  3734 ;;  width           2  103[COMRAM] int 
  3735 ;;  flag            2   98[COMRAM] unsigned short 
  3736 ;;  exp             2   96[COMRAM] int 
  3737 ;;  len             2   86[COMRAM] unsigned int 
  3738 ;;  ap              2   84[COMRAM] PTR void [1]
  3739 ;;		 -> ?_sprintf(2), 
  3740 ;;  cp              2   82[COMRAM] PTR const unsigned char 
  3741 ;;		 -> STR_22(7), STR_14(4), STR_13(9), STR_12(9), 
  3742 ;;		 -> STR_11(4), STR_10(4), STR_2(4), STR_1(4), 
  3743 ;;  c               1  107[COMRAM] char 
  3744 ;;  d               1    0        unsigned char 
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  2   63[COMRAM] int 
  3747 ;; Registers used:
  3748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3754 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Totals:        45       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;Total ram usage:       45 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; Hardware stack levels required when called:    3
  3761 ;; This function calls:
  3762 ;;		___awdiv
  3763 ;;		___ftadd
  3764 ;;		___ftge
  3765 ;;		___ftmul
  3766 ;;		___ftneg
  3767 ;;		___ftsub
  3768 ;;		___fttol
  3769 ;;		___lldiv
  3770 ;;		___llmod
  3771 ;;		___lltoft
  3772 ;;		___wmul
  3773 ;;		__div_to_l_
  3774 ;;		__tdiv_to_l_
  3775 ;;		_fround
  3776 ;;		_isdigit
  3777 ;;		_scale
  3778 ;; This function is called by:
  3779 ;;		_displaymode
  3780 ;;		_main
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text19
  3785  00F382                     __ptext19:
  3786                           	opt stack 0
  3787  00F382                     _sprintf:
  3788                           	opt stack 27
  3789                           
  3790                           ;doprnt.c: 494: va_list ap;
  3791                           ;doprnt.c: 499: signed char c;
  3792                           ;doprnt.c: 501: int width;
  3793                           ;doprnt.c: 504: int prec;
  3794                           ;doprnt.c: 508: unsigned short flag;
  3795                           ;doprnt.c: 515: char d;
  3796                           ;doprnt.c: 516: double fval;
  3797                           ;doprnt.c: 517: int exp;
  3798                           ;doprnt.c: 523: union {
  3799                           ;doprnt.c: 524: unsigned long vd;
  3800                           ;doprnt.c: 525: double integ;
  3801                           ;doprnt.c: 526: } tmpval;
  3802                           ;doprnt.c: 528: unsigned long val;
  3803                           ;doprnt.c: 529: unsigned len;
  3804                           ;doprnt.c: 530: const char * cp;
  3805                           ;doprnt.c: 533: *ap = __va_start();
  3806                           
  3807                           ;incstack = 0
  3808  00F382  0E44               	movlw	low (?_sprintf+4)
  3809  00F384  6E55               	movwf	sprintf@ap,c
  3810  00F386  0E00               	movlw	high (?_sprintf+4)
  3811  00F388  6E56               	movwf	sprintf@ap+1,c
  3812                           
  3813                           ;doprnt.c: 536: while(c = *f++) {
  3814  00F38A  EF61  F07F         	goto	l3943
  3815  00F38E                     l3579:
  3816                           
  3817                           ;doprnt.c: 538: if(c != '%')
  3818  00F38E  0E25               	movlw	37
  3819  00F390  186C               	xorwf	sprintf@c,w,c
  3820  00F392  B4D8               	btfsc	status,2,c
  3821  00F394  D00A               	goto	l3585
  3822                           
  3823                           ;doprnt.c: 540: {
  3824                           ;doprnt.c: 541: ((*sp++ = (c)));
  3825  00F396  C040  FFD9         	movff	sprintf@sp,fsr2l
  3826  00F39A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3827  00F39E  C06C  FFDF         	movff	sprintf@c,indf2
  3828  00F3A2  4A40               	infsnz	sprintf@sp,f,c
  3829  00F3A4  2A41               	incf	sprintf@sp+1,f,c
  3830                           
  3831                           ;doprnt.c: 542: continue;
  3832  00F3A6  EF61  F07F         	goto	l3943
  3833  00F3AA                     l3585:
  3834                           
  3835                           ;doprnt.c: 543: }
  3836                           ;doprnt.c: 546: width = 0;
  3837  00F3AA  0E00               	movlw	0
  3838  00F3AC  6E69               	movwf	sprintf@width+1,c
  3839  00F3AE  0E00               	movlw	0
  3840  00F3B0  6E68               	movwf	sprintf@width,c
  3841                           
  3842                           ;doprnt.c: 548: flag = 0;
  3843  00F3B2  0E00               	movlw	0
  3844  00F3B4  6E64               	movwf	sprintf@flag+1,c
  3845  00F3B6  0E00               	movlw	0
  3846  00F3B8  6E63               	movwf	sprintf@flag,c
  3847                           
  3848                           ;doprnt.c: 551: switch(*f) {
  3849                           
  3850                           ;doprnt.c: 550: for(;;) {
  3851  00F3BA  D003               	goto	l3591
  3852  00F3BC                     l3587:
  3853                           
  3854                           ;doprnt.c: 580: flag |= 0x04;
  3855  00F3BC  8463               	bsf	sprintf@flag,2,c
  3856                           
  3857                           ;doprnt.c: 581: f++;
  3858  00F3BE  4A42               	infsnz	sprintf@f,f,c
  3859  00F3C0  2A43               	incf	sprintf@f+1,f,c
  3860  00F3C2                     l3591:
  3861  00F3C2  C042  FFF6         	movff	sprintf@f,tblptrl
  3862  00F3C6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3863  00F3CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3864  00F3CA  6AF8               	clrf	tblptru,c
  3865  00F3CC                     	endif
  3866  00F3CC                     	if	0	;tblptru may be non-zero
  3867  00F3CC                     	endif
  3868  00F3CC  0008               	tblrd		*
  3869  00F3CE  50F5               	movf	tablat,w,c
  3870                           
  3871                           ; Switch size 1, requested type "space"
  3872                           ; Number of cases is 1, Range of values is 48 to 48
  3873                           ; switch strategies available:
  3874                           ; Name         Instructions Cycles
  3875                           ; simple_byte            4     3 (average)
  3876                           ;	Chosen strategy is simple_byte
  3877  00F3D0  0A30               	xorlw	48	; case 48
  3878  00F3D2  B4D8               	btfsc	status,2,c
  3879  00F3D4  D7F3               	goto	l3587
  3880                           
  3881                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3882                           
  3883                           ;doprnt.c: 586: }
  3884                           
  3885                           ;doprnt.c: 585: break;
  3886  00F3D6  C042  FFF6         	movff	sprintf@f,tblptrl
  3887  00F3DA  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3888  00F3DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3889  00F3DE  6AF8               	clrf	tblptru,c
  3890  00F3E0                     	endif
  3891  00F3E0                     	if	0	;tblptru may be non-zero
  3892  00F3E0                     	endif
  3893  00F3E0  0008               	tblrd		*
  3894  00F3E2  50F5               	movf	tablat,w,c
  3895  00F3E4  ECD1  F06A         	call	_isdigit
  3896  00F3E8  A0D8               	btfss	status,0,c
  3897  00F3EA  D034               	goto	l3605
  3898                           
  3899                           ;doprnt.c: 598: width = 0;
  3900  00F3EC  0E00               	movlw	0
  3901  00F3EE  6E69               	movwf	sprintf@width+1,c
  3902  00F3F0  0E00               	movlw	0
  3903  00F3F2  6E68               	movwf	sprintf@width,c
  3904  00F3F4                     l3597:
  3905                           
  3906                           ;doprnt.c: 600: width *= 10;
  3907  00F3F4  C068  F00F         	movff	sprintf@width,___wmul@multiplier
  3908  00F3F8  C069  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  3909  00F3FC  0E00               	movlw	0
  3910  00F3FE  6E12               	movwf	___wmul@multiplicand+1,c
  3911  00F400  0E0A               	movlw	10
  3912  00F402  6E11               	movwf	___wmul@multiplicand,c
  3913  00F404  EC36  F06B         	call	___wmul	;wreg free
  3914  00F408  C00F  F068         	movff	?___wmul,sprintf@width
  3915  00F40C  C010  F069         	movff	?___wmul+1,sprintf@width+1
  3916                           
  3917                           ;doprnt.c: 601: width += *f++ - '0';
  3918  00F410  0ED0               	movlw	208
  3919  00F412  6E4A               	movwf	??_sprintf& (0+255),c
  3920  00F414  0EFF               	movlw	255
  3921  00F416  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  3922  00F418  C042  FFF6         	movff	sprintf@f,tblptrl
  3923  00F41C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3924  00F420                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3925  00F420  6AF8               	clrf	tblptru,c
  3926  00F422                     	endif
  3927  00F422                     	if	0	;tblptru may be non-zero
  3928  00F422                     	endif
  3929  00F422  0008               	tblrd		*
  3930  00F424  50F5               	movf	tablat,w,c
  3931  00F426  6E4C               	movwf	(??_sprintf+2)& (0+255),c
  3932  00F428  6A4D               	clrf	(??_sprintf+3)& (0+255),c
  3933  00F42A  504A               	movf	??_sprintf,w,c
  3934  00F42C  264C               	addwf	??_sprintf+2,f,c
  3935  00F42E  504B               	movf	??_sprintf+1,w,c
  3936  00F430  224D               	addwfc	??_sprintf+3,f,c
  3937  00F432  504C               	movf	??_sprintf+2,w,c
  3938  00F434  2668               	addwf	sprintf@width,f,c
  3939  00F436  504D               	movf	??_sprintf+3,w,c
  3940  00F438  2269               	addwfc	sprintf@width+1,f,c
  3941  00F43A  4A42               	infsnz	sprintf@f,f,c
  3942  00F43C  2A43               	incf	sprintf@f+1,f,c
  3943                           
  3944                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3945  00F43E  C042  FFF6         	movff	sprintf@f,tblptrl
  3946  00F442  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3947  00F446                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3948  00F446  6AF8               	clrf	tblptru,c
  3949  00F448                     	endif
  3950  00F448                     	if	0	;tblptru may be non-zero
  3951  00F448                     	endif
  3952  00F448  0008               	tblrd		*
  3953  00F44A  50F5               	movf	tablat,w,c
  3954  00F44C  ECD1  F06A         	call	_isdigit
  3955  00F450  B0D8               	btfsc	status,0,c
  3956  00F452  D7D0               	goto	l3597
  3957  00F454                     l3605:
  3958                           
  3959                           ;doprnt.c: 608: }
  3960                           ;doprnt.c: 611: if(*f == '.') {
  3961  00F454  C042  FFF6         	movff	sprintf@f,tblptrl
  3962  00F458  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3963  00F45C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3964  00F45C  6AF8               	clrf	tblptru,c
  3965  00F45E                     	endif
  3966  00F45E                     	if	0	;tblptru may be non-zero
  3967  00F45E                     	endif
  3968  00F45E  0008               	tblrd		*
  3969  00F460  50F5               	movf	tablat,w,c
  3970  00F462  0A2E               	xorlw	46
  3971  00F464  A4D8               	btfss	status,2,c
  3972  00F466  D030               	goto	l3617
  3973                           
  3974                           ;doprnt.c: 612: flag |= 0x4000;
  3975  00F468  8C64               	bsf	sprintf@flag+1,6,c
  3976                           
  3977                           ;doprnt.c: 613: f++;
  3978  00F46A  4A42               	infsnz	sprintf@f,f,c
  3979  00F46C  2A43               	incf	sprintf@f+1,f,c
  3980                           
  3981                           ;doprnt.c: 620: {
  3982                           ;doprnt.c: 621: prec = 0;
  3983  00F46E  0E00               	movlw	0
  3984  00F470  6E6B               	movwf	sprintf@prec+1,c
  3985  00F472  0E00               	movlw	0
  3986  00F474  6E6A               	movwf	sprintf@prec,c
  3987                           
  3988                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3989  00F476  D01C               	goto	l3615
  3990  00F478                     l3611:
  3991                           
  3992                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3993  00F478  C06A  F00F         	movff	sprintf@prec,___wmul@multiplier
  3994  00F47C  C06B  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  3995  00F480  0E00               	movlw	0
  3996  00F482  6E12               	movwf	___wmul@multiplicand+1,c
  3997  00F484  0E0A               	movlw	10
  3998  00F486  6E11               	movwf	___wmul@multiplicand,c
  3999  00F488  EC36  F06B         	call	___wmul	;wreg free
  4000  00F48C  C042  FFF6         	movff	sprintf@f,tblptrl
  4001  00F490  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4002  00F494                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4003  00F494  6AF8               	clrf	tblptru,c
  4004  00F496                     	endif
  4005  00F496                     	if	0	;tblptru may be non-zero
  4006  00F496                     	endif
  4007  00F496  0008               	tblrd		*
  4008  00F498  50F5               	movf	tablat,w,c
  4009  00F49A  260F               	addwf	?___wmul,f,c
  4010  00F49C  0E00               	movlw	0
  4011  00F49E  2210               	addwfc	?___wmul+1,f,c
  4012  00F4A0  0ED0               	movlw	208
  4013  00F4A2  240F               	addwf	?___wmul,w,c
  4014  00F4A4  6E6A               	movwf	sprintf@prec,c
  4015  00F4A6  0EFF               	movlw	255
  4016  00F4A8  2010               	addwfc	?___wmul+1,w,c
  4017  00F4AA  6E6B               	movwf	sprintf@prec+1,c
  4018  00F4AC  4A42               	infsnz	sprintf@f,f,c
  4019  00F4AE  2A43               	incf	sprintf@f+1,f,c
  4020  00F4B0                     l3615:
  4021  00F4B0  C042  FFF6         	movff	sprintf@f,tblptrl
  4022  00F4B4  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4023  00F4B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4024  00F4B8  6AF8               	clrf	tblptru,c
  4025  00F4BA                     	endif
  4026  00F4BA                     	if	0	;tblptru may be non-zero
  4027  00F4BA                     	endif
  4028  00F4BA  0008               	tblrd		*
  4029  00F4BC  50F5               	movf	tablat,w,c
  4030  00F4BE  ECD1  F06A         	call	_isdigit
  4031  00F4C2  A0D8               	btfss	status,0,c
  4032  00F4C4  D07D               	goto	l3665
  4033  00F4C6  D7D8               	goto	l3611
  4034  00F4C8                     l3617:
  4035                           
  4036                           ;doprnt.c: 626: prec = 0;
  4037  00F4C8  0E00               	movlw	0
  4038  00F4CA  6E6B               	movwf	sprintf@prec+1,c
  4039  00F4CC  0E00               	movlw	0
  4040  00F4CE  6E6A               	movwf	sprintf@prec,c
  4041                           
  4042                           ;doprnt.c: 628: flag |= 0x1000;
  4043  00F4D0  8864               	bsf	sprintf@flag+1,4,c
  4044                           
  4045                           ;doprnt.c: 630: }
  4046                           ;doprnt.c: 635: switch(c = *f++) {
  4047  00F4D2  D076               	goto	l3665
  4048  00F4D4                     l3621:
  4049                           
  4050                           ;doprnt.c: 663: flag |= 0x400;
  4051  00F4D4  8464               	bsf	sprintf@flag+1,2,c
  4052                           
  4053                           ;doprnt.c: 698: case 'i':
  4054                           ;doprnt.c: 699: break;
  4055                           
  4056                           ;doprnt.c: 697: case 'd':
  4057                           
  4058                           ;doprnt.c: 664: break;
  4059  00F4D6  D091               	goto	l3667
  4060  00F4D8                     l3623:
  4061                           
  4062                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4063  00F4D8  C055  FFD9         	movff	sprintf@ap,fsr2l
  4064  00F4DC  C056  FFDA         	movff	sprintf@ap+1,fsr2h
  4065  00F4E0  CFDE F053          	movff	postinc2,sprintf@cp
  4066  00F4E4  CFDD F054          	movff	postdec2,sprintf@cp+1
  4067  00F4E8  0E02               	movlw	2
  4068  00F4EA  2655               	addwf	sprintf@ap,f,c
  4069  00F4EC  0E00               	movlw	0
  4070  00F4EE  2256               	addwfc	sprintf@ap+1,f,c
  4071                           
  4072                           ;doprnt.c: 740: if(!cp)
  4073  00F4F0  5053               	movf	sprintf@cp,w,c
  4074  00F4F2  1054               	iorwf	sprintf@cp+1,w,c
  4075  00F4F4  A4D8               	btfss	status,2,c
  4076  00F4F6  D004               	goto	l3631
  4077                           
  4078                           ;doprnt.c: 741: cp = "(null)";
  4079  00F4F8  0EDC               	movlw	low STR_22
  4080  00F4FA  6E53               	movwf	sprintf@cp,c
  4081  00F4FC  0EFF               	movlw	high STR_22
  4082  00F4FE  6E54               	movwf	sprintf@cp+1,c
  4083  00F500                     l3631:
  4084                           
  4085                           ;doprnt.c: 745: len = 0;
  4086  00F500  0E00               	movlw	0
  4087  00F502  6E58               	movwf	sprintf@len+1,c
  4088  00F504  0E00               	movlw	0
  4089  00F506  6E57               	movwf	sprintf@len,c
  4090                           
  4091                           ;doprnt.c: 746: while(cp[len])
  4092  00F508  D002               	goto	l3635
  4093  00F50A                     l3633:
  4094                           
  4095                           ;doprnt.c: 747: len++;
  4096  00F50A  4A57               	infsnz	sprintf@len,f,c
  4097  00F50C  2A58               	incf	sprintf@len+1,f,c
  4098  00F50E                     l3635:
  4099  00F50E  5057               	movf	sprintf@len,w,c
  4100  00F510  2453               	addwf	sprintf@cp,w,c
  4101  00F512  6E4A               	movwf	??_sprintf& (0+255),c
  4102  00F514  5058               	movf	sprintf@len+1,w,c
  4103  00F516  2054               	addwfc	sprintf@cp+1,w,c
  4104  00F518  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  4105  00F51A  C04A  FFF6         	movff	??_sprintf,tblptrl
  4106  00F51E  C04B  FFF7         	movff	??_sprintf+1,tblptrh
  4107  00F522                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4108  00F522  6AF8               	clrf	tblptru,c
  4109  00F524                     	endif
  4110  00F524                     	if	0	;tblptru may be non-zero
  4111  00F524                     	endif
  4112  00F524  0008               	tblrd		*
  4113  00F526  50F5               	movf	tablat,w,c
  4114  00F528  0900               	iorlw	0
  4115  00F52A  A4D8               	btfss	status,2,c
  4116  00F52C  D7EE               	goto	l3633
  4117                           
  4118                           ;doprnt.c: 753: if(prec && prec < len)
  4119  00F52E  506A               	movf	sprintf@prec,w,c
  4120  00F530  106B               	iorwf	sprintf@prec+1,w,c
  4121  00F532  B4D8               	btfsc	status,2,c
  4122  00F534  D00A               	goto	l3643
  4123  00F536  5057               	movf	sprintf@len,w,c
  4124  00F538  5C6A               	subwf	sprintf@prec,w,c
  4125  00F53A  5058               	movf	sprintf@len+1,w,c
  4126  00F53C  586B               	subwfb	sprintf@prec+1,w,c
  4127  00F53E  B0D8               	btfsc	status,0,c
  4128  00F540  D004               	goto	l3643
  4129                           
  4130                           ;doprnt.c: 754: len = prec;
  4131  00F542  C06A  F057         	movff	sprintf@prec,sprintf@len
  4132  00F546  C06B  F058         	movff	sprintf@prec+1,sprintf@len+1
  4133  00F54A                     l3643:
  4134                           
  4135                           ;doprnt.c: 757: if(width > len)
  4136  00F54A  5068               	movf	sprintf@width,w,c
  4137  00F54C  5C57               	subwf	sprintf@len,w,c
  4138  00F54E  5069               	movf	sprintf@width+1,w,c
  4139  00F550  5858               	subwfb	sprintf@len+1,w,c
  4140  00F552  B0D8               	btfsc	status,0,c
  4141  00F554  D005               	goto	l3647
  4142                           
  4143                           ;doprnt.c: 758: width -= len;
  4144  00F556  5057               	movf	sprintf@len,w,c
  4145  00F558  5E68               	subwf	sprintf@width,f,c
  4146  00F55A  5058               	movf	sprintf@len+1,w,c
  4147  00F55C  5A69               	subwfb	sprintf@width+1,f,c
  4148  00F55E  D00D               	goto	l3653
  4149  00F560                     l3647:
  4150                           
  4151                           ;doprnt.c: 759: else
  4152                           ;doprnt.c: 760: width = 0;
  4153  00F560  0E00               	movlw	0
  4154  00F562  6E69               	movwf	sprintf@width+1,c
  4155  00F564  0E00               	movlw	0
  4156  00F566  6E68               	movwf	sprintf@width,c
  4157                           
  4158                           ;doprnt.c: 764: while(width--)
  4159  00F568  D008               	goto	l3653
  4160  00F56A                     l3649:
  4161                           
  4162                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4163  00F56A  C040  FFD9         	movff	sprintf@sp,fsr2l
  4164  00F56E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4165  00F572  0E20               	movlw	32
  4166  00F574  6EDF               	movwf	indf2,c
  4167  00F576  4A40               	infsnz	sprintf@sp,f,c
  4168  00F578  2A41               	incf	sprintf@sp+1,f,c
  4169  00F57A                     l3653:
  4170  00F57A  0668               	decf	sprintf@width,f,c
  4171  00F57C  A0D8               	btfss	status,0,c
  4172  00F57E  0669               	decf	sprintf@width+1,f,c
  4173  00F580  2868               	incf	sprintf@width,w,c
  4174  00F582  E1F3               	bnz	l3649
  4175  00F584  2869               	incf	sprintf@width+1,w,c
  4176  00F586  B4D8               	btfsc	status,2,c
  4177  00F588  D011               	goto	l3661
  4178  00F58A  D7EF               	goto	l3649
  4179  00F58C                     l3655:
  4180                           
  4181                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4182  00F58C  C053  FFF6         	movff	sprintf@cp,tblptrl
  4183  00F590  C054  FFF7         	movff	sprintf@cp+1,tblptrh
  4184  00F594                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4185  00F594  6AF8               	clrf	tblptru,c
  4186  00F596                     	endif
  4187  00F596                     	if	0	;tblptru may be non-zero
  4188  00F596                     	endif
  4189  00F596  C040  FFD9         	movff	sprintf@sp,fsr2l
  4190  00F59A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4191  00F59E  0008               	tblrd		*
  4192  00F5A0  CFF5 FFDF          	movff	tablat,indf2
  4193  00F5A4  4A53               	infsnz	sprintf@cp,f,c
  4194  00F5A6  2A54               	incf	sprintf@cp+1,f,c
  4195  00F5A8  4A40               	infsnz	sprintf@sp,f,c
  4196  00F5AA  2A41               	incf	sprintf@sp+1,f,c
  4197  00F5AC                     l3661:
  4198  00F5AC  0657               	decf	sprintf@len,f,c
  4199  00F5AE  A0D8               	btfss	status,0,c
  4200  00F5B0  0658               	decf	sprintf@len+1,f,c
  4201  00F5B2  2857               	incf	sprintf@len,w,c
  4202  00F5B4  E1EB               	bnz	l3655
  4203  00F5B6  2858               	incf	sprintf@len+1,w,c
  4204  00F5B8  B4D8               	btfsc	status,2,c
  4205  00F5BA  EF61  F07F         	goto	l3943
  4206  00F5BE  D7E6               	goto	l3655
  4207  00F5C0                     l3665:
  4208  00F5C0  C042  FFF6         	movff	sprintf@f,tblptrl
  4209  00F5C4  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4210  00F5C8  4A42               	infsnz	sprintf@f,f,c
  4211  00F5CA  2A43               	incf	sprintf@f+1,f,c
  4212  00F5CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4213  00F5CC  6AF8               	clrf	tblptru,c
  4214  00F5CE                     	endif
  4215  00F5CE                     	if	0	;tblptru may be non-zero
  4216  00F5CE                     	endif
  4217  00F5CE  0008               	tblrd		*
  4218  00F5D0  CFF5 F06C          	movff	tablat,sprintf@c
  4219  00F5D4  506C               	movf	sprintf@c,w,c
  4220                           
  4221                           ; Switch size 1, requested type "space"
  4222                           ; Number of cases is 5, Range of values is 0 to 115
  4223                           ; switch strategies available:
  4224                           ; Name         Instructions Cycles
  4225                           ; simple_byte           16     9 (average)
  4226                           ;	Chosen strategy is simple_byte
  4227  00F5D6  0A00               	xorlw	0	; case 0
  4228  00F5D8  B4D8               	btfsc	status,2,c
  4229  00F5DA  EF6F  F07F         	goto	l3945
  4230  00F5DE  0A64               	xorlw	100	; case 100
  4231  00F5E0  B4D8               	btfsc	status,2,c
  4232  00F5E2  D00B               	goto	l3667
  4233  00F5E4  0A02               	xorlw	2	; case 102
  4234  00F5E6  B4D8               	btfsc	status,2,c
  4235  00F5E8  D775               	goto	l3621
  4236  00F5EA  0A0F               	xorlw	15	; case 105
  4237  00F5EC  B4D8               	btfsc	status,2,c
  4238  00F5EE  D005               	goto	l3667
  4239  00F5F0  0A1A               	xorlw	26	; case 115
  4240  00F5F2  B4D8               	btfsc	status,2,c
  4241  00F5F4  D771               	goto	l3623
  4242  00F5F6  EF61  F07F         	goto	l3943
  4243  00F5FA                     l3667:
  4244                           
  4245                           ;doprnt.c: 825: if(flag & (0x700)) {
  4246  00F5FA  0E07               	movlw	7
  4247  00F5FC  1464               	andwf	sprintf@flag+1,w,c
  4248  00F5FE  B4D8               	btfsc	status,2,c
  4249  00F600  D326               	goto	l3847
  4250                           
  4251                           ;doprnt.c: 827: if(flag & 0x1000)
  4252  00F602  A864               	btfss	sprintf@flag+1,4,c
  4253  00F604  D004               	goto	l3673
  4254                           
  4255                           ;doprnt.c: 829: prec = 6;
  4256  00F606  0E00               	movlw	0
  4257  00F608  6E6B               	movwf	sprintf@prec+1,c
  4258  00F60A  0E06               	movlw	6
  4259  00F60C  6E6A               	movwf	sprintf@prec,c
  4260  00F60E                     l3673:
  4261                           
  4262                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4263  00F60E  C055  FFD9         	movff	sprintf@ap,fsr2l
  4264  00F612  C056  FFDA         	movff	sprintf@ap+1,fsr2h
  4265  00F616  CFDE F065          	movff	postinc2,sprintf@fval
  4266  00F61A  CFDE F066          	movff	postinc2,sprintf@fval+1
  4267  00F61E  CFDD F067          	movff	postdec2,sprintf@fval+2
  4268  00F622  0E03               	movlw	3
  4269  00F624  2655               	addwf	sprintf@ap,f,c
  4270  00F626  0E00               	movlw	0
  4271  00F628  2256               	addwfc	sprintf@ap+1,f,c
  4272                           
  4273                           ;doprnt.c: 831: if(fval < 0.0) {
  4274  00F62A  AE67               	btfss	sprintf@fval+2,7,c
  4275  00F62C  D010               	goto	l3683
  4276                           
  4277                           ;doprnt.c: 832: fval = -fval;
  4278  00F62E  C065  F001         	movff	sprintf@fval,___ftneg@f1
  4279  00F632  C066  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  4280  00F636  C067  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  4281  00F63A  EC12  F06B         	call	___ftneg	;wreg free
  4282  00F63E  C001  F065         	movff	?___ftneg,sprintf@fval
  4283  00F642  C002  F066         	movff	?___ftneg+1,sprintf@fval+1
  4284  00F646  C003  F067         	movff	?___ftneg+2,sprintf@fval+2
  4285                           
  4286                           ;doprnt.c: 833: flag |= 0x03;
  4287  00F64A  0E03               	movlw	3
  4288  00F64C  1263               	iorwf	sprintf@flag,f,c
  4289  00F64E                     l3683:
  4290                           
  4291                           ;doprnt.c: 834: }
  4292                           ;doprnt.c: 835: exp = 0;
  4293  00F64E  0E00               	movlw	0
  4294  00F650  6E62               	movwf	sprintf@exp+1,c
  4295  00F652  0E00               	movlw	0
  4296  00F654  6E61               	movwf	sprintf@exp,c
  4297                           
  4298                           ;doprnt.c: 836: if( fval!=0) {
  4299  00F656  5065               	movf	sprintf@fval,w,c
  4300  00F658  1066               	iorwf	sprintf@fval+1,w,c
  4301  00F65A  1067               	iorwf	sprintf@fval+2,w,c
  4302  00F65C  B4D8               	btfsc	status,2,c
  4303  00F65E  D083               	goto	l3711
  4304                           
  4305                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4306  00F660  0E82               	movlw	130
  4307  00F662  6E4A               	movwf	??_sprintf& (0+255),c
  4308  00F664  0EFF               	movlw	255
  4309  00F666  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  4310  00F668  C065  F04C         	movff	sprintf@fval,??_sprintf+2
  4311  00F66C  C066  F04D         	movff	sprintf@fval+1,??_sprintf+3
  4312  00F670  C067  F04E         	movff	sprintf@fval+2,??_sprintf+4
  4313  00F674  C068  F04F         	movff	sprintf@fval+3,??_sprintf+5
  4314  00F678  0E10               	movlw	16
  4315  00F67A  D005               	goto	u3770
  4316  00F67C                     u3775:
  4317  00F67C  90D8               	bcf	status,0,c
  4318  00F67E  324F               	rrcf	??_sprintf+5,f,c
  4319  00F680  324E               	rrcf	??_sprintf+4,f,c
  4320  00F682  324D               	rrcf	??_sprintf+3,f,c
  4321  00F684  324C               	rrcf	??_sprintf+2,f,c
  4322  00F686                     u3770:
  4323  00F686  2EE8               	decfsz	wreg,f,c
  4324  00F688  D7F9               	goto	u3775
  4325  00F68A  504C               	movf	??_sprintf+2,w,c
  4326  00F68C  244A               	addwf	??_sprintf,w,c
  4327  00F68E  6E61               	movwf	sprintf@exp,c
  4328  00F690  0E00               	movlw	0
  4329  00F692  204B               	addwfc	??_sprintf+1,w,c
  4330  00F694  6E62               	movwf	sprintf@exp+1,c
  4331                           
  4332                           ;doprnt.c: 838: exp--;
  4333  00F696  0661               	decf	sprintf@exp,f,c
  4334  00F698  A0D8               	btfss	status,0,c
  4335  00F69A  0662               	decf	sprintf@exp+1,f,c
  4336                           
  4337                           ;doprnt.c: 839: exp *= 3;
  4338  00F69C  C061  F00F         	movff	sprintf@exp,___wmul@multiplier
  4339  00F6A0  C062  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  4340  00F6A4  0E00               	movlw	0
  4341  00F6A6  6E12               	movwf	___wmul@multiplicand+1,c
  4342  00F6A8  0E03               	movlw	3
  4343  00F6AA  6E11               	movwf	___wmul@multiplicand,c
  4344  00F6AC  EC36  F06B         	call	___wmul	;wreg free
  4345  00F6B0  C00F  F061         	movff	?___wmul,sprintf@exp
  4346  00F6B4  C010  F062         	movff	?___wmul+1,sprintf@exp+1
  4347                           
  4348                           ;doprnt.c: 840: exp /= 10;
  4349  00F6B8  C061  F007         	movff	sprintf@exp,___awdiv@dividend
  4350  00F6BC  C062  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  4351  00F6C0  0E00               	movlw	0
  4352  00F6C2  6E0A               	movwf	___awdiv@divisor+1,c
  4353  00F6C4  0E0A               	movlw	10
  4354  00F6C6  6E09               	movwf	___awdiv@divisor,c
  4355  00F6C8  EC8E  F06E         	call	___awdiv	;wreg free
  4356  00F6CC  C007  F061         	movff	?___awdiv,sprintf@exp
  4357  00F6D0  C008  F062         	movff	?___awdiv+1,sprintf@exp+1
  4358                           
  4359                           ;doprnt.c: 841: if(exp < 0)
  4360  00F6D4  AE62               	btfss	sprintf@exp+1,7,c
  4361  00F6D6  D003               	goto	l3699
  4362                           
  4363                           ;doprnt.c: 842: exp--;
  4364  00F6D8  0661               	decf	sprintf@exp,f,c
  4365  00F6DA  A0D8               	btfss	status,0,c
  4366  00F6DC  0662               	decf	sprintf@exp+1,f,c
  4367  00F6DE                     l3699:
  4368                           
  4369                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4370  00F6DE  5061               	movf	sprintf@exp,w,c
  4371  00F6E0  0800               	sublw	0
  4372  00F6E2  ECA5  F077         	call	_scale
  4373  00F6E6  C024  F059         	movff	?_scale,sprintf@tmpval
  4374  00F6EA  C025  F05A         	movff	?_scale+1,sprintf@tmpval+1
  4375  00F6EE  C026  F05B         	movff	?_scale+2,sprintf@tmpval+2
  4376                           
  4377                           ;doprnt.c: 847: tmpval.integ *= fval;
  4378  00F6F2  C059  F015         	movff	sprintf@tmpval,___ftmul@f1
  4379  00F6F6  C05A  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  4380  00F6FA  C05B  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  4381  00F6FE  C065  F018         	movff	sprintf@fval,___ftmul@f2
  4382  00F702  C066  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  4383  00F706  C067  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  4384  00F70A  EC5C  F070         	call	___ftmul	;wreg free
  4385  00F70E  C015  F059         	movff	?___ftmul,sprintf@tmpval
  4386  00F712  C016  F05A         	movff	?___ftmul+1,sprintf@tmpval+1
  4387  00F716  C017  F05B         	movff	?___ftmul+2,sprintf@tmpval+2
  4388                           
  4389                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4390  00F71A  C059  F001         	movff	sprintf@tmpval,___ftge@ff1
  4391  00F71E  C05A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4392  00F722  C05B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4393  00F726  0E00               	movlw	0
  4394  00F728  6E04               	movwf	___ftge@ff2,c
  4395  00F72A  0E80               	movlw	128
  4396  00F72C  6E05               	movwf	___ftge@ff2+1,c
  4397  00F72E  0E3F               	movlw	63
  4398  00F730  6E06               	movwf	___ftge@ff2+2,c
  4399  00F732  ECD0  F06E         	call	___ftge	;wreg free
  4400  00F736  B0D8               	btfsc	status,0,c
  4401  00F738  D004               	goto	l3707
  4402                           
  4403                           ;doprnt.c: 849: exp--;
  4404  00F73A  0661               	decf	sprintf@exp,f,c
  4405  00F73C  A0D8               	btfss	status,0,c
  4406  00F73E  0662               	decf	sprintf@exp+1,f,c
  4407  00F740  D012               	goto	l3711
  4408  00F742                     l3707:
  4409                           
  4410                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4411  00F742  C059  F001         	movff	sprintf@tmpval,___ftge@ff1
  4412  00F746  C05A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4413  00F74A  C05B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4414  00F74E  0E00               	movlw	0
  4415  00F750  6E04               	movwf	___ftge@ff2,c
  4416  00F752  0E20               	movlw	32
  4417  00F754  6E05               	movwf	___ftge@ff2+1,c
  4418  00F756  0E41               	movlw	65
  4419  00F758  6E06               	movwf	___ftge@ff2+2,c
  4420  00F75A  ECD0  F06E         	call	___ftge	;wreg free
  4421  00F75E  A0D8               	btfss	status,0,c
  4422  00F760  D002               	goto	l3711
  4423                           
  4424                           ;doprnt.c: 851: exp++;
  4425  00F762  4A61               	infsnz	sprintf@exp,f,c
  4426  00F764  2A62               	incf	sprintf@exp+1,f,c
  4427  00F766                     l3711:
  4428                           
  4429                           ;doprnt.c: 852: }
  4430                           ;doprnt.c: 1112: if(prec <= 12)
  4431  00F766  BE6B               	btfsc	sprintf@prec+1,7,c
  4432  00F768  D006               	goto	l3713
  4433  00F76A  506B               	movf	sprintf@prec+1,w,c
  4434  00F76C  E11B               	bnz	l3715
  4435  00F76E  0E0D               	movlw	13
  4436  00F770  5C6A               	subwf	sprintf@prec,w,c
  4437  00F772  B0D8               	btfsc	status,0,c
  4438  00F774  D017               	goto	l3715
  4439  00F776                     l3713:
  4440                           
  4441                           ;doprnt.c: 1113: fval += fround(prec);
  4442  00F776  C065  F02E         	movff	sprintf@fval,___ftadd@f1
  4443  00F77A  C066  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  4444  00F77E  C067  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  4445  00F782  506A               	movf	sprintf@prec,w,c
  4446  00F784  ECC2  F074         	call	_fround
  4447  00F788  C024  F031         	movff	?_fround,___ftadd@f2
  4448  00F78C  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  4449  00F790  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  4450  00F794  ECEC  F073         	call	___ftadd	;wreg free
  4451  00F798  C02E  F065         	movff	?___ftadd,sprintf@fval
  4452  00F79C  C02F  F066         	movff	?___ftadd+1,sprintf@fval+1
  4453  00F7A0  C030  F067         	movff	?___ftadd+2,sprintf@fval+2
  4454  00F7A4                     l3715:
  4455                           
  4456                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4457  00F7A4  BE62               	btfsc	sprintf@exp+1,7,c
  4458  00F7A6  D006               	goto	l3717
  4459  00F7A8  5062               	movf	sprintf@exp+1,w,c
  4460  00F7AA  E11E               	bnz	l3723
  4461  00F7AC  0E0A               	movlw	10
  4462  00F7AE  5C61               	subwf	sprintf@exp,w,c
  4463  00F7B0  B0D8               	btfsc	status,0,c
  4464  00F7B2  D01A               	goto	l3723
  4465  00F7B4                     l3717:
  4466  00F7B4  5065               	movf	sprintf@fval,w,c
  4467  00F7B6  1066               	iorwf	sprintf@fval+1,w,c
  4468  00F7B8  1067               	iorwf	sprintf@fval+2,w,c
  4469  00F7BA  B4D8               	btfsc	status,2,c
  4470  00F7BC  D051               	goto	l3737
  4471  00F7BE  C065  F02B         	movff	sprintf@fval,___fttol@f1
  4472  00F7C2  C066  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  4473  00F7C6  C067  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  4474  00F7CA  ECE2  F06F         	call	___fttol	;wreg free
  4475  00F7CE  502B               	movf	?___fttol,w,c
  4476  00F7D0  102C               	iorwf	?___fttol+1,w,c
  4477  00F7D2  102D               	iorwf	?___fttol+2,w,c
  4478  00F7D4  102E               	iorwf	?___fttol+3,w,c
  4479  00F7D6  B4D8               	btfsc	status,2,c
  4480  00F7D8  BE62               	btfsc	sprintf@exp+1,7,c
  4481  00F7DA  D042               	goto	l3737
  4482  00F7DC  5062               	movf	sprintf@exp+1,w,c
  4483  00F7DE  E104               	bnz	l3723
  4484  00F7E0  0E02               	movlw	2
  4485  00F7E2  5C61               	subwf	sprintf@exp,w,c
  4486  00F7E4  A0D8               	btfss	status,0,c
  4487  00F7E6  D03C               	goto	l3737
  4488  00F7E8                     l3723:
  4489                           
  4490                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4491  00F7E8  C059  F001         	movff	sprintf@tmpval,___ftge@ff1
  4492  00F7EC  C05A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4493  00F7F0  C05B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4494  00F7F4  0E70               	movlw	112
  4495  00F7F6  6E04               	movwf	___ftge@ff2,c
  4496  00F7F8  0E89               	movlw	137
  4497  00F7FA  6E05               	movwf	___ftge@ff2+1,c
  4498  00F7FC  0E40               	movlw	64
  4499  00F7FE  6E06               	movwf	___ftge@ff2+2,c
  4500  00F800  ECD0  F06E         	call	___ftge	;wreg free
  4501  00F804  B0D8               	btfsc	status,0,c
  4502  00F806  D002               	goto	l3727
  4503                           
  4504                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4505  00F808  0EF7               	movlw	247
  4506  00F80A  D001               	goto	L4
  4507  00F80C                     l3727:
  4508                           
  4509                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4510  00F80C  0EF8               	movlw	248
  4511  00F80E                     L4:
  4512  00F80E  2661               	addwf	sprintf@exp,f,c
  4513  00F810  0EFF               	movlw	255
  4514  00F812  2262               	addwfc	sprintf@exp+1,f,c
  4515                           
  4516                           ;doprnt.c: 1124: }
  4517                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4518  00F814  5061               	movf	sprintf@exp,w,c
  4519  00F816  ECA5  F077         	call	_scale
  4520  00F81A  C024  F059         	movff	?_scale,sprintf@tmpval
  4521  00F81E  C025  F05A         	movff	?_scale+1,sprintf@tmpval+1
  4522  00F822  C026  F05B         	movff	?_scale+2,sprintf@tmpval+2
  4523                           
  4524                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4525  00F826  C065  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  4526  00F82A  C066  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4527  00F82E  C067  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4528  00F832  C059  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4529  00F836  C05A  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4530  00F83A  C05B  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4531  00F83E  ECF1  F071         	call	__tdiv_to_l_	;wreg free
  4532  00F842  C001  F05D         	movff	?__tdiv_to_l_,sprintf@val
  4533  00F846  C002  F05E         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4534  00F84A  C003  F05F         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4535  00F84E  C004  F060         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4536                           
  4537                           ;doprnt.c: 1129: fval = 0.0;
  4538  00F852  0E00               	movlw	0
  4539  00F854  6E65               	movwf	sprintf@fval,c
  4540  00F856  0E00               	movlw	0
  4541  00F858  6E66               	movwf	sprintf@fval+1,c
  4542  00F85A  0E00               	movlw	0
  4543  00F85C  6E67               	movwf	sprintf@fval+2,c
  4544                           
  4545                           ;doprnt.c: 1130: } else {
  4546  00F85E  D032               	goto	l3741
  4547  00F860                     l3737:
  4548                           
  4549                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4550  00F860  C065  F02B         	movff	sprintf@fval,___fttol@f1
  4551  00F864  C066  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  4552  00F868  C067  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  4553  00F86C  ECE2  F06F         	call	___fttol	;wreg free
  4554  00F870  C02B  F05D         	movff	?___fttol,sprintf@val
  4555  00F874  C02C  F05E         	movff	?___fttol+1,sprintf@val+1
  4556  00F878  C02D  F05F         	movff	?___fttol+2,sprintf@val+2
  4557  00F87C  C02E  F060         	movff	?___fttol+3,sprintf@val+3
  4558                           
  4559                           ;doprnt.c: 1132: fval -= (double)val;
  4560  00F880  C065  F03A         	movff	sprintf@fval,___ftsub@f1
  4561  00F884  C066  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  4562  00F888  C067  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  4563  00F88C  C05D  F009         	movff	sprintf@val,___lltoft@c
  4564  00F890  C05E  F00A         	movff	sprintf@val+1,___lltoft@c+1
  4565  00F894  C05F  F00B         	movff	sprintf@val+2,___lltoft@c+2
  4566  00F898  C060  F00C         	movff	sprintf@val+3,___lltoft@c+3
  4567  00F89C  ECDB  F06C         	call	___lltoft	;wreg free
  4568  00F8A0  C009  F03D         	movff	?___lltoft,___ftsub@f2
  4569  00F8A4  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  4570  00F8A8  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  4571  00F8AC  EC4B  F06C         	call	___ftsub	;wreg free
  4572  00F8B0  C03A  F065         	movff	?___ftsub,sprintf@fval
  4573  00F8B4  C03B  F066         	movff	?___ftsub+1,sprintf@fval+1
  4574  00F8B8  C03C  F067         	movff	?___ftsub+2,sprintf@fval+2
  4575                           
  4576                           ;doprnt.c: 1133: exp = 0;
  4577  00F8BC  0E00               	movlw	0
  4578  00F8BE  6E62               	movwf	sprintf@exp+1,c
  4579  00F8C0  0E00               	movlw	0
  4580  00F8C2  6E61               	movwf	sprintf@exp,c
  4581  00F8C4                     l3741:
  4582                           
  4583                           ;doprnt.c: 1134: }
  4584                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4585  00F8C4  0E01               	movlw	1
  4586  00F8C6  6E6C               	movwf	sprintf@c,c
  4587  00F8C8                     l3743:
  4588  00F8C8  0E0A               	movlw	10
  4589  00F8CA  186C               	xorwf	sprintf@c,w,c
  4590  00F8CC  B4D8               	btfsc	status,2,c
  4591  00F8CE  D01B               	goto	l3755
  4592                           
  4593                           ;doprnt.c: 1137: if(val < dpowers[c])
  4594  00F8D0  506C               	movf	sprintf@c,w,c
  4595  00F8D2  0D04               	mullw	4
  4596  00F8D4  0EED               	movlw	low _dpowers
  4597  00F8D6  24F3               	addwf	prodl,w,c
  4598  00F8D8  6EF6               	movwf	tblptrl,c
  4599  00F8DA  0EFE               	movlw	high _dpowers
  4600  00F8DC  20F4               	addwfc	prodh,w,c
  4601  00F8DE  6EF7               	movwf	tblptrh,c
  4602  00F8E0                     	if	1	;There are 3 active tblptr bytes
  4603  00F8E0  6AF8               	clrf	tblptru,c
  4604  00F8E2  0E00               	movlw	low (__mediumconst shr (0+16))
  4605  00F8E4  22F8               	addwfc	tblptru,f,c
  4606  00F8E6                     	endif
  4607  00F8E6  0009               	tblrd		*+
  4608  00F8E8  50F5               	movf	tablat,w,c
  4609  00F8EA  5C5D               	subwf	sprintf@val,w,c
  4610  00F8EC  0009               	tblrd		*+
  4611  00F8EE  50F5               	movf	tablat,w,c
  4612  00F8F0  585E               	subwfb	sprintf@val+1,w,c
  4613  00F8F2  0009               	tblrd		*+
  4614  00F8F4  50F5               	movf	tablat,w,c
  4615  00F8F6  585F               	subwfb	sprintf@val+2,w,c
  4616  00F8F8  0009               	tblrd		*+
  4617  00F8FA  50F5               	movf	tablat,w,c
  4618  00F8FC  5860               	subwfb	sprintf@val+3,w,c
  4619  00F8FE  A0D8               	btfss	status,0,c
  4620  00F900  D002               	goto	l3755
  4621                           
  4622                           ;doprnt.c: 1138: break;
  4623  00F902  2A6C               	incf	sprintf@c,f,c
  4624  00F904  D7E1               	goto	l3743
  4625  00F906                     l3755:
  4626                           
  4627                           ;doprnt.c: 1142: width -= prec + c + exp;
  4628  00F906  C06C  F04A         	movff	sprintf@c,??_sprintf
  4629  00F90A  6A4B               	clrf	(??_sprintf+1)& (0+255),c
  4630  00F90C  BE4A               	btfsc	??_sprintf& (0+255),7,c
  4631  00F90E  064B               	decf	(??_sprintf+1)& (0+255),f,c
  4632  00F910  506A               	movf	sprintf@prec,w,c
  4633  00F912  264A               	addwf	??_sprintf,f,c
  4634  00F914  506B               	movf	sprintf@prec+1,w,c
  4635  00F916  224B               	addwfc	??_sprintf+1,f,c
  4636  00F918  5061               	movf	sprintf@exp,w,c
  4637  00F91A  264A               	addwf	??_sprintf,f,c
  4638  00F91C  5062               	movf	sprintf@exp+1,w,c
  4639  00F91E  224B               	addwfc	??_sprintf+1,f,c
  4640  00F920  504A               	movf	??_sprintf,w,c
  4641  00F922  5E68               	subwf	sprintf@width,f,c
  4642  00F924  504B               	movf	??_sprintf+1,w,c
  4643  00F926  5A69               	subwfb	sprintf@width+1,f,c
  4644                           
  4645                           ;doprnt.c: 1143: if(
  4646                           ;doprnt.c: 1147: prec)
  4647  00F928  506A               	movf	sprintf@prec,w,c
  4648  00F92A  106B               	iorwf	sprintf@prec+1,w,c
  4649  00F92C  B4D8               	btfsc	status,2,c
  4650  00F92E  D003               	goto	l3759
  4651                           
  4652                           ;doprnt.c: 1148: width--;
  4653  00F930  0668               	decf	sprintf@width,f,c
  4654  00F932  A0D8               	btfss	status,0,c
  4655  00F934  0669               	decf	sprintf@width+1,f,c
  4656  00F936                     l3759:
  4657                           
  4658                           ;doprnt.c: 1149: if(flag & 0x03)
  4659  00F936  0E03               	movlw	3
  4660  00F938  1463               	andwf	sprintf@flag,w,c
  4661  00F93A  6E4A               	movwf	??_sprintf& (0+255),c
  4662  00F93C  0E00               	movlw	0
  4663  00F93E  1464               	andwf	sprintf@flag+1,w,c
  4664  00F940  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  4665  00F942  504A               	movf	??_sprintf,w,c
  4666  00F944  104B               	iorwf	??_sprintf+1,w,c
  4667  00F946  B4D8               	btfsc	status,2,c
  4668  00F948  D003               	goto	l3763
  4669                           
  4670                           ;doprnt.c: 1150: width--;
  4671  00F94A  0668               	decf	sprintf@width,f,c
  4672  00F94C  A0D8               	btfss	status,0,c
  4673  00F94E  0669               	decf	sprintf@width+1,f,c
  4674  00F950                     l3763:
  4675                           
  4676                           ;doprnt.c: 1153: if(flag & 0x04) {
  4677  00F950  A463               	btfss	sprintf@flag,2,c
  4678  00F952  D031               	goto	l3785
  4679                           
  4680                           ;doprnt.c: 1157: if(flag & 0x03)
  4681  00F954  0E03               	movlw	3
  4682  00F956  1463               	andwf	sprintf@flag,w,c
  4683  00F958  6E4A               	movwf	??_sprintf& (0+255),c
  4684  00F95A  0E00               	movlw	0
  4685  00F95C  1464               	andwf	sprintf@flag+1,w,c
  4686  00F95E  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  4687  00F960  504A               	movf	??_sprintf,w,c
  4688  00F962  104B               	iorwf	??_sprintf+1,w,c
  4689  00F964  B4D8               	btfsc	status,2,c
  4690  00F966  D014               	goto	l3777
  4691                           
  4692                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  4693  00F968  C040  FFD9         	movff	sprintf@sp,fsr2l
  4694  00F96C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4695  00F970  0E2D               	movlw	45
  4696  00F972  6EDF               	movwf	indf2,c
  4697  00F974  4A40               	infsnz	sprintf@sp,f,c
  4698  00F976  2A41               	incf	sprintf@sp+1,f,c
  4699                           
  4700                           ;doprnt.c: 1168: while(width > 0) {
  4701  00F978  D00B               	goto	l3777
  4702  00F97A                     l3771:
  4703                           
  4704                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  4705  00F97A  C040  FFD9         	movff	sprintf@sp,fsr2l
  4706  00F97E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4707  00F982  0E30               	movlw	48
  4708  00F984  6EDF               	movwf	indf2,c
  4709  00F986  4A40               	infsnz	sprintf@sp,f,c
  4710  00F988  2A41               	incf	sprintf@sp+1,f,c
  4711                           
  4712                           ;doprnt.c: 1170: width--;
  4713  00F98A  0668               	decf	sprintf@width,f,c
  4714  00F98C  A0D8               	btfss	status,0,c
  4715  00F98E  0669               	decf	sprintf@width+1,f,c
  4716  00F990                     l3777:
  4717  00F990  BE69               	btfsc	sprintf@width+1,7,c
  4718  00F992  D076               	goto	l3801
  4719  00F994  5069               	movf	sprintf@width+1,w,c
  4720  00F996  E1F1               	bnz	l3771
  4721  00F998  0468               	decf	sprintf@width,w,c
  4722  00F99A  A0D8               	btfss	status,0,c
  4723  00F99C  D071               	goto	l3801
  4724  00F99E  D7ED               	goto	l3771
  4725  00F9A0                     l3779:
  4726                           
  4727                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4728  00F9A0  C040  FFD9         	movff	sprintf@sp,fsr2l
  4729  00F9A4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4730  00F9A8  0E20               	movlw	32
  4731  00F9AA  6EDF               	movwf	indf2,c
  4732  00F9AC  4A40               	infsnz	sprintf@sp,f,c
  4733  00F9AE  2A41               	incf	sprintf@sp+1,f,c
  4734                           
  4735                           ;doprnt.c: 1182: width--;
  4736  00F9B0  0668               	decf	sprintf@width,f,c
  4737  00F9B2  A0D8               	btfss	status,0,c
  4738  00F9B4  0669               	decf	sprintf@width+1,f,c
  4739  00F9B6                     l3785:
  4740  00F9B6  BE69               	btfsc	sprintf@width+1,7,c
  4741  00F9B8  D005               	goto	l3787
  4742  00F9BA  5069               	movf	sprintf@width+1,w,c
  4743  00F9BC  E1F1               	bnz	l3779
  4744  00F9BE  0468               	decf	sprintf@width,w,c
  4745  00F9C0  B0D8               	btfsc	status,0,c
  4746  00F9C2  D7EE               	goto	l3779
  4747  00F9C4                     l3787:
  4748                           
  4749                           ;doprnt.c: 1183: }
  4750                           ;doprnt.c: 1188: if(flag & 0x03)
  4751  00F9C4  0E03               	movlw	3
  4752  00F9C6  1463               	andwf	sprintf@flag,w,c
  4753  00F9C8  6E4A               	movwf	??_sprintf& (0+255),c
  4754  00F9CA  0E00               	movlw	0
  4755  00F9CC  1464               	andwf	sprintf@flag+1,w,c
  4756  00F9CE  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  4757  00F9D0  504A               	movf	??_sprintf,w,c
  4758  00F9D2  104B               	iorwf	??_sprintf+1,w,c
  4759  00F9D4  B4D8               	btfsc	status,2,c
  4760  00F9D6  D054               	goto	l3801
  4761                           
  4762                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4763  00F9D8  C040  FFD9         	movff	sprintf@sp,fsr2l
  4764  00F9DC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4765  00F9E0  0E2D               	movlw	45
  4766  00F9E2  D04C               	goto	L5
  4767  00F9E4                     l3791:
  4768  00F9E4  4A40               	infsnz	sprintf@sp,f,c
  4769  00F9E6  2A41               	incf	sprintf@sp+1,f,c
  4770                           
  4771                           ;doprnt.c: 1195: }
  4772                           ;doprnt.c: 1196: while(c--) {
  4773  00F9E8  D04B               	goto	l3801
  4774  00F9EA                     l3793:
  4775                           
  4776                           ;doprnt.c: 1200: {
  4777                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4778  00F9EA  C05D  F001         	movff	sprintf@val,___lldiv@dividend
  4779  00F9EE  C05E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4780  00F9F2  C05F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4781  00F9F6  C060  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4782  00F9FA  506C               	movf	sprintf@c,w,c
  4783  00F9FC  0D04               	mullw	4
  4784  00F9FE  0EED               	movlw	low _dpowers
  4785  00FA00  24F3               	addwf	prodl,w,c
  4786  00FA02  6EF6               	movwf	tblptrl,c
  4787  00FA04  0EFE               	movlw	high _dpowers
  4788  00FA06  20F4               	addwfc	prodh,w,c
  4789  00FA08  6EF7               	movwf	tblptrh,c
  4790  00FA0A                     	if	1	;There are 3 active tblptr bytes
  4791  00FA0A  6AF8               	clrf	tblptru,c
  4792  00FA0C  0E00               	movlw	low (__mediumconst shr (0+16))
  4793  00FA0E  22F8               	addwfc	tblptru,f,c
  4794  00FA10                     	endif
  4795  00FA10  0009               	tblrd		*+
  4796  00FA12  CFF5 F005          	movff	tablat,___lldiv@divisor
  4797  00FA16  0009               	tblrd		*+
  4798  00FA18  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4799  00FA1C  0009               	tblrd		*+
  4800  00FA1E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4801  00FA22  000A               	tblrd		*-
  4802  00FA24  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4803  00FA28  EC4D  F06E         	call	___lldiv	;wreg free
  4804  00FA2C  C001  F059         	movff	?___lldiv,sprintf@tmpval
  4805  00FA30  C002  F05A         	movff	?___lldiv+1,sprintf@tmpval+1
  4806  00FA34  C003  F05B         	movff	?___lldiv+2,sprintf@tmpval+2
  4807  00FA38  C004  F05C         	movff	?___lldiv+3,sprintf@tmpval+3
  4808                           
  4809                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4810  00FA3C  C059  F00E         	movff	sprintf@tmpval,___llmod@dividend
  4811  00FA40  C05A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4812  00FA44  C05B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4813  00FA48  C05C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4814  00FA4C  0E0A               	movlw	10
  4815  00FA4E  6E12               	movwf	___llmod@divisor,c
  4816  00FA50  0E00               	movlw	0
  4817  00FA52  6E13               	movwf	___llmod@divisor+1,c
  4818  00FA54  0E00               	movlw	0
  4819  00FA56  6E14               	movwf	___llmod@divisor+2,c
  4820  00FA58  0E00               	movlw	0
  4821  00FA5A  6E15               	movwf	___llmod@divisor+3,c
  4822  00FA5C  EC3A  F06D         	call	___llmod	;wreg free
  4823  00FA60  C00E  F059         	movff	?___llmod,sprintf@tmpval
  4824  00FA64  C00F  F05A         	movff	?___llmod+1,sprintf@tmpval+1
  4825  00FA68  C010  F05B         	movff	?___llmod+2,sprintf@tmpval+2
  4826  00FA6C  C011  F05C         	movff	?___llmod+3,sprintf@tmpval+3
  4827                           
  4828                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4829  00FA70  5059               	movf	sprintf@tmpval,w,c
  4830  00FA72  0F30               	addlw	48
  4831  00FA74  C040  FFD9         	movff	sprintf@sp,fsr2l
  4832  00FA78  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4833  00FA7C                     L5:
  4834  00FA7C  6EDF               	movwf	indf2,c
  4835  00FA7E  D7B2               	goto	l3791
  4836  00FA80                     l3801:
  4837  00FA80  066C               	decf	sprintf@c,f,c
  4838  00FA82  286C               	incf	sprintf@c,w,c
  4839  00FA84  B4D8               	btfsc	status,2,c
  4840  00FA86  D00C               	goto	l3809
  4841  00FA88  D7B0               	goto	l3793
  4842  00FA8A                     l3803:
  4843                           
  4844                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4845  00FA8A  C040  FFD9         	movff	sprintf@sp,fsr2l
  4846  00FA8E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4847  00FA92  0E30               	movlw	48
  4848  00FA94  6EDF               	movwf	indf2,c
  4849  00FA96  4A40               	infsnz	sprintf@sp,f,c
  4850  00FA98  2A41               	incf	sprintf@sp+1,f,c
  4851                           
  4852                           ;doprnt.c: 1209: exp--;
  4853  00FA9A  0661               	decf	sprintf@exp,f,c
  4854  00FA9C  A0D8               	btfss	status,0,c
  4855  00FA9E  0662               	decf	sprintf@exp+1,f,c
  4856  00FAA0                     l3809:
  4857  00FAA0  BE62               	btfsc	sprintf@exp+1,7,c
  4858  00FAA2  D005               	goto	l3811
  4859  00FAA4  5062               	movf	sprintf@exp+1,w,c
  4860  00FAA6  E1F1               	bnz	l3803
  4861  00FAA8  0461               	decf	sprintf@exp,w,c
  4862  00FAAA  B0D8               	btfsc	status,0,c
  4863  00FAAC  D7EE               	goto	l3803
  4864  00FAAE                     l3811:
  4865                           
  4866                           ;doprnt.c: 1210: }
  4867                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4868  00FAAE  BE6B               	btfsc	sprintf@prec+1,7,c
  4869  00FAB0  D009               	goto	l521
  4870  00FAB2  506B               	movf	sprintf@prec+1,w,c
  4871  00FAB4  E104               	bnz	u3990
  4872  00FAB6  0E09               	movlw	9
  4873  00FAB8  5C6A               	subwf	sprintf@prec,w,c
  4874  00FABA  A0D8               	btfss	status,0,c
  4875  00FABC  D003               	goto	l521
  4876  00FABE                     u3990:
  4877                           
  4878                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4879  00FABE  0E08               	movlw	8
  4880  00FAC0  6E6C               	movwf	sprintf@c,c
  4881  00FAC2  D002               	goto	l3815
  4882  00FAC4                     l521:
  4883                           
  4884                           ;doprnt.c: 1213: else
  4885                           ;doprnt.c: 1214: c = prec;
  4886  00FAC4  C06A  F06C         	movff	sprintf@prec,sprintf@c
  4887  00FAC8                     l3815:
  4888                           
  4889                           ;doprnt.c: 1215: prec -= c;
  4890  00FAC8  506C               	movf	sprintf@c,w,c
  4891  00FACA  5E6A               	subwf	sprintf@prec,f,c
  4892  00FACC  0E00               	movlw	0
  4893  00FACE  BE6C               	btfsc	sprintf@c,7,c
  4894  00FAD0  0EFF               	movlw	255
  4895  00FAD2  5A6B               	subwfb	sprintf@prec+1,f,c
  4896                           
  4897                           ;doprnt.c: 1219: if(c)
  4898  00FAD4  506C               	movf	sprintf@c,w,c
  4899  00FAD6  B4D8               	btfsc	status,2,c
  4900  00FAD8  D008               	goto	l3823
  4901                           
  4902                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4903  00FADA  C040  FFD9         	movff	sprintf@sp,fsr2l
  4904  00FADE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4905  00FAE2  0E2E               	movlw	46
  4906  00FAE4  6EDF               	movwf	indf2,c
  4907  00FAE6  4A40               	infsnz	sprintf@sp,f,c
  4908  00FAE8  2A41               	incf	sprintf@sp+1,f,c
  4909  00FAEA                     l3823:
  4910                           
  4911                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4912  00FAEA  506C               	movf	sprintf@c,w,c
  4913  00FAEC  ECA5  F077         	call	_scale
  4914  00FAF0  C024  F050         	movff	?_scale,_sprintf$1883
  4915  00FAF4  C025  F051         	movff	?_scale+1,_sprintf$1883+1
  4916  00FAF8  C026  F052         	movff	?_scale+2,_sprintf$1883+2
  4917                           
  4918                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4919  00FAFC  C065  F018         	movff	sprintf@fval,___ftmul@f2
  4920  00FB00  C066  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  4921  00FB04  C067  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  4922  00FB08  C050  F015         	movff	_sprintf$1883,___ftmul@f1
  4923  00FB0C  C051  F016         	movff	_sprintf$1883+1,___ftmul@f1+1
  4924  00FB10  C052  F017         	movff	_sprintf$1883+2,___ftmul@f1+2
  4925  00FB14  EC5C  F070         	call	___ftmul	;wreg free
  4926  00FB18  C015  F02B         	movff	?___ftmul,___fttol@f1
  4927  00FB1C  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  4928  00FB20  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  4929  00FB24  ECE2  F06F         	call	___fttol	;wreg free
  4930  00FB28  C02B  F05D         	movff	?___fttol,sprintf@val
  4931  00FB2C  C02C  F05E         	movff	?___fttol+1,sprintf@val+1
  4932  00FB30  C02D  F05F         	movff	?___fttol+2,sprintf@val+2
  4933  00FB34  C02E  F060         	movff	?___fttol+3,sprintf@val+3
  4934                           
  4935                           ;doprnt.c: 1228: while(c--) {
  4936  00FB38  D075               	goto	l3837
  4937  00FB3A                     l3827:
  4938                           
  4939                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4940  00FB3A  C05D  F001         	movff	sprintf@val,___lldiv@dividend
  4941  00FB3E  C05E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4942  00FB42  C05F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4943  00FB46  C060  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4944  00FB4A  506C               	movf	sprintf@c,w,c
  4945  00FB4C  0D04               	mullw	4
  4946  00FB4E  0EED               	movlw	low _dpowers
  4947  00FB50  24F3               	addwf	prodl,w,c
  4948  00FB52  6EF6               	movwf	tblptrl,c
  4949  00FB54  0EFE               	movlw	high _dpowers
  4950  00FB56  20F4               	addwfc	prodh,w,c
  4951  00FB58  6EF7               	movwf	tblptrh,c
  4952  00FB5A                     	if	1	;There are 3 active tblptr bytes
  4953  00FB5A  6AF8               	clrf	tblptru,c
  4954  00FB5C  0E00               	movlw	low (__mediumconst shr (0+16))
  4955  00FB5E  22F8               	addwfc	tblptru,f,c
  4956  00FB60                     	endif
  4957  00FB60  0009               	tblrd		*+
  4958  00FB62  CFF5 F005          	movff	tablat,___lldiv@divisor
  4959  00FB66  0009               	tblrd		*+
  4960  00FB68  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4961  00FB6C  0009               	tblrd		*+
  4962  00FB6E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4963  00FB72  000A               	tblrd		*-
  4964  00FB74  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4965  00FB78  EC4D  F06E         	call	___lldiv	;wreg free
  4966  00FB7C  C001  F059         	movff	?___lldiv,sprintf@tmpval
  4967  00FB80  C002  F05A         	movff	?___lldiv+1,sprintf@tmpval+1
  4968  00FB84  C003  F05B         	movff	?___lldiv+2,sprintf@tmpval+2
  4969  00FB88  C004  F05C         	movff	?___lldiv+3,sprintf@tmpval+3
  4970                           
  4971                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4972  00FB8C  C059  F00E         	movff	sprintf@tmpval,___llmod@dividend
  4973  00FB90  C05A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4974  00FB94  C05B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4975  00FB98  C05C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4976  00FB9C  0E0A               	movlw	10
  4977  00FB9E  6E12               	movwf	___llmod@divisor,c
  4978  00FBA0  0E00               	movlw	0
  4979  00FBA2  6E13               	movwf	___llmod@divisor+1,c
  4980  00FBA4  0E00               	movlw	0
  4981  00FBA6  6E14               	movwf	___llmod@divisor+2,c
  4982  00FBA8  0E00               	movlw	0
  4983  00FBAA  6E15               	movwf	___llmod@divisor+3,c
  4984  00FBAC  EC3A  F06D         	call	___llmod	;wreg free
  4985  00FBB0  C00E  F059         	movff	?___llmod,sprintf@tmpval
  4986  00FBB4  C00F  F05A         	movff	?___llmod+1,sprintf@tmpval+1
  4987  00FBB8  C010  F05B         	movff	?___llmod+2,sprintf@tmpval+2
  4988  00FBBC  C011  F05C         	movff	?___llmod+3,sprintf@tmpval+3
  4989                           
  4990                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4991  00FBC0  5059               	movf	sprintf@tmpval,w,c
  4992  00FBC2  0F30               	addlw	48
  4993  00FBC4  C040  FFD9         	movff	sprintf@sp,fsr2l
  4994  00FBC8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4995  00FBCC  6EDF               	movwf	indf2,c
  4996  00FBCE  4A40               	infsnz	sprintf@sp,f,c
  4997  00FBD0  2A41               	incf	sprintf@sp+1,f,c
  4998                           
  4999                           ;doprnt.c: 1232: val %= dpowers[c];
  5000  00FBD2  C05D  F00E         	movff	sprintf@val,___llmod@dividend
  5001  00FBD6  C05E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  5002  00FBDA  C05F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  5003  00FBDE  C060  F011         	movff	sprintf@val+3,___llmod@dividend+3
  5004  00FBE2  506C               	movf	sprintf@c,w,c
  5005  00FBE4  0D04               	mullw	4
  5006  00FBE6  0EED               	movlw	low _dpowers
  5007  00FBE8  24F3               	addwf	prodl,w,c
  5008  00FBEA  6EF6               	movwf	tblptrl,c
  5009  00FBEC  0EFE               	movlw	high _dpowers
  5010  00FBEE  20F4               	addwfc	prodh,w,c
  5011  00FBF0  6EF7               	movwf	tblptrh,c
  5012  00FBF2                     	if	1	;There are 3 active tblptr bytes
  5013  00FBF2  6AF8               	clrf	tblptru,c
  5014  00FBF4  0E00               	movlw	low (__mediumconst shr (0+16))
  5015  00FBF6  22F8               	addwfc	tblptru,f,c
  5016  00FBF8                     	endif
  5017  00FBF8  0009               	tblrd		*+
  5018  00FBFA  CFF5 F012          	movff	tablat,___llmod@divisor
  5019  00FBFE  0009               	tblrd		*+
  5020  00FC00  CFF5 F013          	movff	tablat,___llmod@divisor+1
  5021  00FC04  0009               	tblrd		*+
  5022  00FC06  CFF5 F014          	movff	tablat,___llmod@divisor+2
  5023  00FC0A  000A               	tblrd		*-
  5024  00FC0C  CFF5 F015          	movff	tablat,___llmod@divisor+3
  5025  00FC10  EC3A  F06D         	call	___llmod	;wreg free
  5026  00FC14  C00E  F05D         	movff	?___llmod,sprintf@val
  5027  00FC18  C00F  F05E         	movff	?___llmod+1,sprintf@val+1
  5028  00FC1C  C010  F05F         	movff	?___llmod+2,sprintf@val+2
  5029  00FC20  C011  F060         	movff	?___llmod+3,sprintf@val+3
  5030  00FC24                     l3837:
  5031  00FC24  066C               	decf	sprintf@c,f,c
  5032  00FC26  286C               	incf	sprintf@c,w,c
  5033  00FC28  B4D8               	btfsc	status,2,c
  5034  00FC2A  D00C               	goto	l3845
  5035  00FC2C  D786               	goto	l3827
  5036  00FC2E                     l3839:
  5037                           
  5038                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  5039  00FC2E  C040  FFD9         	movff	sprintf@sp,fsr2l
  5040  00FC32  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5041  00FC36  0E30               	movlw	48
  5042  00FC38  6EDF               	movwf	indf2,c
  5043  00FC3A  4A40               	infsnz	sprintf@sp,f,c
  5044  00FC3C  2A41               	incf	sprintf@sp+1,f,c
  5045                           
  5046                           ;doprnt.c: 1237: prec--;
  5047  00FC3E  066A               	decf	sprintf@prec,f,c
  5048  00FC40  A0D8               	btfss	status,0,c
  5049  00FC42  066B               	decf	sprintf@prec+1,f,c
  5050  00FC44                     l3845:
  5051  00FC44  506A               	movf	sprintf@prec,w,c
  5052  00FC46  106B               	iorwf	sprintf@prec+1,w,c
  5053  00FC48  B4D8               	btfsc	status,2,c
  5054  00FC4A  D13B               	goto	l3943
  5055  00FC4C  D7F0               	goto	l3839
  5056  00FC4E                     l3847:
  5057                           
  5058                           ;doprnt.c: 1246: }
  5059                           ;doprnt.c: 1253: {
  5060                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5061  00FC4E  C055  FFD9         	movff	sprintf@ap,fsr2l
  5062  00FC52  C056  FFDA         	movff	sprintf@ap+1,fsr2h
  5063  00FC56  CFDE F05D          	movff	postinc2,sprintf@val
  5064  00FC5A  CFDD F05E          	movff	postdec2,sprintf@val+1
  5065  00FC5E  0E00               	movlw	0
  5066  00FC60  BE5E               	btfsc	sprintf@val+1,7,c
  5067  00FC62  0EFF               	movlw	-1
  5068  00FC64  6E5F               	movwf	sprintf@val+2,c
  5069  00FC66  6E60               	movwf	sprintf@val+3,c
  5070  00FC68  0E02               	movlw	2
  5071  00FC6A  2655               	addwf	sprintf@ap,f,c
  5072  00FC6C  0E00               	movlw	0
  5073  00FC6E  2256               	addwfc	sprintf@ap+1,f,c
  5074                           
  5075                           ;doprnt.c: 1261: if((long)val < 0) {
  5076  00FC70  AE60               	btfss	sprintf@val+3,7,c
  5077  00FC72  D00A               	goto	l3857
  5078                           
  5079                           ;doprnt.c: 1262: flag |= 0x03;
  5080  00FC74  0E03               	movlw	3
  5081  00FC76  1263               	iorwf	sprintf@flag,f,c
  5082                           
  5083                           ;doprnt.c: 1263: val = -val;
  5084  00FC78  1E60               	comf	sprintf@val+3,f,c
  5085  00FC7A  1E5F               	comf	sprintf@val+2,f,c
  5086  00FC7C  1E5E               	comf	sprintf@val+1,f,c
  5087  00FC7E  6C5D               	negf	sprintf@val,c
  5088  00FC80  0E00               	movlw	0
  5089  00FC82  225E               	addwfc	sprintf@val+1,f,c
  5090  00FC84  225F               	addwfc	sprintf@val+2,f,c
  5091  00FC86  2260               	addwfc	sprintf@val+3,f,c
  5092  00FC88                     l3857:
  5093                           
  5094                           ;doprnt.c: 1264: }
  5095                           ;doprnt.c: 1266: }
  5096                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5097  00FC88  506A               	movf	sprintf@prec,w,c
  5098  00FC8A  106B               	iorwf	sprintf@prec+1,w,c
  5099  00FC8C  A4D8               	btfss	status,2,c
  5100  00FC8E  D008               	goto	l3863
  5101  00FC90  505D               	movf	sprintf@val,w,c
  5102  00FC92  105E               	iorwf	sprintf@val+1,w,c
  5103  00FC94  105F               	iorwf	sprintf@val+2,w,c
  5104  00FC96  1060               	iorwf	sprintf@val+3,w,c
  5105  00FC98  A4D8               	btfss	status,2,c
  5106  00FC9A  D002               	goto	l3863
  5107                           
  5108                           ;doprnt.c: 1291: prec++;
  5109  00FC9C  4A6A               	infsnz	sprintf@prec,f,c
  5110  00FC9E  2A6B               	incf	sprintf@prec+1,f,c
  5111  00FCA0                     l3863:
  5112                           
  5113                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5114  00FCA0  0E01               	movlw	1
  5115  00FCA2  6E6C               	movwf	sprintf@c,c
  5116  00FCA4                     l3865:
  5117  00FCA4  0E0A               	movlw	10
  5118  00FCA6  186C               	xorwf	sprintf@c,w,c
  5119  00FCA8  B4D8               	btfsc	status,2,c
  5120  00FCAA  D01B               	goto	l3877
  5121                           
  5122                           ;doprnt.c: 1306: if(val < dpowers[c])
  5123  00FCAC  506C               	movf	sprintf@c,w,c
  5124  00FCAE  0D04               	mullw	4
  5125  00FCB0  0EED               	movlw	low _dpowers
  5126  00FCB2  24F3               	addwf	prodl,w,c
  5127  00FCB4  6EF6               	movwf	tblptrl,c
  5128  00FCB6  0EFE               	movlw	high _dpowers
  5129  00FCB8  20F4               	addwfc	prodh,w,c
  5130  00FCBA  6EF7               	movwf	tblptrh,c
  5131  00FCBC                     	if	1	;There are 3 active tblptr bytes
  5132  00FCBC  6AF8               	clrf	tblptru,c
  5133  00FCBE  0E00               	movlw	low (__mediumconst shr (0+16))
  5134  00FCC0  22F8               	addwfc	tblptru,f,c
  5135  00FCC2                     	endif
  5136  00FCC2  0009               	tblrd		*+
  5137  00FCC4  50F5               	movf	tablat,w,c
  5138  00FCC6  5C5D               	subwf	sprintf@val,w,c
  5139  00FCC8  0009               	tblrd		*+
  5140  00FCCA  50F5               	movf	tablat,w,c
  5141  00FCCC  585E               	subwfb	sprintf@val+1,w,c
  5142  00FCCE  0009               	tblrd		*+
  5143  00FCD0  50F5               	movf	tablat,w,c
  5144  00FCD2  585F               	subwfb	sprintf@val+2,w,c
  5145  00FCD4  0009               	tblrd		*+
  5146  00FCD6  50F5               	movf	tablat,w,c
  5147  00FCD8  5860               	subwfb	sprintf@val+3,w,c
  5148  00FCDA  A0D8               	btfss	status,0,c
  5149  00FCDC  D002               	goto	l3877
  5150                           
  5151                           ;doprnt.c: 1307: break;
  5152  00FCDE  2A6C               	incf	sprintf@c,f,c
  5153  00FCE0  D7E1               	goto	l3865
  5154  00FCE2                     l3877:
  5155                           
  5156                           ;doprnt.c: 1339: if(c < prec)
  5157  00FCE2  0E80               	movlw	128
  5158  00FCE4  BE6C               	btfsc	sprintf@c,7,c
  5159  00FCE6  0E7F               	movlw	127
  5160  00FCE8  6E4A               	movwf	??_sprintf& (0+255),c
  5161  00FCEA  506A               	movf	sprintf@prec,w,c
  5162  00FCEC  5C6C               	subwf	sprintf@c,w,c
  5163  00FCEE  506B               	movf	sprintf@prec+1,w,c
  5164  00FCF0  0A80               	xorlw	128
  5165  00FCF2  584A               	subwfb	??_sprintf& (0+255),w,c
  5166  00FCF4  B0D8               	btfsc	status,0,c
  5167  00FCF6  D003               	goto	l3881
  5168                           
  5169                           ;doprnt.c: 1340: c = prec;
  5170  00FCF8  C06A  F06C         	movff	sprintf@prec,sprintf@c
  5171  00FCFC  D010               	goto	l3885
  5172  00FCFE                     l3881:
  5173                           
  5174                           ;doprnt.c: 1341: else if(prec < c)
  5175  00FCFE  506B               	movf	sprintf@prec+1,w,c
  5176  00FD00  0A80               	xorlw	128
  5177  00FD02  6E4A               	movwf	??_sprintf& (0+255),c
  5178  00FD04  506C               	movf	sprintf@c,w,c
  5179  00FD06  5C6A               	subwf	sprintf@prec,w,c
  5180  00FD08  0E80               	movlw	128
  5181  00FD0A  BE6C               	btfsc	sprintf@c,7,c
  5182  00FD0C  0E7F               	movlw	127
  5183  00FD0E  584A               	subwfb	??_sprintf& (0+255),w,c
  5184  00FD10  B0D8               	btfsc	status,0,c
  5185  00FD12  D005               	goto	l3885
  5186                           
  5187                           ;doprnt.c: 1342: prec = c;
  5188  00FD14  506C               	movf	sprintf@c,w,c
  5189  00FD16  6E6A               	movwf	sprintf@prec,c
  5190  00FD18  6A6B               	clrf	sprintf@prec+1,c
  5191  00FD1A  BE6A               	btfsc	sprintf@prec,7,c
  5192  00FD1C  066B               	decf	sprintf@prec+1,f,c
  5193  00FD1E                     l3885:
  5194                           
  5195                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5196  00FD1E  5068               	movf	sprintf@width,w,c
  5197  00FD20  1069               	iorwf	sprintf@width+1,w,c
  5198  00FD22  B4D8               	btfsc	status,2,c
  5199  00FD24  D00D               	goto	l3891
  5200  00FD26  0E03               	movlw	3
  5201  00FD28  1463               	andwf	sprintf@flag,w,c
  5202  00FD2A  6E4A               	movwf	??_sprintf& (0+255),c
  5203  00FD2C  0E00               	movlw	0
  5204  00FD2E  1464               	andwf	sprintf@flag+1,w,c
  5205  00FD30  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  5206  00FD32  504A               	movf	??_sprintf,w,c
  5207  00FD34  104B               	iorwf	??_sprintf+1,w,c
  5208  00FD36  B4D8               	btfsc	status,2,c
  5209  00FD38  D003               	goto	l3891
  5210                           
  5211                           ;doprnt.c: 1346: width--;
  5212  00FD3A  0668               	decf	sprintf@width,f,c
  5213  00FD3C  A0D8               	btfss	status,0,c
  5214  00FD3E  0669               	decf	sprintf@width+1,f,c
  5215  00FD40                     l3891:
  5216                           
  5217                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5218  00FD40  AC64               	btfss	sprintf@flag+1,6,c
  5219  00FD42  D013               	goto	l3899
  5220                           
  5221                           ;doprnt.c: 1349: if(width > prec)
  5222  00FD44  5068               	movf	sprintf@width,w,c
  5223  00FD46  5C6A               	subwf	sprintf@prec,w,c
  5224  00FD48  506B               	movf	sprintf@prec+1,w,c
  5225  00FD4A  0A80               	xorlw	128
  5226  00FD4C  6E4A               	movwf	??_sprintf& (0+255),c
  5227  00FD4E  5069               	movf	sprintf@width+1,w,c
  5228  00FD50  0A80               	xorlw	128
  5229  00FD52  584A               	subwfb	??_sprintf& (0+255),w,c
  5230  00FD54  B0D8               	btfsc	status,0,c
  5231  00FD56  D005               	goto	l3897
  5232                           
  5233                           ;doprnt.c: 1350: width -= prec;
  5234  00FD58  506A               	movf	sprintf@prec,w,c
  5235  00FD5A  5E68               	subwf	sprintf@width,f,c
  5236  00FD5C  506B               	movf	sprintf@prec+1,w,c
  5237  00FD5E  5A69               	subwfb	sprintf@width+1,f,c
  5238  00FD60  D004               	goto	l3899
  5239  00FD62                     l3897:
  5240                           
  5241                           ;doprnt.c: 1351: else
  5242                           ;doprnt.c: 1352: width = 0;
  5243  00FD62  0E00               	movlw	0
  5244  00FD64  6E69               	movwf	sprintf@width+1,c
  5245  00FD66  0E00               	movlw	0
  5246  00FD68  6E68               	movwf	sprintf@width,c
  5247  00FD6A                     l3899:
  5248                           
  5249                           ;doprnt.c: 1353: }
  5250                           ;doprnt.c: 1381: if(width > c)
  5251  00FD6A  0E80               	movlw	128
  5252  00FD6C  BE6C               	btfsc	sprintf@c,7,c
  5253  00FD6E  0E7F               	movlw	127
  5254  00FD70  6E4A               	movwf	??_sprintf& (0+255),c
  5255  00FD72  5068               	movf	sprintf@width,w,c
  5256  00FD74  5C6C               	subwf	sprintf@c,w,c
  5257  00FD76  5069               	movf	sprintf@width+1,w,c
  5258  00FD78  0A80               	xorlw	128
  5259  00FD7A  584A               	subwfb	??_sprintf& (0+255),w,c
  5260  00FD7C  B0D8               	btfsc	status,0,c
  5261  00FD7E  D007               	goto	l3903
  5262                           
  5263                           ;doprnt.c: 1382: width -= c;
  5264  00FD80  506C               	movf	sprintf@c,w,c
  5265  00FD82  5E68               	subwf	sprintf@width,f,c
  5266  00FD84  0E00               	movlw	0
  5267  00FD86  BE6C               	btfsc	sprintf@c,7,c
  5268  00FD88  0EFF               	movlw	255
  5269  00FD8A  5A69               	subwfb	sprintf@width+1,f,c
  5270  00FD8C  D004               	goto	l3905
  5271  00FD8E                     l3903:
  5272                           
  5273                           ;doprnt.c: 1383: else
  5274                           ;doprnt.c: 1384: width = 0;
  5275  00FD8E  0E00               	movlw	0
  5276  00FD90  6E69               	movwf	sprintf@width+1,c
  5277  00FD92  0E00               	movlw	0
  5278  00FD94  6E68               	movwf	sprintf@width,c
  5279  00FD96                     l3905:
  5280                           
  5281                           ;doprnt.c: 1387: if(flag & 0x04) {
  5282  00FD96  A463               	btfss	sprintf@flag,2,c
  5283  00FD98  D022               	goto	l3921
  5284                           
  5285                           ;doprnt.c: 1392: if(flag & 0x03)
  5286  00FD9A  0E03               	movlw	3
  5287  00FD9C  1463               	andwf	sprintf@flag,w,c
  5288  00FD9E  6E4A               	movwf	??_sprintf& (0+255),c
  5289  00FDA0  0E00               	movlw	0
  5290  00FDA2  1464               	andwf	sprintf@flag+1,w,c
  5291  00FDA4  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  5292  00FDA6  504A               	movf	??_sprintf,w,c
  5293  00FDA8  104B               	iorwf	??_sprintf+1,w,c
  5294  00FDAA  B4D8               	btfsc	status,2,c
  5295  00FDAC  D008               	goto	l3913
  5296                           
  5297                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5298  00FDAE  C040  FFD9         	movff	sprintf@sp,fsr2l
  5299  00FDB2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5300  00FDB6  0E2D               	movlw	45
  5301  00FDB8  6EDF               	movwf	indf2,c
  5302  00FDBA  4A40               	infsnz	sprintf@sp,f,c
  5303  00FDBC  2A41               	incf	sprintf@sp+1,f,c
  5304  00FDBE                     l3913:
  5305                           
  5306                           ;doprnt.c: 1415: if(width)
  5307  00FDBE  5068               	movf	sprintf@width,w,c
  5308  00FDC0  1069               	iorwf	sprintf@width+1,w,c
  5309  00FDC2  B4D8               	btfsc	status,2,c
  5310  00FDC4  D076               	goto	l3941
  5311                           
  5312                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5313                           
  5314                           ;doprnt.c: 1416: do
  5315  00FDC6  C040  FFD9         	movff	sprintf@sp,fsr2l
  5316  00FDCA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5317  00FDCE  0E30               	movlw	48
  5318  00FDD0  6EDF               	movwf	indf2,c
  5319  00FDD2  4A40               	infsnz	sprintf@sp,f,c
  5320  00FDD4  2A41               	incf	sprintf@sp+1,f,c
  5321                           
  5322                           ;doprnt.c: 1418: while(--width);
  5323  00FDD6  0668               	decf	sprintf@width,f,c
  5324  00FDD8  A0D8               	btfss	status,0,c
  5325  00FDDA  0669               	decf	sprintf@width+1,f,c
  5326  00FDDC  D7F0               	goto	l3913
  5327  00FDDE                     l3921:
  5328                           
  5329                           ;doprnt.c: 1422: {
  5330                           ;doprnt.c: 1424: if(width
  5331                           ;doprnt.c: 1428: )
  5332  00FDDE  5068               	movf	sprintf@width,w,c
  5333  00FDE0  1069               	iorwf	sprintf@width+1,w,c
  5334  00FDE2  B4D8               	btfsc	status,2,c
  5335  00FDE4  D00F               	goto	l3929
  5336  00FDE6                     l3923:
  5337                           
  5338                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5339  00FDE6  C040  FFD9         	movff	sprintf@sp,fsr2l
  5340  00FDEA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5341  00FDEE  0E20               	movlw	32
  5342  00FDF0  6EDF               	movwf	indf2,c
  5343  00FDF2  4A40               	infsnz	sprintf@sp,f,c
  5344  00FDF4  2A41               	incf	sprintf@sp+1,f,c
  5345                           
  5346                           ;doprnt.c: 1431: while(--width);
  5347  00FDF6  0668               	decf	sprintf@width,f,c
  5348  00FDF8  A0D8               	btfss	status,0,c
  5349  00FDFA  0669               	decf	sprintf@width+1,f,c
  5350  00FDFC  5068               	movf	sprintf@width,w,c
  5351  00FDFE  1069               	iorwf	sprintf@width+1,w,c
  5352  00FE00  A4D8               	btfss	status,2,c
  5353  00FE02  D7F1               	goto	l3923
  5354  00FE04                     l3929:
  5355                           
  5356                           ;doprnt.c: 1438: if(flag & 0x03)
  5357  00FE04  0E03               	movlw	3
  5358  00FE06  1463               	andwf	sprintf@flag,w,c
  5359  00FE08  6E4A               	movwf	??_sprintf& (0+255),c
  5360  00FE0A  0E00               	movlw	0
  5361  00FE0C  1464               	andwf	sprintf@flag+1,w,c
  5362  00FE0E  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  5363  00FE10  504A               	movf	??_sprintf,w,c
  5364  00FE12  104B               	iorwf	??_sprintf+1,w,c
  5365  00FE14  B4D8               	btfsc	status,2,c
  5366  00FE16  D04D               	goto	l3941
  5367                           
  5368                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5369  00FE18  C040  FFD9         	movff	sprintf@sp,fsr2l
  5370  00FE1C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5371  00FE20  0E2D               	movlw	45
  5372  00FE22  6EDF               	movwf	indf2,c
  5373  00FE24  D044               	goto	l3939
  5374  00FE26                     l3935:
  5375                           
  5376                           ;doprnt.c: 1478: {
  5377                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5378  00FE26  C06A  F04A         	movff	sprintf@prec,??_sprintf
  5379  00FE2A  C06B  F04B         	movff	sprintf@prec+1,??_sprintf+1
  5380  00FE2E  90D8               	bcf	status,0,c
  5381  00FE30  364A               	rlcf	??_sprintf,f,c
  5382  00FE32  364B               	rlcf	??_sprintf+1,f,c
  5383  00FE34  90D8               	bcf	status,0,c
  5384  00FE36  364A               	rlcf	??_sprintf,f,c
  5385  00FE38  364B               	rlcf	??_sprintf+1,f,c
  5386  00FE3A  0EED               	movlw	low _dpowers
  5387  00FE3C  244A               	addwf	??_sprintf,w,c
  5388  00FE3E  6EF6               	movwf	tblptrl,c
  5389  00FE40  0EFE               	movlw	high _dpowers
  5390  00FE42  204B               	addwfc	??_sprintf+1,w,c
  5391  00FE44  6EF7               	movwf	tblptrh,c
  5392  00FE46                     	if	1	;There are 3 active tblptr bytes
  5393  00FE46  6AF8               	clrf	tblptru,c
  5394  00FE48  0E00               	movlw	low (__mediumconst shr (0+16))
  5395  00FE4A  22F8               	addwfc	tblptru,f,c
  5396  00FE4C                     	endif
  5397  00FE4C  0009               	tblrd		*+
  5398  00FE4E  CFF5 F005          	movff	tablat,___lldiv@divisor
  5399  00FE52  0009               	tblrd		*+
  5400  00FE54  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5401  00FE58  0009               	tblrd		*+
  5402  00FE5A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5403  00FE5E  000A               	tblrd		*-
  5404  00FE60  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5405  00FE64  C05D  F001         	movff	sprintf@val,___lldiv@dividend
  5406  00FE68  C05E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  5407  00FE6C  C05F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  5408  00FE70  C060  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  5409  00FE74  EC4D  F06E         	call	___lldiv	;wreg free
  5410  00FE78  C001  F00E         	movff	?___lldiv,___llmod@dividend
  5411  00FE7C  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  5412  00FE80  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  5413  00FE84  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  5414  00FE88  0E0A               	movlw	10
  5415  00FE8A  6E12               	movwf	___llmod@divisor,c
  5416  00FE8C  0E00               	movlw	0
  5417  00FE8E  6E13               	movwf	___llmod@divisor+1,c
  5418  00FE90  0E00               	movlw	0
  5419  00FE92  6E14               	movwf	___llmod@divisor+2,c
  5420  00FE94  0E00               	movlw	0
  5421  00FE96  6E15               	movwf	___llmod@divisor+3,c
  5422  00FE98  EC3A  F06D         	call	___llmod	;wreg free
  5423  00FE9C  500E               	movf	?___llmod,w,c
  5424  00FE9E  0F30               	addlw	48
  5425  00FEA0  6E6C               	movwf	sprintf@c,c
  5426                           
  5427                           ;doprnt.c: 1523: }
  5428                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5429  00FEA2  C040  FFD9         	movff	sprintf@sp,fsr2l
  5430  00FEA6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5431  00FEAA  C06C  FFDF         	movff	sprintf@c,indf2
  5432  00FEAE                     l3939:
  5433  00FEAE  4A40               	infsnz	sprintf@sp,f,c
  5434  00FEB0  2A41               	incf	sprintf@sp+1,f,c
  5435  00FEB2                     l3941:
  5436  00FEB2  066A               	decf	sprintf@prec,f,c
  5437  00FEB4  A0D8               	btfss	status,0,c
  5438  00FEB6  066B               	decf	sprintf@prec+1,f,c
  5439  00FEB8  286A               	incf	sprintf@prec,w,c
  5440  00FEBA  E1B5               	bnz	l3935
  5441  00FEBC  286B               	incf	sprintf@prec+1,w,c
  5442  00FEBE  A4D8               	btfss	status,2,c
  5443  00FEC0  D7B2               	goto	l3935
  5444  00FEC2                     l3943:
  5445  00FEC2  C042  FFF6         	movff	sprintf@f,tblptrl
  5446  00FEC6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  5447  00FECA  4A42               	infsnz	sprintf@f,f,c
  5448  00FECC  2A43               	incf	sprintf@f+1,f,c
  5449  00FECE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5450  00FECE  6AF8               	clrf	tblptru,c
  5451  00FED0                     	endif
  5452  00FED0                     	if	0	;tblptru may be non-zero
  5453  00FED0                     	endif
  5454  00FED0  0008               	tblrd		*
  5455  00FED2  CFF5 F06C          	movff	tablat,sprintf@c
  5456  00FED6  506C               	movf	sprintf@c,w,c
  5457  00FED8  A4D8               	btfss	status,2,c
  5458  00FEDA  EFC7  F079         	goto	l3579
  5459  00FEDE                     l3945:
  5460                           
  5461                           ;doprnt.c: 1538: *sp = 0;
  5462  00FEDE  C040  FFD9         	movff	sprintf@sp,fsr2l
  5463  00FEE2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5464  00FEE6  0E00               	movlw	0
  5465  00FEE8  6EDF               	movwf	indf2,c
  5466  00FEEA  0012               	return	
  5467  00FEEC                     __end_of_sprintf:
  5468                           	opt stack 0
  5469                           tblptru	equ	0xFF8
  5470                           tblptrh	equ	0xFF7
  5471                           tblptrl	equ	0xFF6
  5472                           tablat	equ	0xFF5
  5473                           prodh	equ	0xFF4
  5474                           prodl	equ	0xFF3
  5475                           intcon	equ	0xFF2
  5476                           intcon2	equ	0xFF1
  5477                           intcon3	equ	0xFF0
  5478                           postinc0	equ	0xFEE
  5479                           wreg	equ	0xFE8
  5480                           postdec1	equ	0xFE5
  5481                           fsr1l	equ	0xFE1
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function _scale *****************
  5490 ;; Defined at:
  5491 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  scl             1    wreg     char 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  scl             1   41[COMRAM] char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  3   35[COMRAM] char 
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5505 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;Total ram usage:        7 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    2
  5512 ;; This function calls:
  5513 ;;		___awdiv
  5514 ;;		___awmod
  5515 ;;		___ftmul
  5516 ;;		___wmul
  5517 ;; This function is called by:
  5518 ;;		_sprintf
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text20
  5523  00EF4A                     __ptext20:
  5524                           	opt stack 0
  5525  00EF4A                     _scale:
  5526                           	opt stack 27
  5527                           
  5528                           ;incstack = 0
  5529                           ;scale@scl stored from wreg
  5530  00EF4A  6E2A               	movwf	scale@scl,c
  5531                           
  5532                           ;doprnt.c: 428: if(scl < 0) {
  5533  00EF4C  AE2A               	btfss	scale@scl,7,c
  5534  00EF4E  D10D               	goto	l3307
  5535                           
  5536                           ;doprnt.c: 429: scl = -scl;
  5537  00EF50  6C2A               	negf	scale@scl,c
  5538                           
  5539                           ;doprnt.c: 430: if(scl>=110)
  5540  00EF52  502A               	movf	scale@scl,w,c
  5541  00EF54  0A80               	xorlw	128
  5542  00EF56  0F12               	addlw	-238
  5543  00EF58  A0D8               	btfss	status,0,c
  5544  00EF5A  D09A               	goto	l3297
  5545                           
  5546                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5547  00EF5C  0E00               	movlw	0
  5548  00EF5E  6E12               	movwf	___wmul@multiplicand+1,c
  5549  00EF60  0E03               	movlw	3
  5550  00EF62  6E11               	movwf	___wmul@multiplicand,c
  5551  00EF64  0E00               	movlw	0
  5552  00EF66  6E0A               	movwf	___awdiv@divisor+1,c
  5553  00EF68  0E0A               	movlw	10
  5554  00EF6A  6E09               	movwf	___awdiv@divisor,c
  5555  00EF6C  0E00               	movlw	0
  5556  00EF6E  6E04               	movwf	___awmod@divisor+1,c
  5557  00EF70  0E64               	movlw	100
  5558  00EF72  6E03               	movwf	___awmod@divisor,c
  5559  00EF74  502A               	movf	scale@scl,w,c
  5560  00EF76  6E01               	movwf	___awmod@dividend,c
  5561  00EF78  6A02               	clrf	___awmod@dividend+1,c
  5562  00EF7A  BE01               	btfsc	___awmod@dividend,7,c
  5563  00EF7C  0602               	decf	___awmod@dividend+1,f,c
  5564  00EF7E  ECD4  F06D         	call	___awmod	;wreg free
  5565  00EF82  C001  F007         	movff	?___awmod,___awdiv@dividend
  5566  00EF86  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5567  00EF8A  EC8E  F06E         	call	___awdiv	;wreg free
  5568  00EF8E  0E09               	movlw	9
  5569  00EF90  2407               	addwf	?___awdiv,w,c
  5570  00EF92  6E0F               	movwf	___wmul@multiplier,c
  5571  00EF94  0E00               	movlw	0
  5572  00EF96  2008               	addwfc	?___awdiv+1,w,c
  5573  00EF98  6E10               	movwf	___wmul@multiplier+1,c
  5574  00EF9A  EC36  F06B         	call	___wmul	;wreg free
  5575  00EF9E  0E15               	movlw	low __npowers_
  5576  00EFA0  240F               	addwf	?___wmul,w,c
  5577  00EFA2  6EF6               	movwf	tblptrl,c
  5578  00EFA4  0EFF               	movlw	high __npowers_
  5579  00EFA6  2010               	addwfc	?___wmul+1,w,c
  5580  00EFA8  6EF7               	movwf	tblptrh,c
  5581  00EFAA                     	if	1	;There are 3 active tblptr bytes
  5582  00EFAA  6AF8               	clrf	tblptru,c
  5583  00EFAC  0E00               	movlw	low (__mediumconst shr (0+16))
  5584  00EFAE  22F8               	addwfc	tblptru,f,c
  5585  00EFB0                     	endif
  5586  00EFB0  0009               	tblrd		*+
  5587  00EFB2  CFF5 F018          	movff	tablat,___ftmul@f2
  5588  00EFB6  0009               	tblrd		*+
  5589  00EFB8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5590  00EFBC  000A               	tblrd		*-
  5591  00EFBE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5592  00EFC2  0E00               	movlw	0
  5593  00EFC4  6E0A               	movwf	___awdiv@divisor+1,c
  5594  00EFC6  0E64               	movlw	100
  5595  00EFC8  6E09               	movwf	___awdiv@divisor,c
  5596  00EFCA  502A               	movf	scale@scl,w,c
  5597  00EFCC  6E07               	movwf	___awdiv@dividend,c
  5598  00EFCE  6A08               	clrf	___awdiv@dividend+1,c
  5599  00EFD0  BE07               	btfsc	___awdiv@dividend,7,c
  5600  00EFD2  0608               	decf	___awdiv@dividend+1,f,c
  5601  00EFD4  EC8E  F06E         	call	___awdiv	;wreg free
  5602  00EFD8  0E12               	movlw	18
  5603  00EFDA  2407               	addwf	?___awdiv,w,c
  5604  00EFDC  6E0F               	movwf	___wmul@multiplier,c
  5605  00EFDE  0E00               	movlw	0
  5606  00EFE0  2008               	addwfc	?___awdiv+1,w,c
  5607  00EFE2  6E10               	movwf	___wmul@multiplier+1,c
  5608  00EFE4  0E00               	movlw	0
  5609  00EFE6  6E12               	movwf	___wmul@multiplicand+1,c
  5610  00EFE8  0E03               	movlw	3
  5611  00EFEA  6E11               	movwf	___wmul@multiplicand,c
  5612  00EFEC  EC36  F06B         	call	___wmul	;wreg free
  5613  00EFF0  0E15               	movlw	low __npowers_
  5614  00EFF2  240F               	addwf	?___wmul,w,c
  5615  00EFF4  6EF6               	movwf	tblptrl,c
  5616  00EFF6  0EFF               	movlw	high __npowers_
  5617  00EFF8  2010               	addwfc	?___wmul+1,w,c
  5618  00EFFA  6EF7               	movwf	tblptrh,c
  5619  00EFFC                     	if	1	;There are 3 active tblptr bytes
  5620  00EFFC  6AF8               	clrf	tblptru,c
  5621  00EFFE  0E00               	movlw	low (__mediumconst shr (0+16))
  5622  00F000  22F8               	addwfc	tblptru,f,c
  5623  00F002                     	endif
  5624  00F002  0009               	tblrd		*+
  5625  00F004  CFF5 F015          	movff	tablat,___ftmul@f1
  5626  00F008  0009               	tblrd		*+
  5627  00F00A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5628  00F00E  000A               	tblrd		*-
  5629  00F010  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5630  00F014  EC5C  F070         	call	___ftmul	;wreg free
  5631  00F018  C015  F027         	movff	?___ftmul,_scale$1882
  5632  00F01C  C016  F028         	movff	?___ftmul+1,_scale$1882+1
  5633  00F020  C017  F029         	movff	?___ftmul+2,_scale$1882+2
  5634                           
  5635                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5636  00F024  C027  F015         	movff	_scale$1882,___ftmul@f1
  5637  00F028  C028  F016         	movff	_scale$1882+1,___ftmul@f1+1
  5638  00F02C  C029  F017         	movff	_scale$1882+2,___ftmul@f1+2
  5639  00F030  0E00               	movlw	0
  5640  00F032  6E12               	movwf	___wmul@multiplicand+1,c
  5641  00F034  0E03               	movlw	3
  5642  00F036  6E11               	movwf	___wmul@multiplicand,c
  5643  00F038  0E00               	movlw	0
  5644  00F03A  6E04               	movwf	___awmod@divisor+1,c
  5645  00F03C  0E0A               	movlw	10
  5646  00F03E  6E03               	movwf	___awmod@divisor,c
  5647  00F040  502A               	movf	scale@scl,w,c
  5648  00F042  6E01               	movwf	___awmod@dividend,c
  5649  00F044  6A02               	clrf	___awmod@dividend+1,c
  5650  00F046  BE01               	btfsc	___awmod@dividend,7,c
  5651  00F048  0602               	decf	___awmod@dividend+1,f,c
  5652  00F04A  ECD4  F06D         	call	___awmod	;wreg free
  5653  00F04E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5654  00F052  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5655  00F056  EC36  F06B         	call	___wmul	;wreg free
  5656  00F05A  0E15               	movlw	low __npowers_
  5657  00F05C  240F               	addwf	?___wmul,w,c
  5658  00F05E  6EF6               	movwf	tblptrl,c
  5659  00F060  0EFF               	movlw	high __npowers_
  5660  00F062  2010               	addwfc	?___wmul+1,w,c
  5661  00F064  6EF7               	movwf	tblptrh,c
  5662  00F066                     	if	1	;There are 3 active tblptr bytes
  5663  00F066  6AF8               	clrf	tblptru,c
  5664  00F068  0E00               	movlw	low (__mediumconst shr (0+16))
  5665  00F06A  22F8               	addwfc	tblptru,f,c
  5666  00F06C                     	endif
  5667  00F06C  0009               	tblrd		*+
  5668  00F06E  CFF5 F018          	movff	tablat,___ftmul@f2
  5669  00F072  0009               	tblrd		*+
  5670  00F074  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5671  00F078  000A               	tblrd		*-
  5672  00F07A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5673  00F07E  EC5C  F070         	call	___ftmul	;wreg free
  5674  00F082  C015  F024         	movff	?___ftmul,?_scale
  5675  00F086  C016  F025         	movff	?___ftmul+1,?_scale+1
  5676  00F08A  C017  F026         	movff	?___ftmul+2,?_scale+2
  5677  00F08E  0012               	return	
  5678  00F090                     l3297:
  5679                           
  5680                           ;doprnt.c: 432: else if(scl > 10)
  5681  00F090  502A               	movf	scale@scl,w,c
  5682  00F092  0A80               	xorlw	128
  5683  00F094  0F75               	addlw	-139
  5684  00F096  A0D8               	btfss	status,0,c
  5685  00F098  D053               	goto	l3303
  5686                           
  5687                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5688  00F09A  0E00               	movlw	0
  5689  00F09C  6E0A               	movwf	___awdiv@divisor+1,c
  5690  00F09E  0E0A               	movlw	10
  5691  00F0A0  6E09               	movwf	___awdiv@divisor,c
  5692  00F0A2  502A               	movf	scale@scl,w,c
  5693  00F0A4  6E07               	movwf	___awdiv@dividend,c
  5694  00F0A6  6A08               	clrf	___awdiv@dividend+1,c
  5695  00F0A8  BE07               	btfsc	___awdiv@dividend,7,c
  5696  00F0AA  0608               	decf	___awdiv@dividend+1,f,c
  5697  00F0AC  EC8E  F06E         	call	___awdiv	;wreg free
  5698  00F0B0  0E09               	movlw	9
  5699  00F0B2  2407               	addwf	?___awdiv,w,c
  5700  00F0B4  6E0F               	movwf	___wmul@multiplier,c
  5701  00F0B6  0E00               	movlw	0
  5702  00F0B8  2008               	addwfc	?___awdiv+1,w,c
  5703  00F0BA  6E10               	movwf	___wmul@multiplier+1,c
  5704  00F0BC  0E00               	movlw	0
  5705  00F0BE  6E12               	movwf	___wmul@multiplicand+1,c
  5706  00F0C0  0E03               	movlw	3
  5707  00F0C2  6E11               	movwf	___wmul@multiplicand,c
  5708  00F0C4  EC36  F06B         	call	___wmul	;wreg free
  5709  00F0C8  0E15               	movlw	low __npowers_
  5710  00F0CA  240F               	addwf	?___wmul,w,c
  5711  00F0CC  6EF6               	movwf	tblptrl,c
  5712  00F0CE  0EFF               	movlw	high __npowers_
  5713  00F0D0  2010               	addwfc	?___wmul+1,w,c
  5714  00F0D2  6EF7               	movwf	tblptrh,c
  5715  00F0D4                     	if	1	;There are 3 active tblptr bytes
  5716  00F0D4  6AF8               	clrf	tblptru,c
  5717  00F0D6  0E00               	movlw	low (__mediumconst shr (0+16))
  5718  00F0D8  22F8               	addwfc	tblptru,f,c
  5719  00F0DA                     	endif
  5720  00F0DA  0009               	tblrd		*+
  5721  00F0DC  CFF5 F015          	movff	tablat,___ftmul@f1
  5722  00F0E0  0009               	tblrd		*+
  5723  00F0E2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5724  00F0E6  000A               	tblrd		*-
  5725  00F0E8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5726  00F0EC  0E00               	movlw	0
  5727  00F0EE  6E12               	movwf	___wmul@multiplicand+1,c
  5728  00F0F0  0E03               	movlw	3
  5729  00F0F2  6E11               	movwf	___wmul@multiplicand,c
  5730  00F0F4  0E00               	movlw	0
  5731  00F0F6  6E04               	movwf	___awmod@divisor+1,c
  5732  00F0F8  0E0A               	movlw	10
  5733  00F0FA  6E03               	movwf	___awmod@divisor,c
  5734  00F0FC  502A               	movf	scale@scl,w,c
  5735  00F0FE  6E01               	movwf	___awmod@dividend,c
  5736  00F100  6A02               	clrf	___awmod@dividend+1,c
  5737  00F102  BE01               	btfsc	___awmod@dividend,7,c
  5738  00F104  0602               	decf	___awmod@dividend+1,f,c
  5739  00F106  ECD4  F06D         	call	___awmod	;wreg free
  5740  00F10A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5741  00F10E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5742  00F112  EC36  F06B         	call	___wmul	;wreg free
  5743  00F116  0E15               	movlw	low __npowers_
  5744  00F118  240F               	addwf	?___wmul,w,c
  5745  00F11A  6EF6               	movwf	tblptrl,c
  5746  00F11C  0EFF               	movlw	high __npowers_
  5747  00F11E  2010               	addwfc	?___wmul+1,w,c
  5748  00F120  6EF7               	movwf	tblptrh,c
  5749  00F122                     	if	1	;There are 3 active tblptr bytes
  5750  00F122  6AF8               	clrf	tblptru,c
  5751  00F124  0E00               	movlw	low (__mediumconst shr (0+16))
  5752  00F126  22F8               	addwfc	tblptru,f,c
  5753  00F128                     	endif
  5754  00F128  0009               	tblrd		*+
  5755  00F12A  CFF5 F018          	movff	tablat,___ftmul@f2
  5756  00F12E  0009               	tblrd		*+
  5757  00F130  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5758  00F134  000A               	tblrd		*-
  5759  00F136  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5760  00F13A  EC5C  F070         	call	___ftmul	;wreg free
  5761  00F13E  D7A1               	goto	L6
  5762  00F140                     l3303:
  5763                           
  5764                           ;doprnt.c: 434: return _npowers_[scl];
  5765  00F140  502A               	movf	scale@scl,w,c
  5766  00F142  0D03               	mullw	3
  5767  00F144  0E15               	movlw	low __npowers_
  5768  00F146  24F3               	addwf	prodl,w,c
  5769  00F148  6EF6               	movwf	tblptrl,c
  5770  00F14A  0EFF               	movlw	high __npowers_
  5771  00F14C  20F4               	addwfc	prodh,w,c
  5772  00F14E  6EF7               	movwf	tblptrh,c
  5773  00F150                     	if	1	;There are 3 active tblptr bytes
  5774  00F150  6AF8               	clrf	tblptru,c
  5775  00F152  0E00               	movlw	low (__mediumconst shr (0+16))
  5776  00F154  22F8               	addwfc	tblptru,f,c
  5777  00F156                     	endif
  5778  00F156  0009               	tblrd		*+
  5779  00F158  CFF5 F024          	movff	tablat,?_scale
  5780  00F15C  0009               	tblrd		*+
  5781  00F15E  CFF5 F025          	movff	tablat,?_scale+1
  5782  00F162  000A               	tblrd		*-
  5783  00F164  CFF5 F026          	movff	tablat,?_scale+2
  5784  00F168  0012               	return	
  5785  00F16A                     l3307:
  5786                           
  5787                           ;doprnt.c: 435: }
  5788                           ;doprnt.c: 436: if(scl>=110)
  5789  00F16A  502A               	movf	scale@scl,w,c
  5790  00F16C  0A80               	xorlw	128
  5791  00F16E  0F12               	addlw	-238
  5792  00F170  A0D8               	btfss	status,0,c
  5793  00F172  D09A               	goto	l3315
  5794                           
  5795                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5796  00F174  0E00               	movlw	0
  5797  00F176  6E12               	movwf	___wmul@multiplicand+1,c
  5798  00F178  0E03               	movlw	3
  5799  00F17A  6E11               	movwf	___wmul@multiplicand,c
  5800  00F17C  0E00               	movlw	0
  5801  00F17E  6E0A               	movwf	___awdiv@divisor+1,c
  5802  00F180  0E0A               	movlw	10
  5803  00F182  6E09               	movwf	___awdiv@divisor,c
  5804  00F184  0E00               	movlw	0
  5805  00F186  6E04               	movwf	___awmod@divisor+1,c
  5806  00F188  0E64               	movlw	100
  5807  00F18A  6E03               	movwf	___awmod@divisor,c
  5808  00F18C  502A               	movf	scale@scl,w,c
  5809  00F18E  6E01               	movwf	___awmod@dividend,c
  5810  00F190  6A02               	clrf	___awmod@dividend+1,c
  5811  00F192  BE01               	btfsc	___awmod@dividend,7,c
  5812  00F194  0602               	decf	___awmod@dividend+1,f,c
  5813  00F196  ECD4  F06D         	call	___awmod	;wreg free
  5814  00F19A  C001  F007         	movff	?___awmod,___awdiv@dividend
  5815  00F19E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5816  00F1A2  EC8E  F06E         	call	___awdiv	;wreg free
  5817  00F1A6  0E09               	movlw	9
  5818  00F1A8  2407               	addwf	?___awdiv,w,c
  5819  00F1AA  6E0F               	movwf	___wmul@multiplier,c
  5820  00F1AC  0E00               	movlw	0
  5821  00F1AE  2008               	addwfc	?___awdiv+1,w,c
  5822  00F1B0  6E10               	movwf	___wmul@multiplier+1,c
  5823  00F1B2  EC36  F06B         	call	___wmul	;wreg free
  5824  00F1B6  0E3C               	movlw	low __powers_
  5825  00F1B8  240F               	addwf	?___wmul,w,c
  5826  00F1BA  6EF6               	movwf	tblptrl,c
  5827  00F1BC  0EFF               	movlw	high __powers_
  5828  00F1BE  2010               	addwfc	?___wmul+1,w,c
  5829  00F1C0  6EF7               	movwf	tblptrh,c
  5830  00F1C2                     	if	1	;There are 3 active tblptr bytes
  5831  00F1C2  6AF8               	clrf	tblptru,c
  5832  00F1C4  0E00               	movlw	low (__mediumconst shr (0+16))
  5833  00F1C6  22F8               	addwfc	tblptru,f,c
  5834  00F1C8                     	endif
  5835  00F1C8  0009               	tblrd		*+
  5836  00F1CA  CFF5 F018          	movff	tablat,___ftmul@f2
  5837  00F1CE  0009               	tblrd		*+
  5838  00F1D0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5839  00F1D4  000A               	tblrd		*-
  5840  00F1D6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5841  00F1DA  0E00               	movlw	0
  5842  00F1DC  6E0A               	movwf	___awdiv@divisor+1,c
  5843  00F1DE  0E64               	movlw	100
  5844  00F1E0  6E09               	movwf	___awdiv@divisor,c
  5845  00F1E2  502A               	movf	scale@scl,w,c
  5846  00F1E4  6E07               	movwf	___awdiv@dividend,c
  5847  00F1E6  6A08               	clrf	___awdiv@dividend+1,c
  5848  00F1E8  BE07               	btfsc	___awdiv@dividend,7,c
  5849  00F1EA  0608               	decf	___awdiv@dividend+1,f,c
  5850  00F1EC  EC8E  F06E         	call	___awdiv	;wreg free
  5851  00F1F0  0E12               	movlw	18
  5852  00F1F2  2407               	addwf	?___awdiv,w,c
  5853  00F1F4  6E0F               	movwf	___wmul@multiplier,c
  5854  00F1F6  0E00               	movlw	0
  5855  00F1F8  2008               	addwfc	?___awdiv+1,w,c
  5856  00F1FA  6E10               	movwf	___wmul@multiplier+1,c
  5857  00F1FC  0E00               	movlw	0
  5858  00F1FE  6E12               	movwf	___wmul@multiplicand+1,c
  5859  00F200  0E03               	movlw	3
  5860  00F202  6E11               	movwf	___wmul@multiplicand,c
  5861  00F204  EC36  F06B         	call	___wmul	;wreg free
  5862  00F208  0E3C               	movlw	low __powers_
  5863  00F20A  240F               	addwf	?___wmul,w,c
  5864  00F20C  6EF6               	movwf	tblptrl,c
  5865  00F20E  0EFF               	movlw	high __powers_
  5866  00F210  2010               	addwfc	?___wmul+1,w,c
  5867  00F212  6EF7               	movwf	tblptrh,c
  5868  00F214                     	if	1	;There are 3 active tblptr bytes
  5869  00F214  6AF8               	clrf	tblptru,c
  5870  00F216  0E00               	movlw	low (__mediumconst shr (0+16))
  5871  00F218  22F8               	addwfc	tblptru,f,c
  5872  00F21A                     	endif
  5873  00F21A  0009               	tblrd		*+
  5874  00F21C  CFF5 F015          	movff	tablat,___ftmul@f1
  5875  00F220  0009               	tblrd		*+
  5876  00F222  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5877  00F226  000A               	tblrd		*-
  5878  00F228  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5879  00F22C  EC5C  F070         	call	___ftmul	;wreg free
  5880  00F230  C015  F027         	movff	?___ftmul,_scale$1882
  5881  00F234  C016  F028         	movff	?___ftmul+1,_scale$1882+1
  5882  00F238  C017  F029         	movff	?___ftmul+2,_scale$1882+2
  5883                           
  5884                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5885  00F23C  C027  F015         	movff	_scale$1882,___ftmul@f1
  5886  00F240  C028  F016         	movff	_scale$1882+1,___ftmul@f1+1
  5887  00F244  C029  F017         	movff	_scale$1882+2,___ftmul@f1+2
  5888  00F248  0E00               	movlw	0
  5889  00F24A  6E12               	movwf	___wmul@multiplicand+1,c
  5890  00F24C  0E03               	movlw	3
  5891  00F24E  6E11               	movwf	___wmul@multiplicand,c
  5892  00F250  0E00               	movlw	0
  5893  00F252  6E04               	movwf	___awmod@divisor+1,c
  5894  00F254  0E0A               	movlw	10
  5895  00F256  6E03               	movwf	___awmod@divisor,c
  5896  00F258  502A               	movf	scale@scl,w,c
  5897  00F25A  6E01               	movwf	___awmod@dividend,c
  5898  00F25C  6A02               	clrf	___awmod@dividend+1,c
  5899  00F25E  BE01               	btfsc	___awmod@dividend,7,c
  5900  00F260  0602               	decf	___awmod@dividend+1,f,c
  5901  00F262  ECD4  F06D         	call	___awmod	;wreg free
  5902  00F266  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5903  00F26A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5904  00F26E  EC36  F06B         	call	___wmul	;wreg free
  5905  00F272  0E3C               	movlw	low __powers_
  5906  00F274  240F               	addwf	?___wmul,w,c
  5907  00F276  6EF6               	movwf	tblptrl,c
  5908  00F278  0EFF               	movlw	high __powers_
  5909  00F27A  2010               	addwfc	?___wmul+1,w,c
  5910  00F27C  6EF7               	movwf	tblptrh,c
  5911  00F27E                     	if	1	;There are 3 active tblptr bytes
  5912  00F27E  6AF8               	clrf	tblptru,c
  5913  00F280  0E00               	movlw	low (__mediumconst shr (0+16))
  5914  00F282  22F8               	addwfc	tblptru,f,c
  5915  00F284                     	endif
  5916  00F284  0009               	tblrd		*+
  5917  00F286  CFF5 F018          	movff	tablat,___ftmul@f2
  5918  00F28A  0009               	tblrd		*+
  5919  00F28C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5920  00F290  000A               	tblrd		*-
  5921  00F292  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5922  00F296  EC5C  F070         	call	___ftmul	;wreg free
  5923  00F29A  C015  F024         	movff	?___ftmul,?_scale
  5924  00F29E  C016  F025         	movff	?___ftmul+1,?_scale+1
  5925  00F2A2  C017  F026         	movff	?___ftmul+2,?_scale+2
  5926  00F2A6  0012               	return	
  5927  00F2A8                     l3315:
  5928                           
  5929                           ;doprnt.c: 438: else if(scl > 10)
  5930  00F2A8  502A               	movf	scale@scl,w,c
  5931  00F2AA  0A80               	xorlw	128
  5932  00F2AC  0F75               	addlw	-139
  5933  00F2AE  A0D8               	btfss	status,0,c
  5934  00F2B0  D053               	goto	l3321
  5935                           
  5936                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5937  00F2B2  0E00               	movlw	0
  5938  00F2B4  6E0A               	movwf	___awdiv@divisor+1,c
  5939  00F2B6  0E0A               	movlw	10
  5940  00F2B8  6E09               	movwf	___awdiv@divisor,c
  5941  00F2BA  502A               	movf	scale@scl,w,c
  5942  00F2BC  6E07               	movwf	___awdiv@dividend,c
  5943  00F2BE  6A08               	clrf	___awdiv@dividend+1,c
  5944  00F2C0  BE07               	btfsc	___awdiv@dividend,7,c
  5945  00F2C2  0608               	decf	___awdiv@dividend+1,f,c
  5946  00F2C4  EC8E  F06E         	call	___awdiv	;wreg free
  5947  00F2C8  0E09               	movlw	9
  5948  00F2CA  2407               	addwf	?___awdiv,w,c
  5949  00F2CC  6E0F               	movwf	___wmul@multiplier,c
  5950  00F2CE  0E00               	movlw	0
  5951  00F2D0  2008               	addwfc	?___awdiv+1,w,c
  5952  00F2D2  6E10               	movwf	___wmul@multiplier+1,c
  5953  00F2D4  0E00               	movlw	0
  5954  00F2D6  6E12               	movwf	___wmul@multiplicand+1,c
  5955  00F2D8  0E03               	movlw	3
  5956  00F2DA  6E11               	movwf	___wmul@multiplicand,c
  5957  00F2DC  EC36  F06B         	call	___wmul	;wreg free
  5958  00F2E0  0E3C               	movlw	low __powers_
  5959  00F2E2  240F               	addwf	?___wmul,w,c
  5960  00F2E4  6EF6               	movwf	tblptrl,c
  5961  00F2E6  0EFF               	movlw	high __powers_
  5962  00F2E8  2010               	addwfc	?___wmul+1,w,c
  5963  00F2EA  6EF7               	movwf	tblptrh,c
  5964  00F2EC                     	if	1	;There are 3 active tblptr bytes
  5965  00F2EC  6AF8               	clrf	tblptru,c
  5966  00F2EE  0E00               	movlw	low (__mediumconst shr (0+16))
  5967  00F2F0  22F8               	addwfc	tblptru,f,c
  5968  00F2F2                     	endif
  5969  00F2F2  0009               	tblrd		*+
  5970  00F2F4  CFF5 F015          	movff	tablat,___ftmul@f1
  5971  00F2F8  0009               	tblrd		*+
  5972  00F2FA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5973  00F2FE  000A               	tblrd		*-
  5974  00F300  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5975  00F304  0E00               	movlw	0
  5976  00F306  6E12               	movwf	___wmul@multiplicand+1,c
  5977  00F308  0E03               	movlw	3
  5978  00F30A  6E11               	movwf	___wmul@multiplicand,c
  5979  00F30C  0E00               	movlw	0
  5980  00F30E  6E04               	movwf	___awmod@divisor+1,c
  5981  00F310  0E0A               	movlw	10
  5982  00F312  6E03               	movwf	___awmod@divisor,c
  5983  00F314  502A               	movf	scale@scl,w,c
  5984  00F316  6E01               	movwf	___awmod@dividend,c
  5985  00F318  6A02               	clrf	___awmod@dividend+1,c
  5986  00F31A  BE01               	btfsc	___awmod@dividend,7,c
  5987  00F31C  0602               	decf	___awmod@dividend+1,f,c
  5988  00F31E  ECD4  F06D         	call	___awmod	;wreg free
  5989  00F322  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5990  00F326  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5991  00F32A  EC36  F06B         	call	___wmul	;wreg free
  5992  00F32E  0E3C               	movlw	low __powers_
  5993  00F330  240F               	addwf	?___wmul,w,c
  5994  00F332  6EF6               	movwf	tblptrl,c
  5995  00F334  0EFF               	movlw	high __powers_
  5996  00F336  2010               	addwfc	?___wmul+1,w,c
  5997  00F338  6EF7               	movwf	tblptrh,c
  5998  00F33A                     	if	1	;There are 3 active tblptr bytes
  5999  00F33A  6AF8               	clrf	tblptru,c
  6000  00F33C  0E00               	movlw	low (__mediumconst shr (0+16))
  6001  00F33E  22F8               	addwfc	tblptru,f,c
  6002  00F340                     	endif
  6003  00F340  0009               	tblrd		*+
  6004  00F342  CFF5 F018          	movff	tablat,___ftmul@f2
  6005  00F346  0009               	tblrd		*+
  6006  00F348  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6007  00F34C  000A               	tblrd		*-
  6008  00F34E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6009  00F352  EC5C  F070         	call	___ftmul	;wreg free
  6010  00F356  D7A1               	goto	L7
  6011  00F358                     l3321:
  6012                           
  6013                           ;doprnt.c: 440: return _powers_[scl];
  6014  00F358  502A               	movf	scale@scl,w,c
  6015  00F35A  0D03               	mullw	3
  6016  00F35C  0E3C               	movlw	low __powers_
  6017  00F35E  24F3               	addwf	prodl,w,c
  6018  00F360  6EF6               	movwf	tblptrl,c
  6019  00F362  0EFF               	movlw	high __powers_
  6020  00F364  20F4               	addwfc	prodh,w,c
  6021  00F366  6EF7               	movwf	tblptrh,c
  6022  00F368                     	if	1	;There are 3 active tblptr bytes
  6023  00F368  6AF8               	clrf	tblptru,c
  6024  00F36A  0E00               	movlw	low (__mediumconst shr (0+16))
  6025  00F36C  22F8               	addwfc	tblptru,f,c
  6026  00F36E                     	endif
  6027  00F36E  0009               	tblrd		*+
  6028  00F370  CFF5 F024          	movff	tablat,?_scale
  6029  00F374  0009               	tblrd		*+
  6030  00F376  CFF5 F025          	movff	tablat,?_scale+1
  6031  00F37A  000A               	tblrd		*-
  6032  00F37C  CFF5 F026          	movff	tablat,?_scale+2
  6033  00F380  0012               	return	
  6034  00F382                     __end_of_scale:
  6035                           	opt stack 0
  6036                           tblptru	equ	0xFF8
  6037                           tblptrh	equ	0xFF7
  6038                           tblptrl	equ	0xFF6
  6039                           tablat	equ	0xFF5
  6040                           prodh	equ	0xFF4
  6041                           prodl	equ	0xFF3
  6042                           intcon	equ	0xFF2
  6043                           intcon2	equ	0xFF1
  6044                           intcon3	equ	0xFF0
  6045                           postinc0	equ	0xFEE
  6046                           wreg	equ	0xFE8
  6047                           postdec1	equ	0xFE5
  6048                           fsr1l	equ	0xFE1
  6049                           indf2	equ	0xFDF
  6050                           postinc2	equ	0xFDE
  6051                           postdec2	equ	0xFDD
  6052                           fsr2h	equ	0xFDA
  6053                           fsr2l	equ	0xFD9
  6054                           status	equ	0xFD8
  6055                           
  6056 ;; *************** function _isdigit *****************
  6057 ;; Defined at:
  6058 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  c               1    wreg     unsigned char 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  c               1    2[COMRAM] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;		None               void
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;Total ram usage:        3 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; This function calls:
  6079 ;;		Nothing
  6080 ;; This function is called by:
  6081 ;;		_sprintf
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text21
  6086  00D5A2                     __ptext21:
  6087                           	opt stack 0
  6088  00D5A2                     _isdigit:
  6089                           	opt stack 29
  6090                           
  6091                           ;incstack = 0
  6092                           ;isdigit@c stored from wreg
  6093  00D5A2  6E03               	movwf	isdigit@c,c
  6094  00D5A4  0E00               	movlw	0
  6095  00D5A6  6E02               	movwf	_isdigit$1492,c
  6096  00D5A8  0E3A               	movlw	58
  6097  00D5AA  6003               	cpfslt	isdigit@c,c
  6098  00D5AC  D005               	goto	l3333
  6099  00D5AE  0E2F               	movlw	47
  6100  00D5B0  6403               	cpfsgt	isdigit@c,c
  6101  00D5B2  D002               	goto	l3333
  6102  00D5B4  0E01               	movlw	1
  6103  00D5B6  6E02               	movwf	_isdigit$1492,c
  6104  00D5B8                     l3333:
  6105  00D5B8  C002  F001         	movff	_isdigit$1492,??_isdigit
  6106  00D5BC  3001               	rrcf	??_isdigit,w,c
  6107  00D5BE  0012               	return	
  6108  00D5C0                     __end_of_isdigit:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           intcon2	equ	0xFF1
  6118                           intcon3	equ	0xFF0
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           postdec1	equ	0xFE5
  6122                           fsr1l	equ	0xFE1
  6123                           indf2	equ	0xFDF
  6124                           postinc2	equ	0xFDE
  6125                           postdec2	equ	0xFDD
  6126                           fsr2h	equ	0xFDA
  6127                           fsr2l	equ	0xFD9
  6128                           status	equ	0xFD8
  6129                           
  6130 ;; *************** function _fround *****************
  6131 ;; Defined at:
  6132 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;  prec            1    wreg     unsigned char 
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  prec            1   44[COMRAM] unsigned char 
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  3   35[COMRAM] unsigned char 
  6139 ;; Registers used:
  6140 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6146 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;Total ram usage:       10 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    2
  6153 ;; This function calls:
  6154 ;;		___awdiv
  6155 ;;		___awmod
  6156 ;;		___ftmul
  6157 ;;		___wmul
  6158 ;; This function is called by:
  6159 ;;		_sprintf
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text22
  6164  00E984                     __ptext22:
  6165                           	opt stack 0
  6166  00E984                     _fround:
  6167                           	opt stack 27
  6168                           
  6169                           ;incstack = 0
  6170                           ;fround@prec stored from wreg
  6171  00E984  6E2D               	movwf	fround@prec,c
  6172                           
  6173                           ;doprnt.c: 413: if(prec>=110)
  6174  00E986  0E6D               	movlw	109
  6175  00E988  642D               	cpfsgt	fround@prec,c
  6176  00E98A  D0A8               	goto	l3275
  6177                           
  6178                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6179  00E98C  0E00               	movlw	0
  6180  00E98E  6E12               	movwf	___wmul@multiplicand+1,c
  6181  00E990  0E03               	movlw	3
  6182  00E992  6E11               	movwf	___wmul@multiplicand,c
  6183  00E994  0E00               	movlw	0
  6184  00E996  6E0A               	movwf	___awdiv@divisor+1,c
  6185  00E998  0E0A               	movlw	10
  6186  00E99A  6E09               	movwf	___awdiv@divisor,c
  6187  00E99C  0E00               	movlw	0
  6188  00E99E  6E04               	movwf	___awmod@divisor+1,c
  6189  00E9A0  0E64               	movlw	100
  6190  00E9A2  6E03               	movwf	___awmod@divisor,c
  6191  00E9A4  C02D  F001         	movff	fround@prec,___awmod@dividend
  6192  00E9A8  6A02               	clrf	___awmod@dividend+1,c
  6193  00E9AA  ECD4  F06D         	call	___awmod	;wreg free
  6194  00E9AE  C001  F007         	movff	?___awmod,___awdiv@dividend
  6195  00E9B2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6196  00E9B6  EC8E  F06E         	call	___awdiv	;wreg free
  6197  00E9BA  0E09               	movlw	9
  6198  00E9BC  2407               	addwf	?___awdiv,w,c
  6199  00E9BE  6E0F               	movwf	___wmul@multiplier,c
  6200  00E9C0  0E00               	movlw	0
  6201  00E9C2  2008               	addwfc	?___awdiv+1,w,c
  6202  00E9C4  6E10               	movwf	___wmul@multiplier+1,c
  6203  00E9C6  EC36  F06B         	call	___wmul	;wreg free
  6204  00E9CA  0E15               	movlw	low __npowers_
  6205  00E9CC  240F               	addwf	?___wmul,w,c
  6206  00E9CE  6EF6               	movwf	tblptrl,c
  6207  00E9D0  0EFF               	movlw	high __npowers_
  6208  00E9D2  2010               	addwfc	?___wmul+1,w,c
  6209  00E9D4  6EF7               	movwf	tblptrh,c
  6210  00E9D6                     	if	1	;There are 3 active tblptr bytes
  6211  00E9D6  6AF8               	clrf	tblptru,c
  6212  00E9D8  0E00               	movlw	low (__mediumconst shr (0+16))
  6213  00E9DA  22F8               	addwfc	tblptru,f,c
  6214  00E9DC                     	endif
  6215  00E9DC  0009               	tblrd		*+
  6216  00E9DE  CFF5 F018          	movff	tablat,___ftmul@f2
  6217  00E9E2  0009               	tblrd		*+
  6218  00E9E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6219  00E9E8  000A               	tblrd		*-
  6220  00E9EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6221  00E9EE  0E00               	movlw	0
  6222  00E9F0  6E0A               	movwf	___awdiv@divisor+1,c
  6223  00E9F2  0E64               	movlw	100
  6224  00E9F4  6E09               	movwf	___awdiv@divisor,c
  6225  00E9F6  C02D  F007         	movff	fround@prec,___awdiv@dividend
  6226  00E9FA  6A08               	clrf	___awdiv@dividend+1,c
  6227  00E9FC  EC8E  F06E         	call	___awdiv	;wreg free
  6228  00EA00  0E12               	movlw	18
  6229  00EA02  2407               	addwf	?___awdiv,w,c
  6230  00EA04  6E0F               	movwf	___wmul@multiplier,c
  6231  00EA06  0E00               	movlw	0
  6232  00EA08  2008               	addwfc	?___awdiv+1,w,c
  6233  00EA0A  6E10               	movwf	___wmul@multiplier+1,c
  6234  00EA0C  0E00               	movlw	0
  6235  00EA0E  6E12               	movwf	___wmul@multiplicand+1,c
  6236  00EA10  0E03               	movlw	3
  6237  00EA12  6E11               	movwf	___wmul@multiplicand,c
  6238  00EA14  EC36  F06B         	call	___wmul	;wreg free
  6239  00EA18  0E15               	movlw	low __npowers_
  6240  00EA1A  240F               	addwf	?___wmul,w,c
  6241  00EA1C  6EF6               	movwf	tblptrl,c
  6242  00EA1E  0EFF               	movlw	high __npowers_
  6243  00EA20  2010               	addwfc	?___wmul+1,w,c
  6244  00EA22  6EF7               	movwf	tblptrh,c
  6245  00EA24                     	if	1	;There are 3 active tblptr bytes
  6246  00EA24  6AF8               	clrf	tblptru,c
  6247  00EA26  0E00               	movlw	low (__mediumconst shr (0+16))
  6248  00EA28  22F8               	addwfc	tblptru,f,c
  6249  00EA2A                     	endif
  6250  00EA2A  0009               	tblrd		*+
  6251  00EA2C  CFF5 F015          	movff	tablat,___ftmul@f1
  6252  00EA30  0009               	tblrd		*+
  6253  00EA32  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6254  00EA36  000A               	tblrd		*-
  6255  00EA38  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6256  00EA3C  EC5C  F070         	call	___ftmul	;wreg free
  6257  00EA40  C015  F02A         	movff	?___ftmul,_fround$1880
  6258  00EA44  C016  F02B         	movff	?___ftmul+1,_fround$1880+1
  6259  00EA48  C017  F02C         	movff	?___ftmul+2,_fround$1880+2
  6260                           
  6261                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6262  00EA4C  0E00               	movlw	0
  6263  00EA4E  6E12               	movwf	___wmul@multiplicand+1,c
  6264  00EA50  0E03               	movlw	3
  6265  00EA52  6E11               	movwf	___wmul@multiplicand,c
  6266  00EA54  0E00               	movlw	0
  6267  00EA56  6E04               	movwf	___awmod@divisor+1,c
  6268  00EA58  0E0A               	movlw	10
  6269  00EA5A  6E03               	movwf	___awmod@divisor,c
  6270  00EA5C  C02D  F001         	movff	fround@prec,___awmod@dividend
  6271  00EA60  6A02               	clrf	___awmod@dividend+1,c
  6272  00EA62  ECD4  F06D         	call	___awmod	;wreg free
  6273  00EA66  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6274  00EA6A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6275  00EA6E  EC36  F06B         	call	___wmul	;wreg free
  6276  00EA72  0E15               	movlw	low __npowers_
  6277  00EA74  240F               	addwf	?___wmul,w,c
  6278  00EA76  6EF6               	movwf	tblptrl,c
  6279  00EA78  0EFF               	movlw	high __npowers_
  6280  00EA7A  2010               	addwfc	?___wmul+1,w,c
  6281  00EA7C  6EF7               	movwf	tblptrh,c
  6282  00EA7E                     	if	1	;There are 3 active tblptr bytes
  6283  00EA7E  6AF8               	clrf	tblptru,c
  6284  00EA80  0E00               	movlw	low (__mediumconst shr (0+16))
  6285  00EA82  22F8               	addwfc	tblptru,f,c
  6286  00EA84                     	endif
  6287  00EA84  0009               	tblrd		*+
  6288  00EA86  CFF5 F018          	movff	tablat,___ftmul@f2
  6289  00EA8A  0009               	tblrd		*+
  6290  00EA8C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6291  00EA90  000A               	tblrd		*-
  6292  00EA92  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6293  00EA96  C02A  F015         	movff	_fround$1880,___ftmul@f1
  6294  00EA9A  C02B  F016         	movff	_fround$1880+1,___ftmul@f1+1
  6295  00EA9E  C02C  F017         	movff	_fround$1880+2,___ftmul@f1+2
  6296  00EAA2  EC5C  F070         	call	___ftmul	;wreg free
  6297  00EAA6  C015  F027         	movff	?___ftmul,_fround$1881
  6298  00EAAA  C016  F028         	movff	?___ftmul+1,_fround$1881+1
  6299  00EAAE  C017  F029         	movff	?___ftmul+2,_fround$1881+2
  6300                           
  6301                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6302  00EAB2  C027  F015         	movff	_fround$1881,___ftmul@f1
  6303  00EAB6  C028  F016         	movff	_fround$1881+1,___ftmul@f1+1
  6304  00EABA  C029  F017         	movff	_fround$1881+2,___ftmul@f1+2
  6305  00EABE  0E00               	movlw	0
  6306  00EAC0  6E18               	movwf	___ftmul@f2,c
  6307  00EAC2  0E00               	movlw	0
  6308  00EAC4  6E19               	movwf	___ftmul@f2+1,c
  6309  00EAC6  0E3F               	movlw	63
  6310  00EAC8  6E1A               	movwf	___ftmul@f2+2,c
  6311  00EACA  EC5C  F070         	call	___ftmul	;wreg free
  6312  00EACE  C015  F024         	movff	?___ftmul,?_fround
  6313  00EAD2  C016  F025         	movff	?___ftmul+1,?_fround+1
  6314  00EAD6  C017  F026         	movff	?___ftmul+2,?_fround+2
  6315  00EADA  0012               	return	
  6316  00EADC                     l3275:
  6317                           
  6318                           ;doprnt.c: 415: else if(prec > 10)
  6319  00EADC  0E0A               	movlw	10
  6320  00EADE  642D               	cpfsgt	fround@prec,c
  6321  00EAE0  D063               	goto	l3283
  6322                           
  6323                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6324  00EAE2  0E00               	movlw	0
  6325  00EAE4  6E12               	movwf	___wmul@multiplicand+1,c
  6326  00EAE6  0E03               	movlw	3
  6327  00EAE8  6E11               	movwf	___wmul@multiplicand,c
  6328  00EAEA  0E00               	movlw	0
  6329  00EAEC  6E04               	movwf	___awmod@divisor+1,c
  6330  00EAEE  0E0A               	movlw	10
  6331  00EAF0  6E03               	movwf	___awmod@divisor,c
  6332  00EAF2  C02D  F001         	movff	fround@prec,___awmod@dividend
  6333  00EAF6  6A02               	clrf	___awmod@dividend+1,c
  6334  00EAF8  ECD4  F06D         	call	___awmod	;wreg free
  6335  00EAFC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6336  00EB00  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6337  00EB04  EC36  F06B         	call	___wmul	;wreg free
  6338  00EB08  0E15               	movlw	low __npowers_
  6339  00EB0A  240F               	addwf	?___wmul,w,c
  6340  00EB0C  6EF6               	movwf	tblptrl,c
  6341  00EB0E  0EFF               	movlw	high __npowers_
  6342  00EB10  2010               	addwfc	?___wmul+1,w,c
  6343  00EB12  6EF7               	movwf	tblptrh,c
  6344  00EB14                     	if	1	;There are 3 active tblptr bytes
  6345  00EB14  6AF8               	clrf	tblptru,c
  6346  00EB16  0E00               	movlw	low (__mediumconst shr (0+16))
  6347  00EB18  22F8               	addwfc	tblptru,f,c
  6348  00EB1A                     	endif
  6349  00EB1A  0009               	tblrd		*+
  6350  00EB1C  CFF5 F018          	movff	tablat,___ftmul@f2
  6351  00EB20  0009               	tblrd		*+
  6352  00EB22  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6353  00EB26  000A               	tblrd		*-
  6354  00EB28  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6355  00EB2C  0E00               	movlw	0
  6356  00EB2E  6E0A               	movwf	___awdiv@divisor+1,c
  6357  00EB30  0E0A               	movlw	10
  6358  00EB32  6E09               	movwf	___awdiv@divisor,c
  6359  00EB34  C02D  F007         	movff	fround@prec,___awdiv@dividend
  6360  00EB38  6A08               	clrf	___awdiv@dividend+1,c
  6361  00EB3A  EC8E  F06E         	call	___awdiv	;wreg free
  6362  00EB3E  0E09               	movlw	9
  6363  00EB40  2407               	addwf	?___awdiv,w,c
  6364  00EB42  6E0F               	movwf	___wmul@multiplier,c
  6365  00EB44  0E00               	movlw	0
  6366  00EB46  2008               	addwfc	?___awdiv+1,w,c
  6367  00EB48  6E10               	movwf	___wmul@multiplier+1,c
  6368  00EB4A  0E00               	movlw	0
  6369  00EB4C  6E12               	movwf	___wmul@multiplicand+1,c
  6370  00EB4E  0E03               	movlw	3
  6371  00EB50  6E11               	movwf	___wmul@multiplicand,c
  6372  00EB52  EC36  F06B         	call	___wmul	;wreg free
  6373  00EB56  0E15               	movlw	low __npowers_
  6374  00EB58  240F               	addwf	?___wmul,w,c
  6375  00EB5A  6EF6               	movwf	tblptrl,c
  6376  00EB5C  0EFF               	movlw	high __npowers_
  6377  00EB5E  2010               	addwfc	?___wmul+1,w,c
  6378  00EB60  6EF7               	movwf	tblptrh,c
  6379  00EB62                     	if	1	;There are 3 active tblptr bytes
  6380  00EB62  6AF8               	clrf	tblptru,c
  6381  00EB64  0E00               	movlw	low (__mediumconst shr (0+16))
  6382  00EB66  22F8               	addwfc	tblptru,f,c
  6383  00EB68                     	endif
  6384  00EB68  0009               	tblrd		*+
  6385  00EB6A  CFF5 F015          	movff	tablat,___ftmul@f1
  6386  00EB6E  0009               	tblrd		*+
  6387  00EB70  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6388  00EB74  000A               	tblrd		*-
  6389  00EB76  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6390  00EB7A  EC5C  F070         	call	___ftmul	;wreg free
  6391  00EB7E  C015  F02A         	movff	?___ftmul,_fround$1880
  6392  00EB82  C016  F02B         	movff	?___ftmul+1,_fround$1880+1
  6393  00EB86  C017  F02C         	movff	?___ftmul+2,_fround$1880+2
  6394                           
  6395                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6396  00EB8A  C02A  F015         	movff	_fround$1880,___ftmul@f1
  6397  00EB8E  C02B  F016         	movff	_fround$1880+1,___ftmul@f1+1
  6398  00EB92  C02C  F017         	movff	_fround$1880+2,___ftmul@f1+2
  6399  00EB96  0E00               	movlw	0
  6400  00EB98  6E18               	movwf	___ftmul@f2,c
  6401  00EB9A  0E00               	movlw	0
  6402  00EB9C  6E19               	movwf	___ftmul@f2+1,c
  6403  00EB9E  0E3F               	movlw	63
  6404  00EBA0  6E1A               	movwf	___ftmul@f2+2,c
  6405  00EBA2  EC5C  F070         	call	___ftmul	;wreg free
  6406  00EBA6  D793               	goto	L8
  6407  00EBA8                     l3283:
  6408                           
  6409                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6410  00EBA8  502D               	movf	fround@prec,w,c
  6411  00EBAA  0D03               	mullw	3
  6412  00EBAC  0E15               	movlw	low __npowers_
  6413  00EBAE  24F3               	addwf	prodl,w,c
  6414  00EBB0  6EF6               	movwf	tblptrl,c
  6415  00EBB2  0EFF               	movlw	high __npowers_
  6416  00EBB4  20F4               	addwfc	prodh,w,c
  6417  00EBB6  6EF7               	movwf	tblptrh,c
  6418  00EBB8                     	if	1	;There are 3 active tblptr bytes
  6419  00EBB8  6AF8               	clrf	tblptru,c
  6420  00EBBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6421  00EBBC  22F8               	addwfc	tblptru,f,c
  6422  00EBBE                     	endif
  6423  00EBBE  0009               	tblrd		*+
  6424  00EBC0  CFF5 F015          	movff	tablat,___ftmul@f1
  6425  00EBC4  0009               	tblrd		*+
  6426  00EBC6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6427  00EBCA  000A               	tblrd		*-
  6428  00EBCC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6429  00EBD0  0E00               	movlw	0
  6430  00EBD2  6E18               	movwf	___ftmul@f2,c
  6431  00EBD4  0E00               	movlw	0
  6432  00EBD6  6E19               	movwf	___ftmul@f2+1,c
  6433  00EBD8  0E3F               	movlw	63
  6434  00EBDA  6E1A               	movwf	___ftmul@f2+2,c
  6435  00EBDC  EC5C  F070         	call	___ftmul	;wreg free
  6436  00EBE0  C015  F024         	movff	?___ftmul,?_fround
  6437  00EBE4  C016  F025         	movff	?___ftmul+1,?_fround+1
  6438  00EBE8  C017  F026         	movff	?___ftmul+2,?_fround+2
  6439  00EBEC  0012               	return	
  6440  00EBEE                     __end_of_fround:
  6441                           	opt stack 0
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           intcon	equ	0xFF2
  6449                           intcon2	equ	0xFF1
  6450                           intcon3	equ	0xFF0
  6451                           postinc0	equ	0xFEE
  6452                           wreg	equ	0xFE8
  6453                           postdec1	equ	0xFE5
  6454                           fsr1l	equ	0xFE1
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function ___wmul *****************
  6463 ;; Defined at:
  6464 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;  multiplier      2   14[COMRAM] unsigned int 
  6467 ;;  multiplicand    2   16[COMRAM] unsigned int 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  product         2   18[COMRAM] unsigned int 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  2   14[COMRAM] unsigned int 
  6472 ;; Registers used:
  6473 ;;		wreg, status,2, status,0, prodl, prodh
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;Total ram usage:        6 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_read_adc_voltage
  6489 ;;		_fround
  6490 ;;		_scale
  6491 ;;		_sprintf
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text23
  6496  00D66C                     __ptext23:
  6497                           	opt stack 0
  6498  00D66C                     ___wmul:
  6499                           	opt stack 28
  6500                           
  6501                           ;incstack = 0
  6502  00D66C  500F               	movf	___wmul@multiplier,w,c
  6503  00D66E  0211               	mulwf	___wmul@multiplicand,c
  6504  00D670  CFF3 F013          	movff	prodl,___wmul@product
  6505  00D674  CFF4 F014          	movff	prodh,___wmul@product+1
  6506  00D678  500F               	movf	___wmul@multiplier,w,c
  6507  00D67A  0212               	mulwf	___wmul@multiplicand+1,c
  6508  00D67C  50F3               	movf	prodl,w,c
  6509  00D67E  2614               	addwf	___wmul@product+1,f,c
  6510  00D680  5010               	movf	___wmul@multiplier+1,w,c
  6511  00D682  0211               	mulwf	___wmul@multiplicand,c
  6512  00D684  50F3               	movf	prodl,w,c
  6513  00D686  2614               	addwf	___wmul@product+1,f,c
  6514  00D688  C013  F00F         	movff	___wmul@product,?___wmul
  6515  00D68C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  6516  00D690  0012               	return	
  6517  00D692                     __end_of___wmul:
  6518                           	opt stack 0
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodh	equ	0xFF4
  6524                           prodl	equ	0xFF3
  6525                           intcon	equ	0xFF2
  6526                           intcon2	equ	0xFF1
  6527                           intcon3	equ	0xFF0
  6528                           postinc0	equ	0xFEE
  6529                           wreg	equ	0xFE8
  6530                           postdec1	equ	0xFE5
  6531                           fsr1l	equ	0xFE1
  6532                           indf2	equ	0xFDF
  6533                           postinc2	equ	0xFDE
  6534                           postdec2	equ	0xFDD
  6535                           fsr2h	equ	0xFDA
  6536                           fsr2l	equ	0xFD9
  6537                           status	equ	0xFD8
  6538                           
  6539 ;; *************** function ___ftmul *****************
  6540 ;; Defined at:
  6541 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  f1              3   20[COMRAM] float 
  6544 ;;  f2              3   23[COMRAM] float 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  6547 ;;  sign            1   34[COMRAM] unsigned char 
  6548 ;;  cntr            1   33[COMRAM] unsigned char 
  6549 ;;  exp             1   29[COMRAM] unsigned char 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  3   20[COMRAM] float 
  6552 ;; Registers used:
  6553 ;;		wreg, status,2, status,0, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6559 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6562 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6563 ;;Total ram usage:       15 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    1
  6566 ;; This function calls:
  6567 ;;		___ftpack
  6568 ;; This function is called by:
  6569 ;;		_main
  6570 ;;		_fround
  6571 ;;		_scale
  6572 ;;		_sprintf
  6573 ;;		_set_pwm1_percent
  6574 ;;		_set_pwm1_voltage
  6575 ;;		_set_pwm1_general
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           	psect	text24
  6580  00E0B8                     __ptext24:
  6581                           	opt stack 0
  6582  00E0B8                     ___ftmul:
  6583                           	opt stack 27
  6584                           
  6585                           ;incstack = 0
  6586  00E0B8  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  6587  00E0BC  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  6588  00E0BE  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  6589  00E0C0  3416               	rlcf	___ftmul@f1+1,w,c
  6590  00E0C2  361B               	rlcf	??___ftmul& (0+255),f,c
  6591  00E0C4  E301               	bnc	u2981
  6592  00E0C6  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  6593  00E0C8                     u2981:
  6594  00E0C8  501B               	movf	??___ftmul,w,c
  6595  00E0CA  6E1E               	movwf	___ftmul@exp,c
  6596  00E0CC  501E               	movf	___ftmul@exp,w,c
  6597  00E0CE  A4D8               	btfss	status,2,c
  6598  00E0D0  D007               	goto	l3125
  6599  00E0D2  0E00               	movlw	0
  6600  00E0D4  6E15               	movwf	?___ftmul,c
  6601  00E0D6  0E00               	movlw	0
  6602  00E0D8  6E16               	movwf	?___ftmul+1,c
  6603  00E0DA  0E00               	movlw	0
  6604  00E0DC  6E17               	movwf	?___ftmul+2,c
  6605  00E0DE  0012               	return	
  6606  00E0E0                     l3125:
  6607  00E0E0  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  6608  00E0E4  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  6609  00E0E6  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  6610  00E0E8  3419               	rlcf	___ftmul@f2+1,w,c
  6611  00E0EA  361B               	rlcf	??___ftmul& (0+255),f,c
  6612  00E0EC  E301               	bnc	u3001
  6613  00E0EE  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  6614  00E0F0                     u3001:
  6615  00E0F0  501B               	movf	??___ftmul,w,c
  6616  00E0F2  6E23               	movwf	___ftmul@sign,c
  6617  00E0F4  5023               	movf	___ftmul@sign,w,c
  6618  00E0F6  A4D8               	btfss	status,2,c
  6619  00E0F8  D007               	goto	l3131
  6620  00E0FA  0E00               	movlw	0
  6621  00E0FC  6E15               	movwf	?___ftmul,c
  6622  00E0FE  0E00               	movlw	0
  6623  00E100  6E16               	movwf	?___ftmul+1,c
  6624  00E102  0E00               	movlw	0
  6625  00E104  6E17               	movwf	?___ftmul+2,c
  6626  00E106  0012               	return	
  6627  00E108                     l3131:
  6628  00E108  5023               	movf	___ftmul@sign,w,c
  6629  00E10A  0F7B               	addlw	123
  6630  00E10C  261E               	addwf	___ftmul@exp,f,c
  6631  00E10E  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  6632  00E112  501A               	movf	___ftmul@f2+2,w,c
  6633  00E114  1A23               	xorwf	___ftmul@sign,f,c
  6634  00E116  0E80               	movlw	128
  6635  00E118  1623               	andwf	___ftmul@sign,f,c
  6636  00E11A  8E16               	bsf	___ftmul@f1+1,7,c
  6637  00E11C  8E19               	bsf	___ftmul@f2+1,7,c
  6638  00E11E  0EFF               	movlw	255
  6639  00E120  1618               	andwf	___ftmul@f2,f,c
  6640  00E122  0EFF               	movlw	255
  6641  00E124  1619               	andwf	___ftmul@f2+1,f,c
  6642  00E126  0E00               	movlw	0
  6643  00E128  161A               	andwf	___ftmul@f2+2,f,c
  6644  00E12A  0E00               	movlw	0
  6645  00E12C  6E1F               	movwf	___ftmul@f3_as_product,c
  6646  00E12E  0E00               	movlw	0
  6647  00E130  6E20               	movwf	___ftmul@f3_as_product+1,c
  6648  00E132  0E00               	movlw	0
  6649  00E134  6E21               	movwf	___ftmul@f3_as_product+2,c
  6650  00E136  0E07               	movlw	7
  6651  00E138  6E22               	movwf	___ftmul@cntr,c
  6652  00E13A                     l3145:
  6653  00E13A  A015               	btfss	___ftmul@f1,0,c
  6654  00E13C  D006               	goto	l3149
  6655  00E13E  5018               	movf	___ftmul@f2,w,c
  6656  00E140  261F               	addwf	___ftmul@f3_as_product,f,c
  6657  00E142  5019               	movf	___ftmul@f2+1,w,c
  6658  00E144  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  6659  00E146  501A               	movf	___ftmul@f2+2,w,c
  6660  00E148  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  6661  00E14A                     l3149:
  6662  00E14A  90D8               	bcf	status,0,c
  6663  00E14C  3217               	rrcf	___ftmul@f1+2,f,c
  6664  00E14E  3216               	rrcf	___ftmul@f1+1,f,c
  6665  00E150  3215               	rrcf	___ftmul@f1,f,c
  6666  00E152  90D8               	bcf	status,0,c
  6667  00E154  3618               	rlcf	___ftmul@f2,f,c
  6668  00E156  3619               	rlcf	___ftmul@f2+1,f,c
  6669  00E158  361A               	rlcf	___ftmul@f2+2,f,c
  6670  00E15A  2E22               	decfsz	___ftmul@cntr,f,c
  6671  00E15C  D7EE               	goto	l3145
  6672  00E15E  0E09               	movlw	9
  6673  00E160  6E22               	movwf	___ftmul@cntr,c
  6674  00E162                     l3155:
  6675  00E162  A015               	btfss	___ftmul@f1,0,c
  6676  00E164  D006               	goto	l3159
  6677  00E166  5018               	movf	___ftmul@f2,w,c
  6678  00E168  261F               	addwf	___ftmul@f3_as_product,f,c
  6679  00E16A  5019               	movf	___ftmul@f2+1,w,c
  6680  00E16C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  6681  00E16E  501A               	movf	___ftmul@f2+2,w,c
  6682  00E170  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  6683  00E172                     l3159:
  6684  00E172  90D8               	bcf	status,0,c
  6685  00E174  3217               	rrcf	___ftmul@f1+2,f,c
  6686  00E176  3216               	rrcf	___ftmul@f1+1,f,c
  6687  00E178  3215               	rrcf	___ftmul@f1,f,c
  6688  00E17A  90D8               	bcf	status,0,c
  6689  00E17C  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  6690  00E17E  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  6691  00E180  321F               	rrcf	___ftmul@f3_as_product,f,c
  6692  00E182  2E22               	decfsz	___ftmul@cntr,f,c
  6693  00E184  D7EE               	goto	l3155
  6694  00E186  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6695  00E18A  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6696  00E18E  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6697  00E192  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  6698  00E196  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  6699  00E19A  EC18  F06F         	call	___ftpack	;wreg free
  6700  00E19E  C001  F015         	movff	?___ftpack,?___ftmul
  6701  00E1A2  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  6702  00E1A6  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  6703  00E1AA  0012               	return	
  6704  00E1AC                     __end_of___ftmul:
  6705                           	opt stack 0
  6706                           tblptru	equ	0xFF8
  6707                           tblptrh	equ	0xFF7
  6708                           tblptrl	equ	0xFF6
  6709                           tablat	equ	0xFF5
  6710                           prodh	equ	0xFF4
  6711                           prodl	equ	0xFF3
  6712                           intcon	equ	0xFF2
  6713                           intcon2	equ	0xFF1
  6714                           intcon3	equ	0xFF0
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           postdec1	equ	0xFE5
  6718                           fsr1l	equ	0xFE1
  6719                           indf2	equ	0xFDF
  6720                           postinc2	equ	0xFDE
  6721                           postdec2	equ	0xFDD
  6722                           fsr2h	equ	0xFDA
  6723                           fsr2l	equ	0xFD9
  6724                           status	equ	0xFD8
  6725                           
  6726 ;; *************** function ___awmod *****************
  6727 ;; Defined at:
  6728 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;  dividend        2    0[COMRAM] int 
  6731 ;;  divisor         2    2[COMRAM] int 
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;  sign            1    5[COMRAM] unsigned char 
  6734 ;;  counter         1    4[COMRAM] unsigned char 
  6735 ;; Return value:  Size  Location     Type
  6736 ;;                  2    0[COMRAM] int 
  6737 ;; Registers used:
  6738 ;;		wreg, status,2, status,0
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6744 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6747 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;Total ram usage:        6 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; This function calls:
  6751 ;;		Nothing
  6752 ;; This function is called by:
  6753 ;;		_fround
  6754 ;;		_scale
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text25
  6759  00DBA8                     __ptext25:
  6760                           	opt stack 0
  6761  00DBA8                     ___awmod:
  6762                           	opt stack 28
  6763                           
  6764                           ;incstack = 0
  6765  00DBA8  0E00               	movlw	0
  6766  00DBAA  6E06               	movwf	___awmod@sign,c
  6767  00DBAC  AE02               	btfss	___awmod@dividend+1,7,c
  6768  00DBAE  D006               	goto	l3219
  6769  00DBB0  6C01               	negf	___awmod@dividend,c
  6770  00DBB2  1E02               	comf	___awmod@dividend+1,f,c
  6771  00DBB4  B0D8               	btfsc	status,0,c
  6772  00DBB6  2A02               	incf	___awmod@dividend+1,f,c
  6773  00DBB8  0E01               	movlw	1
  6774  00DBBA  6E06               	movwf	___awmod@sign,c
  6775  00DBBC                     l3219:
  6776  00DBBC  AE04               	btfss	___awmod@divisor+1,7,c
  6777  00DBBE  D004               	goto	l3223
  6778  00DBC0  6C03               	negf	___awmod@divisor,c
  6779  00DBC2  1E04               	comf	___awmod@divisor+1,f,c
  6780  00DBC4  B0D8               	btfsc	status,0,c
  6781  00DBC6  2A04               	incf	___awmod@divisor+1,f,c
  6782  00DBC8                     l3223:
  6783  00DBC8  5003               	movf	___awmod@divisor,w,c
  6784  00DBCA  1004               	iorwf	___awmod@divisor+1,w,c
  6785  00DBCC  B4D8               	btfsc	status,2,c
  6786  00DBCE  D018               	goto	l3239
  6787  00DBD0  0E01               	movlw	1
  6788  00DBD2  6E05               	movwf	___awmod@counter,c
  6789  00DBD4  D004               	goto	l3229
  6790  00DBD6                     l3227:
  6791  00DBD6  90D8               	bcf	status,0,c
  6792  00DBD8  3603               	rlcf	___awmod@divisor,f,c
  6793  00DBDA  3604               	rlcf	___awmod@divisor+1,f,c
  6794  00DBDC  2A05               	incf	___awmod@counter,f,c
  6795  00DBDE                     l3229:
  6796  00DBDE  AE04               	btfss	___awmod@divisor+1,7,c
  6797  00DBE0  D7FA               	goto	l3227
  6798  00DBE2                     l3231:
  6799  00DBE2  5003               	movf	___awmod@divisor,w,c
  6800  00DBE4  5C01               	subwf	___awmod@dividend,w,c
  6801  00DBE6  5004               	movf	___awmod@divisor+1,w,c
  6802  00DBE8  5802               	subwfb	___awmod@dividend+1,w,c
  6803  00DBEA  A0D8               	btfss	status,0,c
  6804  00DBEC  D004               	goto	l3235
  6805  00DBEE  5003               	movf	___awmod@divisor,w,c
  6806  00DBF0  5E01               	subwf	___awmod@dividend,f,c
  6807  00DBF2  5004               	movf	___awmod@divisor+1,w,c
  6808  00DBF4  5A02               	subwfb	___awmod@dividend+1,f,c
  6809  00DBF6                     l3235:
  6810  00DBF6  90D8               	bcf	status,0,c
  6811  00DBF8  3204               	rrcf	___awmod@divisor+1,f,c
  6812  00DBFA  3203               	rrcf	___awmod@divisor,f,c
  6813  00DBFC  2E05               	decfsz	___awmod@counter,f,c
  6814  00DBFE  D7F1               	goto	l3231
  6815  00DC00                     l3239:
  6816  00DC00  5006               	movf	___awmod@sign,w,c
  6817  00DC02  B4D8               	btfsc	status,2,c
  6818  00DC04  D004               	goto	l3243
  6819  00DC06  6C01               	negf	___awmod@dividend,c
  6820  00DC08  1E02               	comf	___awmod@dividend+1,f,c
  6821  00DC0A  B0D8               	btfsc	status,0,c
  6822  00DC0C  2A02               	incf	___awmod@dividend+1,f,c
  6823  00DC0E                     l3243:
  6824  00DC0E  C001  F001         	movff	___awmod@dividend,?___awmod
  6825  00DC12  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  6826  00DC16  0012               	return	
  6827  00DC18                     __end_of___awmod:
  6828                           	opt stack 0
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           prodh	equ	0xFF4
  6834                           prodl	equ	0xFF3
  6835                           intcon	equ	0xFF2
  6836                           intcon2	equ	0xFF1
  6837                           intcon3	equ	0xFF0
  6838                           postinc0	equ	0xFEE
  6839                           wreg	equ	0xFE8
  6840                           postdec1	equ	0xFE5
  6841                           fsr1l	equ	0xFE1
  6842                           indf2	equ	0xFDF
  6843                           postinc2	equ	0xFDE
  6844                           postdec2	equ	0xFDD
  6845                           fsr2h	equ	0xFDA
  6846                           fsr2l	equ	0xFD9
  6847                           status	equ	0xFD8
  6848                           
  6849 ;; *************** function ___awdiv *****************
  6850 ;; Defined at:
  6851 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;  dividend        2    6[COMRAM] int 
  6854 ;;  divisor         2    8[COMRAM] int 
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;  quotient        2   12[COMRAM] int 
  6857 ;;  sign            1   11[COMRAM] unsigned char 
  6858 ;;  counter         1   10[COMRAM] unsigned char 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;                  2    6[COMRAM] int 
  6861 ;; Registers used:
  6862 ;;		wreg, status,2, status,0
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6868 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;Total ram usage:        8 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_fround
  6878 ;;		_scale
  6879 ;;		_sprintf
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text26
  6884  00DD1C                     __ptext26:
  6885                           	opt stack 0
  6886  00DD1C                     ___awdiv:
  6887                           	opt stack 28
  6888                           
  6889                           ;incstack = 0
  6890  00DD1C  0E00               	movlw	0
  6891  00DD1E  6E0C               	movwf	___awdiv@sign,c
  6892  00DD20  AE0A               	btfss	___awdiv@divisor+1,7,c
  6893  00DD22  D006               	goto	l3175
  6894  00DD24  6C09               	negf	___awdiv@divisor,c
  6895  00DD26  1E0A               	comf	___awdiv@divisor+1,f,c
  6896  00DD28  B0D8               	btfsc	status,0,c
  6897  00DD2A  2A0A               	incf	___awdiv@divisor+1,f,c
  6898  00DD2C  0E01               	movlw	1
  6899  00DD2E  6E0C               	movwf	___awdiv@sign,c
  6900  00DD30                     l3175:
  6901  00DD30  AE08               	btfss	___awdiv@dividend+1,7,c
  6902  00DD32  D006               	goto	l3181
  6903  00DD34  6C07               	negf	___awdiv@dividend,c
  6904  00DD36  1E08               	comf	___awdiv@dividend+1,f,c
  6905  00DD38  B0D8               	btfsc	status,0,c
  6906  00DD3A  2A08               	incf	___awdiv@dividend+1,f,c
  6907  00DD3C  0E01               	movlw	1
  6908  00DD3E  1A0C               	xorwf	___awdiv@sign,f,c
  6909  00DD40                     l3181:
  6910  00DD40  0E00               	movlw	0
  6911  00DD42  6E0E               	movwf	___awdiv@quotient+1,c
  6912  00DD44  0E00               	movlw	0
  6913  00DD46  6E0D               	movwf	___awdiv@quotient,c
  6914  00DD48  5009               	movf	___awdiv@divisor,w,c
  6915  00DD4A  100A               	iorwf	___awdiv@divisor+1,w,c
  6916  00DD4C  B4D8               	btfsc	status,2,c
  6917  00DD4E  D01C               	goto	l3203
  6918  00DD50  0E01               	movlw	1
  6919  00DD52  6E0B               	movwf	___awdiv@counter,c
  6920  00DD54  D004               	goto	l3189
  6921  00DD56                     l3187:
  6922  00DD56  90D8               	bcf	status,0,c
  6923  00DD58  3609               	rlcf	___awdiv@divisor,f,c
  6924  00DD5A  360A               	rlcf	___awdiv@divisor+1,f,c
  6925  00DD5C  2A0B               	incf	___awdiv@counter,f,c
  6926  00DD5E                     l3189:
  6927  00DD5E  AE0A               	btfss	___awdiv@divisor+1,7,c
  6928  00DD60  D7FA               	goto	l3187
  6929  00DD62                     l3191:
  6930  00DD62  90D8               	bcf	status,0,c
  6931  00DD64  360D               	rlcf	___awdiv@quotient,f,c
  6932  00DD66  360E               	rlcf	___awdiv@quotient+1,f,c
  6933  00DD68  5009               	movf	___awdiv@divisor,w,c
  6934  00DD6A  5C07               	subwf	___awdiv@dividend,w,c
  6935  00DD6C  500A               	movf	___awdiv@divisor+1,w,c
  6936  00DD6E  5808               	subwfb	___awdiv@dividend+1,w,c
  6937  00DD70  A0D8               	btfss	status,0,c
  6938  00DD72  D005               	goto	l3199
  6939  00DD74  5009               	movf	___awdiv@divisor,w,c
  6940  00DD76  5E07               	subwf	___awdiv@dividend,f,c
  6941  00DD78  500A               	movf	___awdiv@divisor+1,w,c
  6942  00DD7A  5A08               	subwfb	___awdiv@dividend+1,f,c
  6943  00DD7C  800D               	bsf	___awdiv@quotient,0,c
  6944  00DD7E                     l3199:
  6945  00DD7E  90D8               	bcf	status,0,c
  6946  00DD80  320A               	rrcf	___awdiv@divisor+1,f,c
  6947  00DD82  3209               	rrcf	___awdiv@divisor,f,c
  6948  00DD84  2E0B               	decfsz	___awdiv@counter,f,c
  6949  00DD86  D7ED               	goto	l3191
  6950  00DD88                     l3203:
  6951  00DD88  500C               	movf	___awdiv@sign,w,c
  6952  00DD8A  B4D8               	btfsc	status,2,c
  6953  00DD8C  D004               	goto	l3207
  6954  00DD8E  6C0D               	negf	___awdiv@quotient,c
  6955  00DD90  1E0E               	comf	___awdiv@quotient+1,f,c
  6956  00DD92  B0D8               	btfsc	status,0,c
  6957  00DD94  2A0E               	incf	___awdiv@quotient+1,f,c
  6958  00DD96                     l3207:
  6959  00DD96  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  6960  00DD9A  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  6961  00DD9E  0012               	return	
  6962  00DDA0                     __end_of___awdiv:
  6963                           	opt stack 0
  6964                           tblptru	equ	0xFF8
  6965                           tblptrh	equ	0xFF7
  6966                           tblptrl	equ	0xFF6
  6967                           tablat	equ	0xFF5
  6968                           prodh	equ	0xFF4
  6969                           prodl	equ	0xFF3
  6970                           intcon	equ	0xFF2
  6971                           intcon2	equ	0xFF1
  6972                           intcon3	equ	0xFF0
  6973                           postinc0	equ	0xFEE
  6974                           wreg	equ	0xFE8
  6975                           postdec1	equ	0xFE5
  6976                           fsr1l	equ	0xFE1
  6977                           indf2	equ	0xFDF
  6978                           postinc2	equ	0xFDE
  6979                           postdec2	equ	0xFDD
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function __tdiv_to_l_ *****************
  6985 ;; Defined at:
  6986 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  f1              3    0[COMRAM] float 
  6989 ;;  f2              3    3[COMRAM] float 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  quot            4    9[COMRAM] unsigned long 
  6992 ;;  exp1            1   14[COMRAM] unsigned char 
  6993 ;;  cntr            1   13[COMRAM] unsigned char 
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  4    0[COMRAM] unsigned long 
  6996 ;; Registers used:
  6997 ;;		wreg, status,2, status,0
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7003 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;Total ram usage:       15 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; This function calls:
  7010 ;;		Nothing
  7011 ;; This function is called by:
  7012 ;;		_sprintf
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text27
  7017  00E3E2                     __ptext27:
  7018                           	opt stack 0
  7019  00E3E2                     __tdiv_to_l_:
  7020                           	opt stack 29
  7021                           
  7022                           ;incstack = 0
  7023  00E3E2  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7024  00E3E6  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7025  00E3E8  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7026  00E3EA  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  7027  00E3EC  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7028  00E3EE  E301               	bnc	u3251
  7029  00E3F0  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7030  00E3F2                     u3251:
  7031  00E3F2  5007               	movf	??__tdiv_to_l_,w,c
  7032  00E3F4  6E0F               	movwf	__tdiv_to_l_@exp1,c
  7033  00E3F6  500F               	movf	__tdiv_to_l_@exp1,w,c
  7034  00E3F8  A4D8               	btfss	status,2,c
  7035  00E3FA  D009               	goto	l3343
  7036  00E3FC  0E00               	movlw	0
  7037  00E3FE  6E01               	movwf	?__tdiv_to_l_,c
  7038  00E400  0E00               	movlw	0
  7039  00E402  6E02               	movwf	?__tdiv_to_l_+1,c
  7040  00E404  0E00               	movlw	0
  7041  00E406  6E03               	movwf	?__tdiv_to_l_+2,c
  7042  00E408  0E00               	movlw	0
  7043  00E40A  6E04               	movwf	?__tdiv_to_l_+3,c
  7044  00E40C  0012               	return	
  7045  00E40E                     l3343:
  7046  00E40E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7047  00E412  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7048  00E414  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7049  00E416  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  7050  00E418  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7051  00E41A  E301               	bnc	u3271
  7052  00E41C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7053  00E41E                     u3271:
  7054  00E41E  5007               	movf	??__tdiv_to_l_,w,c
  7055  00E420  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7056  00E422  500E               	movf	__tdiv_to_l_@cntr,w,c
  7057  00E424  A4D8               	btfss	status,2,c
  7058  00E426  D009               	goto	l3349
  7059  00E428  0E00               	movlw	0
  7060  00E42A  6E01               	movwf	?__tdiv_to_l_,c
  7061  00E42C  0E00               	movlw	0
  7062  00E42E  6E02               	movwf	?__tdiv_to_l_+1,c
  7063  00E430  0E00               	movlw	0
  7064  00E432  6E03               	movwf	?__tdiv_to_l_+2,c
  7065  00E434  0E00               	movlw	0
  7066  00E436  6E04               	movwf	?__tdiv_to_l_+3,c
  7067  00E438  0012               	return	
  7068  00E43A                     l3349:
  7069  00E43A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  7070  00E43C  0EFF               	movlw	255
  7071  00E43E  1601               	andwf	__tdiv_to_l_@f1,f,c
  7072  00E440  0EFF               	movlw	255
  7073  00E442  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  7074  00E444  0E00               	movlw	0
  7075  00E446  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  7076  00E448  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  7077  00E44A  0EFF               	movlw	255
  7078  00E44C  1604               	andwf	__tdiv_to_l_@f2,f,c
  7079  00E44E  0EFF               	movlw	255
  7080  00E450  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  7081  00E452  0E00               	movlw	0
  7082  00E454  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  7083  00E456  0E00               	movlw	0
  7084  00E458  6E0A               	movwf	__tdiv_to_l_@quot,c
  7085  00E45A  0E00               	movlw	0
  7086  00E45C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  7087  00E45E  0E00               	movlw	0
  7088  00E460  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  7089  00E462  0E00               	movlw	0
  7090  00E464  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  7091  00E466  0E7F               	movlw	127
  7092  00E468  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7093  00E46A  500E               	movf	__tdiv_to_l_@cntr,w,c
  7094  00E46C  0F98               	addlw	152
  7095  00E46E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7096  00E470  0E18               	movlw	24
  7097  00E472  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7098  00E474                     l865:
  7099  00E474  90D8               	bcf	status,0,c
  7100  00E476  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7101  00E478  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7102  00E47A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7103  00E47C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7104  00E47E  5004               	movf	__tdiv_to_l_@f2,w,c
  7105  00E480  5C01               	subwf	__tdiv_to_l_@f1,w,c
  7106  00E482  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7107  00E484  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  7108  00E486  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7109  00E488  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  7110  00E48A  A0D8               	btfss	status,0,c
  7111  00E48C  D007               	goto	l866
  7112  00E48E  5004               	movf	__tdiv_to_l_@f2,w,c
  7113  00E490  5E01               	subwf	__tdiv_to_l_@f1,f,c
  7114  00E492  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7115  00E494  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  7116  00E496  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7117  00E498  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  7118  00E49A  800A               	bsf	__tdiv_to_l_@quot,0,c
  7119  00E49C                     l866:
  7120  00E49C  90D8               	bcf	status,0,c
  7121  00E49E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  7122  00E4A0  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  7123  00E4A2  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  7124  00E4A4  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  7125  00E4A6  D7E6               	goto	l865
  7126  00E4A8  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  7127  00E4AA  D016               	goto	l3383
  7128  00E4AC  500F               	movf	__tdiv_to_l_@exp1,w,c
  7129  00E4AE  0A80               	xorlw	128
  7130  00E4B0  0F97               	addlw	151
  7131  00E4B2  B0D8               	btfsc	status,0,c
  7132  00E4B4  D009               	goto	l3379
  7133  00E4B6  0E00               	movlw	0
  7134  00E4B8  6E01               	movwf	?__tdiv_to_l_,c
  7135  00E4BA  0E00               	movlw	0
  7136  00E4BC  6E02               	movwf	?__tdiv_to_l_+1,c
  7137  00E4BE  0E00               	movlw	0
  7138  00E4C0  6E03               	movwf	?__tdiv_to_l_+2,c
  7139  00E4C2  0E00               	movlw	0
  7140  00E4C4  6E04               	movwf	?__tdiv_to_l_+3,c
  7141  00E4C6  0012               	return	
  7142  00E4C8                     l3379:
  7143  00E4C8  90D8               	bcf	status,0,c
  7144  00E4CA  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  7145  00E4CC  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  7146  00E4CE  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  7147  00E4D0  320A               	rrcf	__tdiv_to_l_@quot,f,c
  7148  00E4D2  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  7149  00E4D4  D7F9               	goto	l3379
  7150  00E4D6  D015               	goto	l872
  7151  00E4D8                     l3383:
  7152  00E4D8  0E17               	movlw	23
  7153  00E4DA  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  7154  00E4DC  D00F               	goto	l3391
  7155  00E4DE  0E00               	movlw	0
  7156  00E4E0  6E01               	movwf	?__tdiv_to_l_,c
  7157  00E4E2  0E00               	movlw	0
  7158  00E4E4  6E02               	movwf	?__tdiv_to_l_+1,c
  7159  00E4E6  0E00               	movlw	0
  7160  00E4E8  6E03               	movwf	?__tdiv_to_l_+2,c
  7161  00E4EA  0E00               	movlw	0
  7162  00E4EC  6E04               	movwf	?__tdiv_to_l_+3,c
  7163  00E4EE  0012               	return	
  7164  00E4F0                     l3389:
  7165  00E4F0  90D8               	bcf	status,0,c
  7166  00E4F2  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7167  00E4F4  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7168  00E4F6  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7169  00E4F8  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7170  00E4FA  060F               	decf	__tdiv_to_l_@exp1,f,c
  7171  00E4FC                     l3391:
  7172  00E4FC  500F               	movf	__tdiv_to_l_@exp1,w,c
  7173  00E4FE  A4D8               	btfss	status,2,c
  7174  00E500  D7F7               	goto	l3389
  7175  00E502                     l872:
  7176  00E502  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7177  00E506  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7178  00E50A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7179  00E50E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7180  00E512  0012               	return		;funcret
  7181  00E514                     __end_of__tdiv_to_l_:
  7182                           	opt stack 0
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           prodh	equ	0xFF4
  7188                           prodl	equ	0xFF3
  7189                           intcon	equ	0xFF2
  7190                           intcon2	equ	0xFF1
  7191                           intcon3	equ	0xFF0
  7192                           postinc0	equ	0xFEE
  7193                           wreg	equ	0xFE8
  7194                           postdec1	equ	0xFE5
  7195                           fsr1l	equ	0xFE1
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           fsr2h	equ	0xFDA
  7200                           fsr2l	equ	0xFD9
  7201                           status	equ	0xFD8
  7202                           
  7203 ;; *************** function __div_to_l_ *****************
  7204 ;; Defined at:
  7205 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  f1              3    0[COMRAM] unsigned long 
  7208 ;;  f2              3    3[COMRAM] unsigned long 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  quot            4    6[COMRAM] unsigned long 
  7211 ;;  exp1            1   11[COMRAM] unsigned char 
  7212 ;;  cntr            1   10[COMRAM] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  4    0[COMRAM] unsigned long 
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7222 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;Total ram usage:       12 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; This function calls:
  7229 ;;		Nothing
  7230 ;; This function is called by:
  7231 ;;		_sprintf
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text28
  7236  00E2BA                     __ptext28:
  7237                           	opt stack 0
  7238  00E2BA                     __div_to_l_:
  7239                           	opt stack 29
  7240                           
  7241                           ;incstack = 0
  7242  00E2BA  3403               	rlcf	__div_to_l_@f1+2,w,c
  7243  00E2BC  3404               	rlcf	__div_to_l_@f1+3,w,c
  7244  00E2BE  6E0C               	movwf	__div_to_l_@exp1,c
  7245  00E2C0  500C               	movf	__div_to_l_@exp1,w,c
  7246  00E2C2  A4D8               	btfss	status,2,c
  7247  00E2C4  D009               	goto	l3399
  7248  00E2C6  0E00               	movlw	0
  7249  00E2C8  6E01               	movwf	?__div_to_l_,c
  7250  00E2CA  0E00               	movlw	0
  7251  00E2CC  6E02               	movwf	?__div_to_l_+1,c
  7252  00E2CE  0E00               	movlw	0
  7253  00E2D0  6E03               	movwf	?__div_to_l_+2,c
  7254  00E2D2  0E00               	movlw	0
  7255  00E2D4  6E04               	movwf	?__div_to_l_+3,c
  7256  00E2D6  0012               	return	
  7257  00E2D8                     l3399:
  7258  00E2D8  3406               	rlcf	__div_to_l_@f2+2,w,c
  7259  00E2DA  3407               	rlcf	__div_to_l_@f2+3,w,c
  7260  00E2DC  6E0B               	movwf	__div_to_l_@cntr,c
  7261  00E2DE  500B               	movf	__div_to_l_@cntr,w,c
  7262  00E2E0  A4D8               	btfss	status,2,c
  7263  00E2E2  D009               	goto	l3405
  7264  00E2E4  0E00               	movlw	0
  7265  00E2E6  6E01               	movwf	?__div_to_l_,c
  7266  00E2E8  0E00               	movlw	0
  7267  00E2EA  6E02               	movwf	?__div_to_l_+1,c
  7268  00E2EC  0E00               	movlw	0
  7269  00E2EE  6E03               	movwf	?__div_to_l_+2,c
  7270  00E2F0  0E00               	movlw	0
  7271  00E2F2  6E04               	movwf	?__div_to_l_+3,c
  7272  00E2F4  0012               	return	
  7273  00E2F6                     l3405:
  7274  00E2F6  8E03               	bsf	__div_to_l_@f1+2,7,c
  7275  00E2F8  0EFF               	movlw	255
  7276  00E2FA  1601               	andwf	__div_to_l_@f1,f,c
  7277  00E2FC  0EFF               	movlw	255
  7278  00E2FE  1602               	andwf	__div_to_l_@f1+1,f,c
  7279  00E300  0EFF               	movlw	255
  7280  00E302  1603               	andwf	__div_to_l_@f1+2,f,c
  7281  00E304  0E00               	movlw	0
  7282  00E306  1604               	andwf	__div_to_l_@f1+3,f,c
  7283  00E308  8E06               	bsf	__div_to_l_@f2+2,7,c
  7284  00E30A  0EFF               	movlw	255
  7285  00E30C  1604               	andwf	__div_to_l_@f2,f,c
  7286  00E30E  0EFF               	movlw	255
  7287  00E310  1605               	andwf	__div_to_l_@f2+1,f,c
  7288  00E312  0EFF               	movlw	255
  7289  00E314  1606               	andwf	__div_to_l_@f2+2,f,c
  7290  00E316  0E00               	movlw	0
  7291  00E318  1607               	andwf	__div_to_l_@f2+3,f,c
  7292  00E31A  0E00               	movlw	0
  7293  00E31C  6E07               	movwf	__div_to_l_@quot,c
  7294  00E31E  0E00               	movlw	0
  7295  00E320  6E08               	movwf	__div_to_l_@quot+1,c
  7296  00E322  0E00               	movlw	0
  7297  00E324  6E09               	movwf	__div_to_l_@quot+2,c
  7298  00E326  0E00               	movlw	0
  7299  00E328  6E0A               	movwf	__div_to_l_@quot+3,c
  7300  00E32A  0E7F               	movlw	127
  7301  00E32C  5E0C               	subwf	__div_to_l_@exp1,f,c
  7302  00E32E  500B               	movf	__div_to_l_@cntr,w,c
  7303  00E330  0FA0               	addlw	160
  7304  00E332  5E0C               	subwf	__div_to_l_@exp1,f,c
  7305  00E334  0E20               	movlw	32
  7306  00E336  6E0B               	movwf	__div_to_l_@cntr,c
  7307  00E338                     l3419:
  7308  00E338  90D8               	bcf	status,0,c
  7309  00E33A  3607               	rlcf	__div_to_l_@quot,f,c
  7310  00E33C  3608               	rlcf	__div_to_l_@quot+1,f,c
  7311  00E33E  3609               	rlcf	__div_to_l_@quot+2,f,c
  7312  00E340  360A               	rlcf	__div_to_l_@quot+3,f,c
  7313  00E342  5004               	movf	__div_to_l_@f2,w,c
  7314  00E344  5C01               	subwf	__div_to_l_@f1,w,c
  7315  00E346  5005               	movf	__div_to_l_@f2+1,w,c
  7316  00E348  5802               	subwfb	__div_to_l_@f1+1,w,c
  7317  00E34A  5006               	movf	__div_to_l_@f2+2,w,c
  7318  00E34C  5803               	subwfb	__div_to_l_@f1+2,w,c
  7319  00E34E  5007               	movf	__div_to_l_@f2+3,w,c
  7320  00E350  5804               	subwfb	__div_to_l_@f1+3,w,c
  7321  00E352  A0D8               	btfss	status,0,c
  7322  00E354  D009               	goto	l3427
  7323  00E356  5004               	movf	__div_to_l_@f2,w,c
  7324  00E358  5E01               	subwf	__div_to_l_@f1,f,c
  7325  00E35A  5005               	movf	__div_to_l_@f2+1,w,c
  7326  00E35C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  7327  00E35E  5006               	movf	__div_to_l_@f2+2,w,c
  7328  00E360  5A03               	subwfb	__div_to_l_@f1+2,f,c
  7329  00E362  5007               	movf	__div_to_l_@f2+3,w,c
  7330  00E364  5A04               	subwfb	__div_to_l_@f1+3,f,c
  7331  00E366  8007               	bsf	__div_to_l_@quot,0,c
  7332  00E368                     l3427:
  7333  00E368  90D8               	bcf	status,0,c
  7334  00E36A  3601               	rlcf	__div_to_l_@f1,f,c
  7335  00E36C  3602               	rlcf	__div_to_l_@f1+1,f,c
  7336  00E36E  3603               	rlcf	__div_to_l_@f1+2,f,c
  7337  00E370  3604               	rlcf	__div_to_l_@f1+3,f,c
  7338  00E372  2E0B               	decfsz	__div_to_l_@cntr,f,c
  7339  00E374  D7E1               	goto	l3419
  7340  00E376  AE0C               	btfss	__div_to_l_@exp1,7,c
  7341  00E378  D016               	goto	l3443
  7342  00E37A  500C               	movf	__div_to_l_@exp1,w,c
  7343  00E37C  0A80               	xorlw	128
  7344  00E37E  0F9F               	addlw	159
  7345  00E380  B0D8               	btfsc	status,0,c
  7346  00E382  D009               	goto	l3439
  7347  00E384  0E00               	movlw	0
  7348  00E386  6E01               	movwf	?__div_to_l_,c
  7349  00E388  0E00               	movlw	0
  7350  00E38A  6E02               	movwf	?__div_to_l_+1,c
  7351  00E38C  0E00               	movlw	0
  7352  00E38E  6E03               	movwf	?__div_to_l_+2,c
  7353  00E390  0E00               	movlw	0
  7354  00E392  6E04               	movwf	?__div_to_l_+3,c
  7355  00E394  0012               	return	
  7356  00E396                     l3439:
  7357  00E396  90D8               	bcf	status,0,c
  7358  00E398  320A               	rrcf	__div_to_l_@quot+3,f,c
  7359  00E39A  3209               	rrcf	__div_to_l_@quot+2,f,c
  7360  00E39C  3208               	rrcf	__div_to_l_@quot+1,f,c
  7361  00E39E  3207               	rrcf	__div_to_l_@quot,f,c
  7362  00E3A0  3E0C               	incfsz	__div_to_l_@exp1,f,c
  7363  00E3A2  D7F9               	goto	l3439
  7364  00E3A4  D015               	goto	l768
  7365  00E3A6                     l3443:
  7366  00E3A6  0E1F               	movlw	31
  7367  00E3A8  640C               	cpfsgt	__div_to_l_@exp1,c
  7368  00E3AA  D00F               	goto	l3451
  7369  00E3AC  0E00               	movlw	0
  7370  00E3AE  6E01               	movwf	?__div_to_l_,c
  7371  00E3B0  0E00               	movlw	0
  7372  00E3B2  6E02               	movwf	?__div_to_l_+1,c
  7373  00E3B4  0E00               	movlw	0
  7374  00E3B6  6E03               	movwf	?__div_to_l_+2,c
  7375  00E3B8  0E00               	movlw	0
  7376  00E3BA  6E04               	movwf	?__div_to_l_+3,c
  7377  00E3BC  0012               	return	
  7378  00E3BE                     l3449:
  7379  00E3BE  90D8               	bcf	status,0,c
  7380  00E3C0  3607               	rlcf	__div_to_l_@quot,f,c
  7381  00E3C2  3608               	rlcf	__div_to_l_@quot+1,f,c
  7382  00E3C4  3609               	rlcf	__div_to_l_@quot+2,f,c
  7383  00E3C6  360A               	rlcf	__div_to_l_@quot+3,f,c
  7384  00E3C8  060C               	decf	__div_to_l_@exp1,f,c
  7385  00E3CA                     l3451:
  7386  00E3CA  500C               	movf	__div_to_l_@exp1,w,c
  7387  00E3CC  A4D8               	btfss	status,2,c
  7388  00E3CE  D7F7               	goto	l3449
  7389  00E3D0                     l768:
  7390  00E3D0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  7391  00E3D4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7392  00E3D8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7393  00E3DC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7394  00E3E0  0012               	return		;funcret
  7395  00E3E2                     __end_of__div_to_l_:
  7396                           	opt stack 0
  7397                           tblptru	equ	0xFF8
  7398                           tblptrh	equ	0xFF7
  7399                           tblptrl	equ	0xFF6
  7400                           tablat	equ	0xFF5
  7401                           prodh	equ	0xFF4
  7402                           prodl	equ	0xFF3
  7403                           intcon	equ	0xFF2
  7404                           intcon2	equ	0xFF1
  7405                           intcon3	equ	0xFF0
  7406                           postinc0	equ	0xFEE
  7407                           wreg	equ	0xFE8
  7408                           postdec1	equ	0xFE5
  7409                           fsr1l	equ	0xFE1
  7410                           indf2	equ	0xFDF
  7411                           postinc2	equ	0xFDE
  7412                           postdec2	equ	0xFDD
  7413                           fsr2h	equ	0xFDA
  7414                           fsr2l	equ	0xFD9
  7415                           status	equ	0xFD8
  7416                           
  7417 ;; *************** function ___lltoft *****************
  7418 ;; Defined at:
  7419 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  c               4    8[COMRAM] unsigned long 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  exp             1   16[COMRAM] unsigned char 
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  3    8[COMRAM] float 
  7426 ;; Registers used:
  7427 ;;		wreg, status,2, status,0, cstack
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7433 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;Total ram usage:        9 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; Hardware stack levels required when called:    1
  7440 ;; This function calls:
  7441 ;;		___ftpack
  7442 ;; This function is called by:
  7443 ;;		_sprintf
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text29
  7448  00D9B6                     __ptext29:
  7449                           	opt stack 0
  7450  00D9B6                     ___lltoft:
  7451                           	opt stack 28
  7452                           
  7453                           ;incstack = 0
  7454  00D9B6  0E8E               	movlw	142
  7455  00D9B8  6E11               	movwf	___lltoft@exp,c
  7456  00D9BA  D006               	goto	l3571
  7457  00D9BC                     l3569:
  7458  00D9BC  90D8               	bcf	status,0,c
  7459  00D9BE  320C               	rrcf	___lltoft@c+3,f,c
  7460  00D9C0  320B               	rrcf	___lltoft@c+2,f,c
  7461  00D9C2  320A               	rrcf	___lltoft@c+1,f,c
  7462  00D9C4  3209               	rrcf	___lltoft@c,f,c
  7463  00D9C6  2A11               	incf	___lltoft@exp,f,c
  7464  00D9C8                     l3571:
  7465  00D9C8  0E00               	movlw	0
  7466  00D9CA  1409               	andwf	___lltoft@c,w,c
  7467  00D9CC  6E0D               	movwf	??___lltoft& (0+255),c
  7468  00D9CE  0E00               	movlw	0
  7469  00D9D0  140A               	andwf	___lltoft@c+1,w,c
  7470  00D9D2  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  7471  00D9D4  0E00               	movlw	0
  7472  00D9D6  140B               	andwf	___lltoft@c+2,w,c
  7473  00D9D8  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  7474  00D9DA  0EFF               	movlw	255
  7475  00D9DC  140C               	andwf	___lltoft@c+3,w,c
  7476  00D9DE  6E10               	movwf	(??___lltoft+3)& (0+255),c
  7477  00D9E0  500D               	movf	??___lltoft,w,c
  7478  00D9E2  100E               	iorwf	??___lltoft+1,w,c
  7479  00D9E4  100F               	iorwf	??___lltoft+2,w,c
  7480  00D9E6  1010               	iorwf	??___lltoft+3,w,c
  7481  00D9E8  A4D8               	btfss	status,2,c
  7482  00D9EA  D7E8               	goto	l3569
  7483  00D9EC  C009  F001         	movff	___lltoft@c,___ftpack@arg
  7484  00D9F0  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  7485  00D9F4  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  7486  00D9F8  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  7487  00D9FC  0E00               	movlw	0
  7488  00D9FE  6E05               	movwf	___ftpack@sign,c
  7489  00DA00  EC18  F06F         	call	___ftpack	;wreg free
  7490  00DA04  C001  F009         	movff	?___ftpack,?___lltoft
  7491  00DA08  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  7492  00DA0C  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  7493  00DA10  0012               	return	
  7494  00DA12                     __end_of___lltoft:
  7495                           	opt stack 0
  7496                           tblptru	equ	0xFF8
  7497                           tblptrh	equ	0xFF7
  7498                           tblptrl	equ	0xFF6
  7499                           tablat	equ	0xFF5
  7500                           prodh	equ	0xFF4
  7501                           prodl	equ	0xFF3
  7502                           intcon	equ	0xFF2
  7503                           intcon2	equ	0xFF1
  7504                           intcon3	equ	0xFF0
  7505                           postinc0	equ	0xFEE
  7506                           wreg	equ	0xFE8
  7507                           postdec1	equ	0xFE5
  7508                           fsr1l	equ	0xFE1
  7509                           indf2	equ	0xFDF
  7510                           postinc2	equ	0xFDE
  7511                           postdec2	equ	0xFDD
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function ___llmod *****************
  7517 ;; Defined at:
  7518 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;  dividend        4   13[COMRAM] unsigned long 
  7521 ;;  divisor         4   17[COMRAM] unsigned long 
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;  counter         1   21[COMRAM] unsigned char 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  4   13[COMRAM] unsigned long 
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7533 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;Total ram usage:        9 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; This function calls:
  7540 ;;		Nothing
  7541 ;; This function is called by:
  7542 ;;		_sprintf
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           	psect	text30
  7547  00DA74                     __ptext30:
  7548                           	opt stack 0
  7549  00DA74                     ___llmod:
  7550                           	opt stack 29
  7551                           
  7552                           ;incstack = 0
  7553  00DA74  5012               	movf	___llmod@divisor,w,c
  7554  00DA76  1013               	iorwf	___llmod@divisor+1,w,c
  7555  00DA78  1014               	iorwf	___llmod@divisor+2,w,c
  7556  00DA7A  1015               	iorwf	___llmod@divisor+3,w,c
  7557  00DA7C  B4D8               	btfsc	status,2,c
  7558  00DA7E  D024               	goto	l957
  7559  00DA80  0E01               	movlw	1
  7560  00DA82  6E16               	movwf	___llmod@counter,c
  7561  00DA84  D006               	goto	l3557
  7562  00DA86                     l3555:
  7563  00DA86  90D8               	bcf	status,0,c
  7564  00DA88  3612               	rlcf	___llmod@divisor,f,c
  7565  00DA8A  3613               	rlcf	___llmod@divisor+1,f,c
  7566  00DA8C  3614               	rlcf	___llmod@divisor+2,f,c
  7567  00DA8E  3615               	rlcf	___llmod@divisor+3,f,c
  7568  00DA90  2A16               	incf	___llmod@counter,f,c
  7569  00DA92                     l3557:
  7570  00DA92  AE15               	btfss	___llmod@divisor+3,7,c
  7571  00DA94  D7F8               	goto	l3555
  7572  00DA96                     l3559:
  7573  00DA96  5012               	movf	___llmod@divisor,w,c
  7574  00DA98  5C0E               	subwf	___llmod@dividend,w,c
  7575  00DA9A  5013               	movf	___llmod@divisor+1,w,c
  7576  00DA9C  580F               	subwfb	___llmod@dividend+1,w,c
  7577  00DA9E  5014               	movf	___llmod@divisor+2,w,c
  7578  00DAA0  5810               	subwfb	___llmod@dividend+2,w,c
  7579  00DAA2  5015               	movf	___llmod@divisor+3,w,c
  7580  00DAA4  5811               	subwfb	___llmod@dividend+3,w,c
  7581  00DAA6  A0D8               	btfss	status,0,c
  7582  00DAA8  D008               	goto	l3563
  7583  00DAAA  5012               	movf	___llmod@divisor,w,c
  7584  00DAAC  5E0E               	subwf	___llmod@dividend,f,c
  7585  00DAAE  5013               	movf	___llmod@divisor+1,w,c
  7586  00DAB0  5A0F               	subwfb	___llmod@dividend+1,f,c
  7587  00DAB2  5014               	movf	___llmod@divisor+2,w,c
  7588  00DAB4  5A10               	subwfb	___llmod@dividend+2,f,c
  7589  00DAB6  5015               	movf	___llmod@divisor+3,w,c
  7590  00DAB8  5A11               	subwfb	___llmod@dividend+3,f,c
  7591  00DABA                     l3563:
  7592  00DABA  90D8               	bcf	status,0,c
  7593  00DABC  3215               	rrcf	___llmod@divisor+3,f,c
  7594  00DABE  3214               	rrcf	___llmod@divisor+2,f,c
  7595  00DAC0  3213               	rrcf	___llmod@divisor+1,f,c
  7596  00DAC2  3212               	rrcf	___llmod@divisor,f,c
  7597  00DAC4  2E16               	decfsz	___llmod@counter,f,c
  7598  00DAC6  D7E7               	goto	l3559
  7599  00DAC8                     l957:
  7600  00DAC8  C00E  F00E         	movff	___llmod@dividend,?___llmod
  7601  00DACC  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  7602  00DAD0  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  7603  00DAD4  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  7604  00DAD8  0012               	return		;funcret
  7605  00DADA                     __end_of___llmod:
  7606                           	opt stack 0
  7607                           tblptru	equ	0xFF8
  7608                           tblptrh	equ	0xFF7
  7609                           tblptrl	equ	0xFF6
  7610                           tablat	equ	0xFF5
  7611                           prodh	equ	0xFF4
  7612                           prodl	equ	0xFF3
  7613                           intcon	equ	0xFF2
  7614                           intcon2	equ	0xFF1
  7615                           intcon3	equ	0xFF0
  7616                           postinc0	equ	0xFEE
  7617                           wreg	equ	0xFE8
  7618                           postdec1	equ	0xFE5
  7619                           fsr1l	equ	0xFE1
  7620                           indf2	equ	0xFDF
  7621                           postinc2	equ	0xFDE
  7622                           postdec2	equ	0xFDD
  7623                           fsr2h	equ	0xFDA
  7624                           fsr2l	equ	0xFD9
  7625                           status	equ	0xFD8
  7626                           
  7627 ;; *************** function ___lldiv *****************
  7628 ;; Defined at:
  7629 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;  dividend        4    0[COMRAM] unsigned long 
  7632 ;;  divisor         4    4[COMRAM] unsigned long 
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;  quotient        4    8[COMRAM] unsigned long 
  7635 ;;  counter         1   12[COMRAM] unsigned char 
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  4    0[COMRAM] unsigned long 
  7638 ;; Registers used:
  7639 ;;		wreg, status,2, status,0
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7645 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;Total ram usage:       13 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; This function calls:
  7652 ;;		Nothing
  7653 ;; This function is called by:
  7654 ;;		_sprintf
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text31
  7659  00DC9A                     __ptext31:
  7660                           	opt stack 0
  7661  00DC9A                     ___lldiv:
  7662                           	opt stack 29
  7663                           
  7664                           ;incstack = 0
  7665  00DC9A  0E00               	movlw	0
  7666  00DC9C  6E09               	movwf	___lldiv@quotient,c
  7667  00DC9E  0E00               	movlw	0
  7668  00DCA0  6E0A               	movwf	___lldiv@quotient+1,c
  7669  00DCA2  0E00               	movlw	0
  7670  00DCA4  6E0B               	movwf	___lldiv@quotient+2,c
  7671  00DCA6  0E00               	movlw	0
  7672  00DCA8  6E0C               	movwf	___lldiv@quotient+3,c
  7673  00DCAA  5005               	movf	___lldiv@divisor,w,c
  7674  00DCAC  1006               	iorwf	___lldiv@divisor+1,w,c
  7675  00DCAE  1007               	iorwf	___lldiv@divisor+2,w,c
  7676  00DCB0  1008               	iorwf	___lldiv@divisor+3,w,c
  7677  00DCB2  B4D8               	btfsc	status,2,c
  7678  00DCB4  D02A               	goto	l947
  7679  00DCB6  0E01               	movlw	1
  7680  00DCB8  6E0D               	movwf	___lldiv@counter,c
  7681  00DCBA  D006               	goto	l3537
  7682  00DCBC                     l3535:
  7683  00DCBC  90D8               	bcf	status,0,c
  7684  00DCBE  3605               	rlcf	___lldiv@divisor,f,c
  7685  00DCC0  3606               	rlcf	___lldiv@divisor+1,f,c
  7686  00DCC2  3607               	rlcf	___lldiv@divisor+2,f,c
  7687  00DCC4  3608               	rlcf	___lldiv@divisor+3,f,c
  7688  00DCC6  2A0D               	incf	___lldiv@counter,f,c
  7689  00DCC8                     l3537:
  7690  00DCC8  AE08               	btfss	___lldiv@divisor+3,7,c
  7691  00DCCA  D7F8               	goto	l3535
  7692  00DCCC                     l3539:
  7693  00DCCC  90D8               	bcf	status,0,c
  7694  00DCCE  3609               	rlcf	___lldiv@quotient,f,c
  7695  00DCD0  360A               	rlcf	___lldiv@quotient+1,f,c
  7696  00DCD2  360B               	rlcf	___lldiv@quotient+2,f,c
  7697  00DCD4  360C               	rlcf	___lldiv@quotient+3,f,c
  7698  00DCD6  5005               	movf	___lldiv@divisor,w,c
  7699  00DCD8  5C01               	subwf	___lldiv@dividend,w,c
  7700  00DCDA  5006               	movf	___lldiv@divisor+1,w,c
  7701  00DCDC  5802               	subwfb	___lldiv@dividend+1,w,c
  7702  00DCDE  5007               	movf	___lldiv@divisor+2,w,c
  7703  00DCE0  5803               	subwfb	___lldiv@dividend+2,w,c
  7704  00DCE2  5008               	movf	___lldiv@divisor+3,w,c
  7705  00DCE4  5804               	subwfb	___lldiv@dividend+3,w,c
  7706  00DCE6  A0D8               	btfss	status,0,c
  7707  00DCE8  D009               	goto	l3547
  7708  00DCEA  5005               	movf	___lldiv@divisor,w,c
  7709  00DCEC  5E01               	subwf	___lldiv@dividend,f,c
  7710  00DCEE  5006               	movf	___lldiv@divisor+1,w,c
  7711  00DCF0  5A02               	subwfb	___lldiv@dividend+1,f,c
  7712  00DCF2  5007               	movf	___lldiv@divisor+2,w,c
  7713  00DCF4  5A03               	subwfb	___lldiv@dividend+2,f,c
  7714  00DCF6  5008               	movf	___lldiv@divisor+3,w,c
  7715  00DCF8  5A04               	subwfb	___lldiv@dividend+3,f,c
  7716  00DCFA  8009               	bsf	___lldiv@quotient,0,c
  7717  00DCFC                     l3547:
  7718  00DCFC  90D8               	bcf	status,0,c
  7719  00DCFE  3208               	rrcf	___lldiv@divisor+3,f,c
  7720  00DD00  3207               	rrcf	___lldiv@divisor+2,f,c
  7721  00DD02  3206               	rrcf	___lldiv@divisor+1,f,c
  7722  00DD04  3205               	rrcf	___lldiv@divisor,f,c
  7723  00DD06  2E0D               	decfsz	___lldiv@counter,f,c
  7724  00DD08  D7E1               	goto	l3539
  7725  00DD0A                     l947:
  7726  00DD0A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  7727  00DD0E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7728  00DD12  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7729  00DD16  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7730  00DD1A  0012               	return		;funcret
  7731  00DD1C                     __end_of___lldiv:
  7732                           	opt stack 0
  7733                           tblptru	equ	0xFF8
  7734                           tblptrh	equ	0xFF7
  7735                           tblptrl	equ	0xFF6
  7736                           tablat	equ	0xFF5
  7737                           prodh	equ	0xFF4
  7738                           prodl	equ	0xFF3
  7739                           intcon	equ	0xFF2
  7740                           intcon2	equ	0xFF1
  7741                           intcon3	equ	0xFF0
  7742                           postinc0	equ	0xFEE
  7743                           wreg	equ	0xFE8
  7744                           postdec1	equ	0xFE5
  7745                           fsr1l	equ	0xFE1
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function ___fttol *****************
  7754 ;; Defined at:
  7755 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  f1              3   42[COMRAM] float 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  lval            4   52[COMRAM] unsigned long 
  7760 ;;  exp1            1   56[COMRAM] unsigned char 
  7761 ;;  sign1           1   51[COMRAM] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  4   42[COMRAM] long 
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;Total ram usage:       15 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_sprintf
  7781 ;;		_set_pwm1_percent
  7782 ;;		_set_pwm1_voltage
  7783 ;;		_set_pwm1_general
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text32
  7788  00DFC4                     __ptext32:
  7789                           	opt stack 0
  7790  00DFC4                     ___fttol:
  7791                           	opt stack 29
  7792                           
  7793                           ;incstack = 0
  7794  00DFC4  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  7795  00DFC8  6A30               	clrf	(??___fttol+1)& (0+255),c
  7796  00DFCA  6A31               	clrf	(??___fttol+2)& (0+255),c
  7797  00DFCC  342C               	rlcf	___fttol@f1+1,w,c
  7798  00DFCE  362F               	rlcf	??___fttol& (0+255),f,c
  7799  00DFD0  E301               	bnc	u3461
  7800  00DFD2  8030               	bsf	(??___fttol+1)& (0+255),0,c
  7801  00DFD4                     u3461:
  7802  00DFD4  502F               	movf	??___fttol,w,c
  7803  00DFD6  6E39               	movwf	___fttol@exp1,c
  7804  00DFD8  5039               	movf	___fttol@exp1,w,c
  7805  00DFDA  A4D8               	btfss	status,2,c
  7806  00DFDC  D009               	goto	l3489
  7807  00DFDE  0E00               	movlw	0
  7808  00DFE0  6E2B               	movwf	?___fttol,c
  7809  00DFE2  0E00               	movlw	0
  7810  00DFE4  6E2C               	movwf	?___fttol+1,c
  7811  00DFE6  0E00               	movlw	0
  7812  00DFE8  6E2D               	movwf	?___fttol+2,c
  7813  00DFEA  0E00               	movlw	0
  7814  00DFEC  6E2E               	movwf	?___fttol+3,c
  7815  00DFEE  0012               	return	
  7816  00DFF0                     l3489:
  7817  00DFF0  0E17               	movlw	23
  7818  00DFF2  6E2F               	movwf	??___fttol& (0+255),c
  7819  00DFF4  C02B  F030         	movff	___fttol@f1,??___fttol+1
  7820  00DFF8  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  7821  00DFFC  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  7822  00E000  282F               	incf	??___fttol,w,c
  7823  00E002  6E33               	movwf	(??___fttol+4)& (0+255),c
  7824  00E004  D004               	goto	u3480
  7825  00E006                     u3485:
  7826  00E006  90D8               	bcf	status,0,c
  7827  00E008  3232               	rrcf	??___fttol+3,f,c
  7828  00E00A  3231               	rrcf	??___fttol+2,f,c
  7829  00E00C  3230               	rrcf	??___fttol+1,f,c
  7830  00E00E                     u3480:
  7831  00E00E  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  7832  00E010  D7FA               	goto	u3485
  7833  00E012  5030               	movf	??___fttol+1,w,c
  7834  00E014  6E34               	movwf	___fttol@sign1,c
  7835  00E016  8E2C               	bsf	___fttol@f1+1,7,c
  7836  00E018  0EFF               	movlw	255
  7837  00E01A  162B               	andwf	___fttol@f1,f,c
  7838  00E01C  0EFF               	movlw	255
  7839  00E01E  162C               	andwf	___fttol@f1+1,f,c
  7840  00E020  0E00               	movlw	0
  7841  00E022  162D               	andwf	___fttol@f1+2,f,c
  7842  00E024  502B               	movf	___fttol@f1,w,c
  7843  00E026  6E35               	movwf	___fttol@lval,c
  7844  00E028  502C               	movf	___fttol@f1+1,w,c
  7845  00E02A  6E36               	movwf	___fttol@lval+1,c
  7846  00E02C  502D               	movf	___fttol@f1+2,w,c
  7847  00E02E  6E37               	movwf	___fttol@lval+2,c
  7848  00E030  6A38               	clrf	___fttol@lval+3,c
  7849  00E032  0E8E               	movlw	142
  7850  00E034  5E39               	subwf	___fttol@exp1,f,c
  7851  00E036  AE39               	btfss	___fttol@exp1,7,c
  7852  00E038  D016               	goto	l3511
  7853  00E03A  5039               	movf	___fttol@exp1,w,c
  7854  00E03C  0A80               	xorlw	128
  7855  00E03E  0F8F               	addlw	143
  7856  00E040  B0D8               	btfsc	status,0,c
  7857  00E042  D009               	goto	l3507
  7858  00E044  0E00               	movlw	0
  7859  00E046  6E2B               	movwf	?___fttol,c
  7860  00E048  0E00               	movlw	0
  7861  00E04A  6E2C               	movwf	?___fttol+1,c
  7862  00E04C  0E00               	movlw	0
  7863  00E04E  6E2D               	movwf	?___fttol+2,c
  7864  00E050  0E00               	movlw	0
  7865  00E052  6E2E               	movwf	?___fttol+3,c
  7866  00E054  0012               	return	
  7867  00E056                     l3507:
  7868  00E056  90D8               	bcf	status,0,c
  7869  00E058  3238               	rrcf	___fttol@lval+3,f,c
  7870  00E05A  3237               	rrcf	___fttol@lval+2,f,c
  7871  00E05C  3236               	rrcf	___fttol@lval+1,f,c
  7872  00E05E  3235               	rrcf	___fttol@lval,f,c
  7873  00E060  3E39               	incfsz	___fttol@exp1,f,c
  7874  00E062  D7F9               	goto	l3507
  7875  00E064  D015               	goto	l3521
  7876  00E066                     l3511:
  7877  00E066  0E17               	movlw	23
  7878  00E068  6439               	cpfsgt	___fttol@exp1,c
  7879  00E06A  D00F               	goto	l3519
  7880  00E06C  0E00               	movlw	0
  7881  00E06E  6E2B               	movwf	?___fttol,c
  7882  00E070  0E00               	movlw	0
  7883  00E072  6E2C               	movwf	?___fttol+1,c
  7884  00E074  0E00               	movlw	0
  7885  00E076  6E2D               	movwf	?___fttol+2,c
  7886  00E078  0E00               	movlw	0
  7887  00E07A  6E2E               	movwf	?___fttol+3,c
  7888  00E07C  0012               	return	
  7889  00E07E                     l3517:
  7890  00E07E  90D8               	bcf	status,0,c
  7891  00E080  3635               	rlcf	___fttol@lval,f,c
  7892  00E082  3636               	rlcf	___fttol@lval+1,f,c
  7893  00E084  3637               	rlcf	___fttol@lval+2,f,c
  7894  00E086  3638               	rlcf	___fttol@lval+3,f,c
  7895  00E088  0639               	decf	___fttol@exp1,f,c
  7896  00E08A                     l3519:
  7897  00E08A  5039               	movf	___fttol@exp1,w,c
  7898  00E08C  A4D8               	btfss	status,2,c
  7899  00E08E  D7F7               	goto	l3517
  7900  00E090                     l3521:
  7901  00E090  5034               	movf	___fttol@sign1,w,c
  7902  00E092  B4D8               	btfsc	status,2,c
  7903  00E094  D008               	goto	l3525
  7904  00E096  1E38               	comf	___fttol@lval+3,f,c
  7905  00E098  1E37               	comf	___fttol@lval+2,f,c
  7906  00E09A  1E36               	comf	___fttol@lval+1,f,c
  7907  00E09C  6C35               	negf	___fttol@lval,c
  7908  00E09E  0E00               	movlw	0
  7909  00E0A0  2236               	addwfc	___fttol@lval+1,f,c
  7910  00E0A2  2237               	addwfc	___fttol@lval+2,f,c
  7911  00E0A4  2238               	addwfc	___fttol@lval+3,f,c
  7912  00E0A6                     l3525:
  7913  00E0A6  C035  F02B         	movff	___fttol@lval,?___fttol
  7914  00E0AA  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  7915  00E0AE  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  7916  00E0B2  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  7917  00E0B6  0012               	return	
  7918  00E0B8                     __end_of___fttol:
  7919                           	opt stack 0
  7920                           tblptru	equ	0xFF8
  7921                           tblptrh	equ	0xFF7
  7922                           tblptrl	equ	0xFF6
  7923                           tablat	equ	0xFF5
  7924                           prodh	equ	0xFF4
  7925                           prodl	equ	0xFF3
  7926                           intcon	equ	0xFF2
  7927                           intcon2	equ	0xFF1
  7928                           intcon3	equ	0xFF0
  7929                           postinc0	equ	0xFEE
  7930                           wreg	equ	0xFE8
  7931                           postdec1	equ	0xFE5
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940 ;; *************** function ___ftsub *****************
  7941 ;; Defined at:
  7942 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  f1              3   57[COMRAM] float 
  7945 ;;  f2              3   60[COMRAM] float 
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;		None
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  3   57[COMRAM] float 
  7950 ;; Registers used:
  7951 ;;		wreg, status,2, status,0, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7957 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;Total ram usage:        6 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    2
  7964 ;; This function calls:
  7965 ;;		___ftadd
  7966 ;; This function is called by:
  7967 ;;		_sprintf
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text33
  7972  00D896                     __ptext33:
  7973                           	opt stack 0
  7974  00D896                     ___ftsub:
  7975                           	opt stack 27
  7976                           
  7977                           ;incstack = 0
  7978  00D896  503D               	movf	___ftsub@f2,w,c
  7979  00D898  103E               	iorwf	___ftsub@f2+1,w,c
  7980  00D89A  103F               	iorwf	___ftsub@f2+2,w,c
  7981  00D89C  B4D8               	btfsc	status,2,c
  7982  00D89E  D006               	goto	l3457
  7983  00D8A0  0E00               	movlw	0
  7984  00D8A2  1A3D               	xorwf	___ftsub@f2,f,c
  7985  00D8A4  0E00               	movlw	0
  7986  00D8A6  1A3E               	xorwf	___ftsub@f2+1,f,c
  7987  00D8A8  0E80               	movlw	128
  7988  00D8AA  1A3F               	xorwf	___ftsub@f2+2,f,c
  7989  00D8AC                     l3457:
  7990  00D8AC  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  7991  00D8B0  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  7992  00D8B4  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  7993  00D8B8  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  7994  00D8BC  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  7995  00D8C0  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  7996  00D8C4  ECEC  F073         	call	___ftadd	;wreg free
  7997  00D8C8  C02E  F03A         	movff	?___ftadd,?___ftsub
  7998  00D8CC  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  7999  00D8D0  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  8000  00D8D4  0012               	return	
  8001  00D8D6                     __end_of___ftsub:
  8002                           	opt stack 0
  8003                           tblptru	equ	0xFF8
  8004                           tblptrh	equ	0xFF7
  8005                           tblptrl	equ	0xFF6
  8006                           tablat	equ	0xFF5
  8007                           prodh	equ	0xFF4
  8008                           prodl	equ	0xFF3
  8009                           intcon	equ	0xFF2
  8010                           intcon2	equ	0xFF1
  8011                           intcon3	equ	0xFF0
  8012                           postinc0	equ	0xFEE
  8013                           wreg	equ	0xFE8
  8014                           postdec1	equ	0xFE5
  8015                           fsr1l	equ	0xFE1
  8016                           indf2	equ	0xFDF
  8017                           postinc2	equ	0xFDE
  8018                           postdec2	equ	0xFDD
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023 ;; *************** function ___ftadd *****************
  8024 ;; Defined at:
  8025 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  f1              3   45[COMRAM] float 
  8028 ;;  f2              3   48[COMRAM] float 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  exp1            1   56[COMRAM] unsigned char 
  8031 ;;  exp2            1   55[COMRAM] unsigned char 
  8032 ;;  sign            1   54[COMRAM] unsigned char 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  3   45[COMRAM] float 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2, status,0, cstack
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8042 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;Total ram usage:       12 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    1
  8049 ;; This function calls:
  8050 ;;		___ftpack
  8051 ;; This function is called by:
  8052 ;;		_sprintf
  8053 ;;		___ftsub
  8054 ;;		_set_pwm1_percent
  8055 ;;		_set_pwm1_voltage
  8056 ;;		_set_pwm1_general
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           	psect	text34
  8061  00E7D8                     __ptext34:
  8062                           	opt stack 0
  8063  00E7D8                     ___ftadd:
  8064                           	opt stack 27
  8065                           
  8066                           ;incstack = 0
  8067  00E7D8  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  8068  00E7DC  6A35               	clrf	(??___ftadd+1)& (0+255),c
  8069  00E7DE  6A36               	clrf	(??___ftadd+2)& (0+255),c
  8070  00E7E0  342F               	rlcf	___ftadd@f1+1,w,c
  8071  00E7E2  3634               	rlcf	??___ftadd& (0+255),f,c
  8072  00E7E4  E301               	bnc	u2771
  8073  00E7E6  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  8074  00E7E8                     u2771:
  8075  00E7E8  5034               	movf	??___ftadd,w,c
  8076  00E7EA  6E39               	movwf	___ftadd@exp1,c
  8077  00E7EC  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  8078  00E7F0  6A35               	clrf	(??___ftadd+1)& (0+255),c
  8079  00E7F2  6A36               	clrf	(??___ftadd+2)& (0+255),c
  8080  00E7F4  3432               	rlcf	___ftadd@f2+1,w,c
  8081  00E7F6  3634               	rlcf	??___ftadd& (0+255),f,c
  8082  00E7F8  E301               	bnc	u2781
  8083  00E7FA  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  8084  00E7FC                     u2781:
  8085  00E7FC  5034               	movf	??___ftadd,w,c
  8086  00E7FE  6E38               	movwf	___ftadd@exp2,c
  8087  00E800  5039               	movf	___ftadd@exp1,w,c
  8088  00E802  B4D8               	btfsc	status,2,c
  8089  00E804  D00B               	goto	l823
  8090  00E806  5038               	movf	___ftadd@exp2,w,c
  8091  00E808  5C39               	subwf	___ftadd@exp1,w,c
  8092  00E80A  B0D8               	btfsc	status,0,c
  8093  00E80C  D00E               	goto	l3057
  8094  00E80E  5039               	movf	___ftadd@exp1,w,c
  8095  00E810  0800               	sublw	0
  8096  00E812  2438               	addwf	___ftadd@exp2,w,c
  8097  00E814  6E34               	movwf	??___ftadd& (0+255),c
  8098  00E816  0E18               	movlw	24
  8099  00E818  6434               	cpfsgt	??___ftadd,c
  8100  00E81A  D007               	goto	l3057
  8101  00E81C                     l823:
  8102  00E81C  C031  F02E         	movff	___ftadd@f2,?___ftadd
  8103  00E820  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  8104  00E824  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  8105  00E828  0012               	return	
  8106  00E82A                     l3057:
  8107  00E82A  5038               	movf	___ftadd@exp2,w,c
  8108  00E82C  B4D8               	btfsc	status,2,c
  8109  00E82E  D00B               	goto	l827
  8110  00E830  5039               	movf	___ftadd@exp1,w,c
  8111  00E832  5C38               	subwf	___ftadd@exp2,w,c
  8112  00E834  B0D8               	btfsc	status,0,c
  8113  00E836  D00E               	goto	l3063
  8114  00E838  5038               	movf	___ftadd@exp2,w,c
  8115  00E83A  0800               	sublw	0
  8116  00E83C  2439               	addwf	___ftadd@exp1,w,c
  8117  00E83E  6E34               	movwf	??___ftadd& (0+255),c
  8118  00E840  0E18               	movlw	24
  8119  00E842  6434               	cpfsgt	??___ftadd,c
  8120  00E844  D007               	goto	l3063
  8121  00E846                     l827:
  8122  00E846  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  8123  00E84A  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  8124  00E84E  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  8125  00E852  0012               	return	
  8126  00E854                     l3063:
  8127  00E854  0E06               	movlw	6
  8128  00E856  6E37               	movwf	___ftadd@sign,c
  8129  00E858  BE30               	btfsc	___ftadd@f1+2,7,c
  8130  00E85A  8E37               	bsf	___ftadd@sign,7,c
  8131  00E85C  BE33               	btfsc	___ftadd@f2+2,7,c
  8132  00E85E  8C37               	bsf	___ftadd@sign,6,c
  8133  00E860  8E2F               	bsf	___ftadd@f1+1,7,c
  8134  00E862  0EFF               	movlw	255
  8135  00E864  162E               	andwf	___ftadd@f1,f,c
  8136  00E866  0EFF               	movlw	255
  8137  00E868  162F               	andwf	___ftadd@f1+1,f,c
  8138  00E86A  0E00               	movlw	0
  8139  00E86C  1630               	andwf	___ftadd@f1+2,f,c
  8140  00E86E  8E32               	bsf	___ftadd@f2+1,7,c
  8141  00E870  0EFF               	movlw	255
  8142  00E872  1631               	andwf	___ftadd@f2,f,c
  8143  00E874  0EFF               	movlw	255
  8144  00E876  1632               	andwf	___ftadd@f2+1,f,c
  8145  00E878  0E00               	movlw	0
  8146  00E87A  1633               	andwf	___ftadd@f2+2,f,c
  8147  00E87C  5038               	movf	___ftadd@exp2,w,c
  8148  00E87E  5C39               	subwf	___ftadd@exp1,w,c
  8149  00E880  B0D8               	btfsc	status,0,c
  8150  00E882  D01B               	goto	l3089
  8151  00E884                     l3079:
  8152  00E884  90D8               	bcf	status,0,c
  8153  00E886  3631               	rlcf	___ftadd@f2,f,c
  8154  00E888  3632               	rlcf	___ftadd@f2+1,f,c
  8155  00E88A  3633               	rlcf	___ftadd@f2+2,f,c
  8156  00E88C  0638               	decf	___ftadd@exp2,f,c
  8157  00E88E  5039               	movf	___ftadd@exp1,w,c
  8158  00E890  1838               	xorwf	___ftadd@exp2,w,c
  8159  00E892  B4D8               	btfsc	status,2,c
  8160  00E894  D00D               	goto	l3087
  8161  00E896  0637               	decf	___ftadd@sign,f,c
  8162  00E898  C037  F034         	movff	___ftadd@sign,??___ftadd
  8163  00E89C  0E07               	movlw	7
  8164  00E89E  1634               	andwf	??___ftadd,f,c
  8165  00E8A0  B4D8               	btfsc	status,2,c
  8166  00E8A2  D006               	goto	l3087
  8167  00E8A4  D7EF               	goto	l3079
  8168  00E8A6                     l3085:
  8169  00E8A6  90D8               	bcf	status,0,c
  8170  00E8A8  3230               	rrcf	___ftadd@f1+2,f,c
  8171  00E8AA  322F               	rrcf	___ftadd@f1+1,f,c
  8172  00E8AC  322E               	rrcf	___ftadd@f1,f,c
  8173  00E8AE  2A39               	incf	___ftadd@exp1,f,c
  8174  00E8B0                     l3087:
  8175  00E8B0  5038               	movf	___ftadd@exp2,w,c
  8176  00E8B2  1839               	xorwf	___ftadd@exp1,w,c
  8177  00E8B4  B4D8               	btfsc	status,2,c
  8178  00E8B6  D01F               	goto	l838
  8179  00E8B8  D7F6               	goto	l3085
  8180  00E8BA                     l3089:
  8181  00E8BA  5039               	movf	___ftadd@exp1,w,c
  8182  00E8BC  5C38               	subwf	___ftadd@exp2,w,c
  8183  00E8BE  B0D8               	btfsc	status,0,c
  8184  00E8C0  D01A               	goto	l838
  8185  00E8C2                     l3091:
  8186  00E8C2  90D8               	bcf	status,0,c
  8187  00E8C4  362E               	rlcf	___ftadd@f1,f,c
  8188  00E8C6  362F               	rlcf	___ftadd@f1+1,f,c
  8189  00E8C8  3630               	rlcf	___ftadd@f1+2,f,c
  8190  00E8CA  0639               	decf	___ftadd@exp1,f,c
  8191  00E8CC  5039               	movf	___ftadd@exp1,w,c
  8192  00E8CE  1838               	xorwf	___ftadd@exp2,w,c
  8193  00E8D0  B4D8               	btfsc	status,2,c
  8194  00E8D2  D00D               	goto	l3099
  8195  00E8D4  0637               	decf	___ftadd@sign,f,c
  8196  00E8D6  C037  F034         	movff	___ftadd@sign,??___ftadd
  8197  00E8DA  0E07               	movlw	7
  8198  00E8DC  1634               	andwf	??___ftadd,f,c
  8199  00E8DE  B4D8               	btfsc	status,2,c
  8200  00E8E0  D006               	goto	l3099
  8201  00E8E2  D7EF               	goto	l3091
  8202  00E8E4                     l3097:
  8203  00E8E4  90D8               	bcf	status,0,c
  8204  00E8E6  3233               	rrcf	___ftadd@f2+2,f,c
  8205  00E8E8  3232               	rrcf	___ftadd@f2+1,f,c
  8206  00E8EA  3231               	rrcf	___ftadd@f2,f,c
  8207  00E8EC  2A38               	incf	___ftadd@exp2,f,c
  8208  00E8EE                     l3099:
  8209  00E8EE  5038               	movf	___ftadd@exp2,w,c
  8210  00E8F0  1839               	xorwf	___ftadd@exp1,w,c
  8211  00E8F2  A4D8               	btfss	status,2,c
  8212  00E8F4  D7F7               	goto	l3097
  8213  00E8F6                     l838:
  8214  00E8F6  AE37               	btfss	___ftadd@sign,7,c
  8215  00E8F8  D00C               	goto	l847
  8216  00E8FA  0EFF               	movlw	255
  8217  00E8FC  1A2E               	xorwf	___ftadd@f1,f,c
  8218  00E8FE  0EFF               	movlw	255
  8219  00E900  1A2F               	xorwf	___ftadd@f1+1,f,c
  8220  00E902  0EFF               	movlw	255
  8221  00E904  1A30               	xorwf	___ftadd@f1+2,f,c
  8222  00E906  0E01               	movlw	1
  8223  00E908  262E               	addwf	___ftadd@f1,f,c
  8224  00E90A  0E00               	movlw	0
  8225  00E90C  222F               	addwfc	___ftadd@f1+1,f,c
  8226  00E90E  0E00               	movlw	0
  8227  00E910  2230               	addwfc	___ftadd@f1+2,f,c
  8228  00E912                     l847:
  8229  00E912  AC37               	btfss	___ftadd@sign,6,c
  8230  00E914  D00C               	goto	l3105
  8231  00E916  0EFF               	movlw	255
  8232  00E918  1A31               	xorwf	___ftadd@f2,f,c
  8233  00E91A  0EFF               	movlw	255
  8234  00E91C  1A32               	xorwf	___ftadd@f2+1,f,c
  8235  00E91E  0EFF               	movlw	255
  8236  00E920  1A33               	xorwf	___ftadd@f2+2,f,c
  8237  00E922  0E01               	movlw	1
  8238  00E924  2631               	addwf	___ftadd@f2,f,c
  8239  00E926  0E00               	movlw	0
  8240  00E928  2232               	addwfc	___ftadd@f2+1,f,c
  8241  00E92A  0E00               	movlw	0
  8242  00E92C  2233               	addwfc	___ftadd@f2+2,f,c
  8243  00E92E                     l3105:
  8244  00E92E  0E00               	movlw	0
  8245  00E930  6E37               	movwf	___ftadd@sign,c
  8246  00E932  502E               	movf	___ftadd@f1,w,c
  8247  00E934  2631               	addwf	___ftadd@f2,f,c
  8248  00E936  502F               	movf	___ftadd@f1+1,w,c
  8249  00E938  2232               	addwfc	___ftadd@f2+1,f,c
  8250  00E93A  5030               	movf	___ftadd@f1+2,w,c
  8251  00E93C  2233               	addwfc	___ftadd@f2+2,f,c
  8252  00E93E  AE33               	btfss	___ftadd@f2+2,7,c
  8253  00E940  D00E               	goto	l3115
  8254  00E942  0EFF               	movlw	255
  8255  00E944  1A31               	xorwf	___ftadd@f2,f,c
  8256  00E946  0EFF               	movlw	255
  8257  00E948  1A32               	xorwf	___ftadd@f2+1,f,c
  8258  00E94A  0EFF               	movlw	255
  8259  00E94C  1A33               	xorwf	___ftadd@f2+2,f,c
  8260  00E94E  0E01               	movlw	1
  8261  00E950  2631               	addwf	___ftadd@f2,f,c
  8262  00E952  0E00               	movlw	0
  8263  00E954  2232               	addwfc	___ftadd@f2+1,f,c
  8264  00E956  0E00               	movlw	0
  8265  00E958  2233               	addwfc	___ftadd@f2+2,f,c
  8266  00E95A  0E01               	movlw	1
  8267  00E95C  6E37               	movwf	___ftadd@sign,c
  8268  00E95E                     l3115:
  8269  00E95E  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  8270  00E962  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  8271  00E966  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  8272  00E96A  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  8273  00E96E  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  8274  00E972  EC18  F06F         	call	___ftpack	;wreg free
  8275  00E976  C001  F02E         	movff	?___ftpack,?___ftadd
  8276  00E97A  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  8277  00E97E  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  8278  00E982  0012               	return	
  8279  00E984                     __end_of___ftadd:
  8280                           	opt stack 0
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           intcon	equ	0xFF2
  8288                           intcon2	equ	0xFF1
  8289                           intcon3	equ	0xFF0
  8290                           postinc0	equ	0xFEE
  8291                           wreg	equ	0xFE8
  8292                           postdec1	equ	0xFE5
  8293                           fsr1l	equ	0xFE1
  8294                           indf2	equ	0xFDF
  8295                           postinc2	equ	0xFDE
  8296                           postdec2	equ	0xFDD
  8297                           fsr2h	equ	0xFDA
  8298                           fsr2l	equ	0xFD9
  8299                           status	equ	0xFD8
  8300                           
  8301 ;; *************** function ___ftpack *****************
  8302 ;; Defined at:
  8303 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  arg             3    0[COMRAM] unsigned um
  8306 ;;  exp             1    3[COMRAM] unsigned char 
  8307 ;;  sign            1    4[COMRAM] unsigned char 
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;		None
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  3    0[COMRAM] float 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2, status,0
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8319 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;Total ram usage:        8 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; This function calls:
  8326 ;;		Nothing
  8327 ;; This function is called by:
  8328 ;;		___awtoft
  8329 ;;		___ftadd
  8330 ;;		___ftdiv
  8331 ;;		___ftmul
  8332 ;;		___lltoft
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           	psect	text35
  8337  00DE30                     __ptext35:
  8338                           	opt stack 0
  8339  00DE30                     ___ftpack:
  8340                           	opt stack 27
  8341                           
  8342                           ;incstack = 0
  8343  00DE30  5004               	movf	___ftpack@exp,w,c
  8344  00DE32  B4D8               	btfsc	status,2,c
  8345  00DE34  D005               	goto	l2993
  8346  00DE36  5001               	movf	___ftpack@arg,w,c
  8347  00DE38  1002               	iorwf	___ftpack@arg+1,w,c
  8348  00DE3A  1003               	iorwf	___ftpack@arg+2,w,c
  8349  00DE3C  A4D8               	btfss	status,2,c
  8350  00DE3E  D00C               	goto	l2999
  8351  00DE40                     l2993:
  8352  00DE40  0E00               	movlw	0
  8353  00DE42  6E01               	movwf	?___ftpack,c
  8354  00DE44  0E00               	movlw	0
  8355  00DE46  6E02               	movwf	?___ftpack+1,c
  8356  00DE48  0E00               	movlw	0
  8357  00DE4A  6E03               	movwf	?___ftpack+2,c
  8358  00DE4C  0012               	return	
  8359  00DE4E                     l2997:
  8360  00DE4E  2A04               	incf	___ftpack@exp,f,c
  8361  00DE50  90D8               	bcf	status,0,c
  8362  00DE52  3203               	rrcf	___ftpack@arg+2,f,c
  8363  00DE54  3202               	rrcf	___ftpack@arg+1,f,c
  8364  00DE56  3201               	rrcf	___ftpack@arg,f,c
  8365  00DE58                     l2999:
  8366  00DE58  0E00               	movlw	0
  8367  00DE5A  1401               	andwf	___ftpack@arg,w,c
  8368  00DE5C  6E06               	movwf	??___ftpack& (0+255),c
  8369  00DE5E  0E00               	movlw	0
  8370  00DE60  1402               	andwf	___ftpack@arg+1,w,c
  8371  00DE62  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8372  00DE64  0EFE               	movlw	254
  8373  00DE66  1403               	andwf	___ftpack@arg+2,w,c
  8374  00DE68  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8375  00DE6A  5006               	movf	??___ftpack,w,c
  8376  00DE6C  1007               	iorwf	??___ftpack+1,w,c
  8377  00DE6E  1008               	iorwf	??___ftpack+2,w,c
  8378  00DE70  B4D8               	btfsc	status,2,c
  8379  00DE72  D00C               	goto	l3005
  8380  00DE74  D7EC               	goto	l2997
  8381  00DE76                     l3001:
  8382  00DE76  2A04               	incf	___ftpack@exp,f,c
  8383  00DE78  0E01               	movlw	1
  8384  00DE7A  2601               	addwf	___ftpack@arg,f,c
  8385  00DE7C  0E00               	movlw	0
  8386  00DE7E  2202               	addwfc	___ftpack@arg+1,f,c
  8387  00DE80  0E00               	movlw	0
  8388  00DE82  2203               	addwfc	___ftpack@arg+2,f,c
  8389  00DE84  90D8               	bcf	status,0,c
  8390  00DE86  3203               	rrcf	___ftpack@arg+2,f,c
  8391  00DE88  3202               	rrcf	___ftpack@arg+1,f,c
  8392  00DE8A  3201               	rrcf	___ftpack@arg,f,c
  8393  00DE8C                     l3005:
  8394  00DE8C  0E00               	movlw	0
  8395  00DE8E  1401               	andwf	___ftpack@arg,w,c
  8396  00DE90  6E06               	movwf	??___ftpack& (0+255),c
  8397  00DE92  0E00               	movlw	0
  8398  00DE94  1402               	andwf	___ftpack@arg+1,w,c
  8399  00DE96  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8400  00DE98  0EFF               	movlw	255
  8401  00DE9A  1403               	andwf	___ftpack@arg+2,w,c
  8402  00DE9C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8403  00DE9E  5006               	movf	??___ftpack,w,c
  8404  00DEA0  1007               	iorwf	??___ftpack+1,w,c
  8405  00DEA2  1008               	iorwf	??___ftpack+2,w,c
  8406  00DEA4  B4D8               	btfsc	status,2,c
  8407  00DEA6  D006               	goto	l3009
  8408  00DEA8  D7E6               	goto	l3001
  8409  00DEAA                     l3007:
  8410  00DEAA  0604               	decf	___ftpack@exp,f,c
  8411  00DEAC  90D8               	bcf	status,0,c
  8412  00DEAE  3601               	rlcf	___ftpack@arg,f,c
  8413  00DEB0  3602               	rlcf	___ftpack@arg+1,f,c
  8414  00DEB2  3603               	rlcf	___ftpack@arg+2,f,c
  8415  00DEB4                     l3009:
  8416  00DEB4  BE02               	btfsc	___ftpack@arg+1,7,c
  8417  00DEB6  D003               	goto	l800
  8418  00DEB8  0E02               	movlw	2
  8419  00DEBA  6004               	cpfslt	___ftpack@exp,c
  8420  00DEBC  D7F6               	goto	l3007
  8421  00DEBE                     l800:
  8422  00DEBE  A004               	btfss	___ftpack@exp,0,c
  8423  00DEC0  9E02               	bcf	___ftpack@arg+1,7,c
  8424  00DEC2  90D8               	bcf	status,0,c
  8425  00DEC4  3204               	rrcf	___ftpack@exp,f,c
  8426  00DEC6  5004               	movf	___ftpack@exp,w,c
  8427  00DEC8  1203               	iorwf	___ftpack@arg+2,f,c
  8428  00DECA  5005               	movf	___ftpack@sign,w,c
  8429  00DECC  A4D8               	btfss	status,2,c
  8430  00DECE  8E03               	bsf	___ftpack@arg+2,7,c
  8431  00DED0  C001  F001         	movff	___ftpack@arg,?___ftpack
  8432  00DED4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8433  00DED8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8434  00DEDC  0012               	return	
  8435  00DEDE                     __end_of___ftpack:
  8436                           	opt stack 0
  8437                           tblptru	equ	0xFF8
  8438                           tblptrh	equ	0xFF7
  8439                           tblptrl	equ	0xFF6
  8440                           tablat	equ	0xFF5
  8441                           prodh	equ	0xFF4
  8442                           prodl	equ	0xFF3
  8443                           intcon	equ	0xFF2
  8444                           intcon2	equ	0xFF1
  8445                           intcon3	equ	0xFF0
  8446                           postinc0	equ	0xFEE
  8447                           wreg	equ	0xFE8
  8448                           postdec1	equ	0xFE5
  8449                           fsr1l	equ	0xFE1
  8450                           indf2	equ	0xFDF
  8451                           postinc2	equ	0xFDE
  8452                           postdec2	equ	0xFDD
  8453                           fsr2h	equ	0xFDA
  8454                           fsr2l	equ	0xFD9
  8455                           status	equ	0xFD8
  8456                           
  8457 ;; *************** function ___ftneg *****************
  8458 ;; Defined at:
  8459 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;  f1              3    0[COMRAM] float 
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;		None
  8464 ;; Return value:  Size  Location     Type
  8465 ;;                  3    0[COMRAM] float 
  8466 ;; Registers used:
  8467 ;;		wreg, status,2, status,0
  8468 ;; Tracked objects:
  8469 ;;		On entry : 0/0
  8470 ;;		On exit  : 0/0
  8471 ;;		Unchanged: 0/0
  8472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8473 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;Total ram usage:        3 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; This function calls:
  8480 ;;		Nothing
  8481 ;; This function is called by:
  8482 ;;		_sprintf
  8483 ;;		_set_pwm1_general
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           	psect	text36
  8488  00D624                     __ptext36:
  8489                           	opt stack 0
  8490  00D624                     ___ftneg:
  8491                           	opt stack 29
  8492                           
  8493                           ;incstack = 0
  8494  00D624  5001               	movf	___ftneg@f1,w,c
  8495  00D626  1002               	iorwf	___ftneg@f1+1,w,c
  8496  00D628  1003               	iorwf	___ftneg@f1+2,w,c
  8497  00D62A  B4D8               	btfsc	status,2,c
  8498  00D62C  D006               	goto	l897
  8499  00D62E  0E00               	movlw	0
  8500  00D630  1A01               	xorwf	___ftneg@f1,f,c
  8501  00D632  0E00               	movlw	0
  8502  00D634  1A02               	xorwf	___ftneg@f1+1,f,c
  8503  00D636  0E80               	movlw	128
  8504  00D638  1A03               	xorwf	___ftneg@f1+2,f,c
  8505  00D63A                     l897:
  8506  00D63A  C001  F001         	movff	___ftneg@f1,?___ftneg
  8507  00D63E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8508  00D642  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8509  00D646  0012               	return		;funcret
  8510  00D648                     __end_of___ftneg:
  8511                           	opt stack 0
  8512                           tblptru	equ	0xFF8
  8513                           tblptrh	equ	0xFF7
  8514                           tblptrl	equ	0xFF6
  8515                           tablat	equ	0xFF5
  8516                           prodh	equ	0xFF4
  8517                           prodl	equ	0xFF3
  8518                           intcon	equ	0xFF2
  8519                           intcon2	equ	0xFF1
  8520                           intcon3	equ	0xFF0
  8521                           postinc0	equ	0xFEE
  8522                           wreg	equ	0xFE8
  8523                           postdec1	equ	0xFE5
  8524                           fsr1l	equ	0xFE1
  8525                           indf2	equ	0xFDF
  8526                           postinc2	equ	0xFDE
  8527                           postdec2	equ	0xFDD
  8528                           fsr2h	equ	0xFDA
  8529                           fsr2l	equ	0xFD9
  8530                           status	equ	0xFD8
  8531                           
  8532 ;; *************** function ___ftge *****************
  8533 ;; Defined at:
  8534 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  ff1             3    0[COMRAM] float 
  8537 ;;  ff2             3    3[COMRAM] float 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;		None
  8540 ;; Return value:  Size  Location     Type
  8541 ;;		None               void
  8542 ;; Registers used:
  8543 ;;		wreg, status,2, status,0
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8549 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8552 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;Total ram usage:        9 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; This function calls:
  8556 ;;		Nothing
  8557 ;; This function is called by:
  8558 ;;		_sprintf
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           	psect	text37
  8563  00DDA0                     __ptext37:
  8564                           	opt stack 0
  8565  00DDA0                     ___ftge:
  8566                           	opt stack 29
  8567                           
  8568                           ;incstack = 0
  8569  00DDA0  AE03               	btfss	___ftge@ff1+2,7,c
  8570  00DDA2  D016               	goto	l3465
  8571  00DDA4  C001  F007         	movff	___ftge@ff1,??___ftge
  8572  00DDA8  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  8573  00DDAC  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  8574  00DDB0  1E07               	comf	??___ftge,f,c
  8575  00DDB2  1E08               	comf	??___ftge+1,f,c
  8576  00DDB4  1E09               	comf	??___ftge+2,f,c
  8577  00DDB6  2A07               	incf	??___ftge,f,c
  8578  00DDB8  0E00               	movlw	0
  8579  00DDBA  2208               	addwfc	??___ftge+1,f,c
  8580  00DDBC  2209               	addwfc	??___ftge+2,f,c
  8581  00DDBE  0E00               	movlw	0
  8582  00DDC0  2407               	addwf	??___ftge,w,c
  8583  00DDC2  6E01               	movwf	___ftge@ff1,c
  8584  00DDC4  0E00               	movlw	0
  8585  00DDC6  2008               	addwfc	??___ftge+1,w,c
  8586  00DDC8  6E02               	movwf	___ftge@ff1+1,c
  8587  00DDCA  0E80               	movlw	128
  8588  00DDCC  2009               	addwfc	??___ftge+2,w,c
  8589  00DDCE  6E03               	movwf	___ftge@ff1+2,c
  8590  00DDD0                     l3465:
  8591  00DDD0  AE06               	btfss	___ftge@ff2+2,7,c
  8592  00DDD2  D016               	goto	l3469
  8593  00DDD4  C004  F007         	movff	___ftge@ff2,??___ftge
  8594  00DDD8  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  8595  00DDDC  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  8596  00DDE0  1E07               	comf	??___ftge,f,c
  8597  00DDE2  1E08               	comf	??___ftge+1,f,c
  8598  00DDE4  1E09               	comf	??___ftge+2,f,c
  8599  00DDE6  2A07               	incf	??___ftge,f,c
  8600  00DDE8  0E00               	movlw	0
  8601  00DDEA  2208               	addwfc	??___ftge+1,f,c
  8602  00DDEC  2209               	addwfc	??___ftge+2,f,c
  8603  00DDEE  0E00               	movlw	0
  8604  00DDF0  2407               	addwf	??___ftge,w,c
  8605  00DDF2  6E04               	movwf	___ftge@ff2,c
  8606  00DDF4  0E00               	movlw	0
  8607  00DDF6  2008               	addwfc	??___ftge+1,w,c
  8608  00DDF8  6E05               	movwf	___ftge@ff2+1,c
  8609  00DDFA  0E80               	movlw	128
  8610  00DDFC  2009               	addwfc	??___ftge+2,w,c
  8611  00DDFE  6E06               	movwf	___ftge@ff2+2,c
  8612  00DE00                     l3469:
  8613  00DE00  0E00               	movlw	0
  8614  00DE02  1A01               	xorwf	___ftge@ff1,f,c
  8615  00DE04  0E00               	movlw	0
  8616  00DE06  1A02               	xorwf	___ftge@ff1+1,f,c
  8617  00DE08  0E80               	movlw	128
  8618  00DE0A  1A03               	xorwf	___ftge@ff1+2,f,c
  8619  00DE0C  0E00               	movlw	0
  8620  00DE0E  1A04               	xorwf	___ftge@ff2,f,c
  8621  00DE10  0E00               	movlw	0
  8622  00DE12  1A05               	xorwf	___ftge@ff2+1,f,c
  8623  00DE14  0E80               	movlw	128
  8624  00DE16  1A06               	xorwf	___ftge@ff2+2,f,c
  8625  00DE18  5004               	movf	___ftge@ff2,w,c
  8626  00DE1A  5C01               	subwf	___ftge@ff1,w,c
  8627  00DE1C  5005               	movf	___ftge@ff2+1,w,c
  8628  00DE1E  5802               	subwfb	___ftge@ff1+1,w,c
  8629  00DE20  5006               	movf	___ftge@ff2+2,w,c
  8630  00DE22  5803               	subwfb	___ftge@ff1+2,w,c
  8631  00DE24  B0D8               	btfsc	status,0,c
  8632  00DE26  D002               	goto	l3475
  8633  00DE28  90D8               	bcf	status,0,c
  8634  00DE2A  0012               	return	
  8635  00DE2C                     l3475:
  8636  00DE2C  80D8               	bsf	status,0,c
  8637  00DE2E  0012               	return	
  8638  00DE30                     __end_of___ftge:
  8639                           	opt stack 0
  8640                           tblptru	equ	0xFF8
  8641                           tblptrh	equ	0xFF7
  8642                           tblptrl	equ	0xFF6
  8643                           tablat	equ	0xFF5
  8644                           prodh	equ	0xFF4
  8645                           prodl	equ	0xFF3
  8646                           intcon	equ	0xFF2
  8647                           intcon2	equ	0xFF1
  8648                           intcon3	equ	0xFF0
  8649                           postinc0	equ	0xFEE
  8650                           wreg	equ	0xFE8
  8651                           postdec1	equ	0xFE5
  8652                           fsr1l	equ	0xFE1
  8653                           indf2	equ	0xFDF
  8654                           postinc2	equ	0xFDE
  8655                           postdec2	equ	0xFDD
  8656                           fsr2h	equ	0xFDA
  8657                           fsr2l	equ	0xFD9
  8658                           status	equ	0xFD8
  8659                           
  8660 ;; *************** function _clock *****************
  8661 ;; Defined at:
  8662 ;;		line 100 in file "Assignment_two.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;		None
  8665 ;; Auto vars:     Size  Location     Type
  8666 ;;		None
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  1    wreg      void 
  8669 ;; Registers used:
  8670 ;;		wreg, status,2, status,0
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;Total ram usage:        0 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; This function calls:
  8683 ;;		Nothing
  8684 ;; This function is called by:
  8685 ;;		_main
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           	psect	text38
  8690  00DB40                     __ptext38:
  8691                           	opt stack 0
  8692  00DB40                     _clock:
  8693                           	opt stack 30
  8694                           
  8695                           ;Assignment_two.c: 101: if(s==59){
  8696                           
  8697                           ;incstack = 0
  8698  00DB40  0E3B               	movlw	59
  8699  00DB42  1873               	xorwf	_s,w,c
  8700  00DB44  1074               	iorwf	_s+1,w,c
  8701  00DB46  A4D8               	btfss	status,2,c
  8702  00DB48  D00A               	goto	l4065
  8703                           
  8704                           ;Assignment_two.c: 102: m=m+1;
  8705  00DB4A  0E01               	movlw	1
  8706  00DB4C  2471               	addwf	_m,w,c
  8707  00DB4E  6E71               	movwf	_m,c
  8708  00DB50  0E00               	movlw	0
  8709  00DB52  2072               	addwfc	_m+1,w,c
  8710  00DB54  6E72               	movwf	_m+1,c
  8711                           
  8712                           ;Assignment_two.c: 103: s=0;
  8713  00DB56  0E00               	movlw	0
  8714  00DB58  6E74               	movwf	_s+1,c
  8715  00DB5A  0E00               	movlw	0
  8716  00DB5C  6E73               	movwf	_s,c
  8717  00DB5E                     l4065:
  8718                           
  8719                           ;Assignment_two.c: 104: }
  8720                           ;Assignment_two.c: 105: if(m>59){
  8721  00DB5E  5072               	movf	_m+1,w,c
  8722  00DB60  E104               	bnz	u4370
  8723  00DB62  0E3C               	movlw	60
  8724  00DB64  5C71               	subwf	_m,w,c
  8725  00DB66  A0D8               	btfss	status,0,c
  8726  00DB68  D00A               	goto	l4071
  8727  00DB6A                     u4370:
  8728                           
  8729                           ;Assignment_two.c: 106: h=h+1;
  8730  00DB6A  0E01               	movlw	1
  8731  00DB6C  246F               	addwf	_h,w,c
  8732  00DB6E  6E6F               	movwf	_h,c
  8733  00DB70  0E00               	movlw	0
  8734  00DB72  2070               	addwfc	_h+1,w,c
  8735  00DB74  6E70               	movwf	_h+1,c
  8736                           
  8737                           ;Assignment_two.c: 107: m=0;
  8738  00DB76  0E00               	movlw	0
  8739  00DB78  6E72               	movwf	_m+1,c
  8740  00DB7A  0E00               	movlw	0
  8741  00DB7C  6E71               	movwf	_m,c
  8742  00DB7E                     l4071:
  8743                           
  8744                           ;Assignment_two.c: 108: }
  8745                           ;Assignment_two.c: 109: if(h>23){
  8746  00DB7E  5070               	movf	_h+1,w,c
  8747  00DB80  E104               	bnz	u4380
  8748  00DB82  0E18               	movlw	24
  8749  00DB84  5C6F               	subwf	_h,w,c
  8750  00DB86  A0D8               	btfss	status,0,c
  8751  00DB88  D00C               	goto	l4075
  8752  00DB8A                     u4380:
  8753                           
  8754                           ;Assignment_two.c: 110: m=0;s=0;h=0;
  8755  00DB8A  0E00               	movlw	0
  8756  00DB8C  6E72               	movwf	_m+1,c
  8757  00DB8E  0E00               	movlw	0
  8758  00DB90  6E71               	movwf	_m,c
  8759  00DB92  0E00               	movlw	0
  8760  00DB94  6E74               	movwf	_s+1,c
  8761  00DB96  0E00               	movlw	0
  8762  00DB98  6E73               	movwf	_s,c
  8763  00DB9A  0E00               	movlw	0
  8764  00DB9C  6E70               	movwf	_h+1,c
  8765  00DB9E  0E00               	movlw	0
  8766  00DBA0  6E6F               	movwf	_h,c
  8767  00DBA2                     l4075:
  8768                           
  8769                           ;Assignment_two.c: 111: }
  8770                           ;Assignment_two.c: 112: s++;
  8771  00DBA2  4A73               	infsnz	_s,f,c
  8772  00DBA4  2A74               	incf	_s+1,f,c
  8773  00DBA6  0012               	return		;funcret
  8774  00DBA8                     __end_of_clock:
  8775                           	opt stack 0
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           intcon	equ	0xFF2
  8783                           intcon2	equ	0xFF1
  8784                           intcon3	equ	0xFF0
  8785                           postinc0	equ	0xFEE
  8786                           wreg	equ	0xFE8
  8787                           postdec1	equ	0xFE5
  8788                           fsr1l	equ	0xFE1
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           postdec2	equ	0xFDD
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function _checkTimer *****************
  8797 ;; Defined at:
  8798 ;;		line 284 in file "Assignment_two.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;		None
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;		None
  8803 ;; Return value:  Size  Location     Type
  8804 ;;                  1    wreg      void 
  8805 ;; Registers used:
  8806 ;;		wreg, status,2, status,0, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;Total ram usage:        0 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    1
  8819 ;; This function calls:
  8820 ;;		_decreaseTimer
  8821 ;; This function is called by:
  8822 ;;		_main
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           	psect	text39
  8827  00D856                     __ptext39:
  8828                           	opt stack 0
  8829  00D856                     _checkTimer:
  8830                           	opt stack 29
  8831                           
  8832                           ;Assignment_two.c: 285: if(mode==0){
  8833                           
  8834                           ;incstack = 0
  8835  00D856  0100               	movlb	0	; () banked
  8836  00D858  51BC               	movf	_mode& (0+255),w,b
  8837  00D85A  0100               	movlb	0	; () banked
  8838  00D85C  11BD               	iorwf	(_mode+1)& (0+255),w,b
  8839  00D85E  A4D8               	btfss	status,2,c
  8840  00D860  D00C               	goto	l4313
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;Assignment_two.c: 286: T="OFF";
  8844  00D862  0EEB               	movlw	low (STR_21+2)
  8845  00D864  0100               	movlb	0	; () banked
  8846  00D866  6FE4               	movwf	_T& (0+255),b
  8847  00D868  0EFF               	movlw	high (STR_21+2)
  8848  00D86A  0100               	movlb	0	; () banked
  8849  00D86C  6FE5               	movwf	(_T+1)& (0+255),b
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;Assignment_two.c: 287: f1=0;
  8853  00D86E  0E00               	movlw	0
  8854  00D870  0100               	movlb	0	; () banked
  8855  00D872  6FB7               	movwf	(_f1+1)& (0+255),b
  8856  00D874  0E00               	movlw	0
  8857  00D876  6FB6               	movwf	_f1& (0+255),b
  8858                           
  8859                           ;Assignment_two.c: 288: }
  8860  00D878  0012               	return	
  8861  00D87A                     l4313:
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;Assignment_two.c: 289: else {
  8865                           ;Assignment_two.c: 290: T="ON ";
  8866  00D87A  0EE5               	movlw	low (STR_20+2)
  8867  00D87C  0100               	movlb	0	; () banked
  8868  00D87E  6FE4               	movwf	_T& (0+255),b
  8869  00D880  0EFF               	movlw	high (STR_20+2)
  8870  00D882  0100               	movlb	0	; () banked
  8871  00D884  6FE5               	movwf	(_T+1)& (0+255),b
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;Assignment_two.c: 291: f1=1;
  8875  00D886  0E00               	movlw	0
  8876  00D888  0100               	movlb	0	; () banked
  8877  00D88A  6FB7               	movwf	(_f1+1)& (0+255),b
  8878  00D88C  0E01               	movlw	1
  8879  00D88E  6FB6               	movwf	_f1& (0+255),b
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;Assignment_two.c: 292: decreaseTimer();
  8883  00D890  EC0C  F06E         	call	_decreaseTimer	;wreg free
  8884  00D894  0012               	return	
  8885  00D896                     __end_of_checkTimer:
  8886                           	opt stack 0
  8887                           tblptru	equ	0xFF8
  8888                           tblptrh	equ	0xFF7
  8889                           tblptrl	equ	0xFF6
  8890                           tablat	equ	0xFF5
  8891                           prodh	equ	0xFF4
  8892                           prodl	equ	0xFF3
  8893                           intcon	equ	0xFF2
  8894                           intcon2	equ	0xFF1
  8895                           intcon3	equ	0xFF0
  8896                           postinc0	equ	0xFEE
  8897                           wreg	equ	0xFE8
  8898                           postdec1	equ	0xFE5
  8899                           fsr1l	equ	0xFE1
  8900                           indf2	equ	0xFDF
  8901                           postinc2	equ	0xFDE
  8902                           postdec2	equ	0xFDD
  8903                           fsr2h	equ	0xFDA
  8904                           fsr2l	equ	0xFD9
  8905                           status	equ	0xFD8
  8906                           
  8907 ;; *************** function _decreaseTimer *****************
  8908 ;; Defined at:
  8909 ;;		line 265 in file "Assignment_two.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;		None
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;		None
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      void 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;Total ram usage:        0 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; This function calls:
  8930 ;;		Nothing
  8931 ;; This function is called by:
  8932 ;;		_checkTimer
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text40
  8937  00DC18                     __ptext40:
  8938                           	opt stack 0
  8939  00DC18                     _decreaseTimer:
  8940                           	opt stack 29
  8941                           
  8942                           ;Assignment_two.c: 266: if (mode == 1) {
  8943                           
  8944                           ;incstack = 0
  8945  00DC18  0100               	movlb	0	; () banked
  8946  00DC1A  05BC               	decf	_mode& (0+255),w,b
  8947  00DC1C  0100               	movlb	0	; () banked
  8948  00DC1E  11BD               	iorwf	(_mode+1)& (0+255),w,b
  8949  00DC20  A4D8               	btfss	status,2,c
  8950  00DC22  0012               	return	
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;Assignment_two.c: 267: if (sa > 0) {
  8954  00DC24  5075               	movf	_sa,w,c
  8955  00DC26  1076               	iorwf	_sa+1,w,c
  8956  00DC28  B4D8               	btfsc	status,2,c
  8957  00DC2A  D004               	goto	l3955
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;Assignment_two.c: 268: sa--;
  8961  00DC2C  0675               	decf	_sa,f,c
  8962  00DC2E  A0D8               	btfss	status,0,c
  8963  00DC30  0676               	decf	_sa+1,f,c
  8964                           
  8965                           ;Assignment_two.c: 269: } else if (ma > 0) {
  8966  00DC32  0012               	return	
  8967  00DC34                     l3955:
  8968                           
  8969                           ; BSR set to: 0
  8970  00DC34  0100               	movlb	0	; () banked
  8971  00DC36  51E6               	movf	_ma& (0+255),w,b
  8972  00DC38  0100               	movlb	0	; () banked
  8973  00DC3A  11E7               	iorwf	(_ma+1)& (0+255),w,b
  8974  00DC3C  B4D8               	btfsc	status,2,c
  8975  00DC3E  D009               	goto	l3961
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;Assignment_two.c: 270: ma--;
  8979  00DC40  0100               	movlb	0	; () banked
  8980  00DC42  07E6               	decf	_ma& (0+255),f,b
  8981  00DC44  A0D8               	btfss	status,0,c
  8982  00DC46  07E7               	decf	(_ma+1)& (0+255),f,b
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;Assignment_two.c: 271: sa = 59;
  8986  00DC48  0E00               	movlw	0
  8987  00DC4A  6E76               	movwf	_sa+1,c
  8988  00DC4C  0E3B               	movlw	59
  8989  00DC4E  6E75               	movwf	_sa,c
  8990                           
  8991                           ;Assignment_two.c: 272: } else if (ha > 0) {
  8992  00DC50  0012               	return	
  8993  00DC52                     l3961:
  8994                           
  8995                           ; BSR set to: 0
  8996  00DC52  5077               	movf	_ha,w,c
  8997  00DC54  1078               	iorwf	_ha+1,w,c
  8998  00DC56  B4D8               	btfsc	status,2,c
  8999  00DC58  D00D               	goto	l3969
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;Assignment_two.c: 273: ha--;
  9003  00DC5A  0677               	decf	_ha,f,c
  9004  00DC5C  A0D8               	btfss	status,0,c
  9005  00DC5E  0678               	decf	_ha+1,f,c
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;Assignment_two.c: 274: ma = 59;
  9009  00DC60  0E00               	movlw	0
  9010  00DC62  0100               	movlb	0	; () banked
  9011  00DC64  6FE7               	movwf	(_ma+1)& (0+255),b
  9012  00DC66  0E3B               	movlw	59
  9013  00DC68  6FE6               	movwf	_ma& (0+255),b
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;Assignment_two.c: 275: sa = 59;
  9017  00DC6A  0E00               	movlw	0
  9018  00DC6C  6E76               	movwf	_sa+1,c
  9019  00DC6E  0E3B               	movlw	59
  9020  00DC70  6E75               	movwf	_sa,c
  9021                           
  9022                           ;Assignment_two.c: 276: } else {
  9023  00DC72  0012               	return	
  9024  00DC74                     l3969:
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;Assignment_two.c: 277: ha = 0;
  9028  00DC74  0E00               	movlw	0
  9029  00DC76  6E78               	movwf	_ha+1,c
  9030  00DC78  0E00               	movlw	0
  9031  00DC7A  6E77               	movwf	_ha,c
  9032                           
  9033                           ;Assignment_two.c: 278: ma = 0;
  9034  00DC7C  0E00               	movlw	0
  9035  00DC7E  0100               	movlb	0	; () banked
  9036  00DC80  6FE7               	movwf	(_ma+1)& (0+255),b
  9037  00DC82  0E00               	movlw	0
  9038  00DC84  6FE6               	movwf	_ma& (0+255),b
  9039                           
  9040                           ;Assignment_two.c: 279: sa = 0;
  9041  00DC86  0E00               	movlw	0
  9042  00DC88  6E76               	movwf	_sa+1,c
  9043  00DC8A  0E00               	movlw	0
  9044  00DC8C  6E75               	movwf	_sa,c
  9045                           
  9046                           ;Assignment_two.c: 280: mode=0;
  9047  00DC8E  0E00               	movlw	0
  9048  00DC90  0100               	movlb	0	; () banked
  9049  00DC92  6FBD               	movwf	(_mode+1)& (0+255),b
  9050  00DC94  0E00               	movlw	0
  9051  00DC96  6FBC               	movwf	_mode& (0+255),b
  9052                           
  9053                           ; BSR set to: 0
  9054                           
  9055                           ; BSR set to: 0
  9056                           
  9057                           ; BSR set to: 0
  9058  00DC98  0012               	return	
  9059  00DC9A                     __end_of_decreaseTimer:
  9060                           	opt stack 0
  9061                           tblptru	equ	0xFF8
  9062                           tblptrh	equ	0xFF7
  9063                           tblptrl	equ	0xFF6
  9064                           tablat	equ	0xFF5
  9065                           prodh	equ	0xFF4
  9066                           prodl	equ	0xFF3
  9067                           intcon	equ	0xFF2
  9068                           intcon2	equ	0xFF1
  9069                           intcon3	equ	0xFF0
  9070                           postinc0	equ	0xFEE
  9071                           wreg	equ	0xFE8
  9072                           postdec1	equ	0xFE5
  9073                           fsr1l	equ	0xFE1
  9074                           indf2	equ	0xFDF
  9075                           postinc2	equ	0xFDE
  9076                           postdec2	equ	0xFDD
  9077                           fsr2h	equ	0xFDA
  9078                           fsr2l	equ	0xFD9
  9079                           status	equ	0xFD8
  9080                           
  9081 ;; *************** function _checkHeater *****************
  9082 ;; Defined at:
  9083 ;;		line 295 in file "Assignment_two.c"
  9084 ;; Parameters:    Size  Location     Type
  9085 ;;		None
  9086 ;; Auto vars:     Size  Location     Type
  9087 ;;		None
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  1    wreg      void 
  9090 ;; Registers used:
  9091 ;;		wreg, status,2, status,0
  9092 ;; Tracked objects:
  9093 ;;		On entry : 0/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9101 ;;Total ram usage:        0 bytes
  9102 ;; Hardware stack levels used:    1
  9103 ;; This function calls:
  9104 ;;		Nothing
  9105 ;; This function is called by:
  9106 ;;		_main
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           	psect	text41
  9111  00D7DC                     __ptext41:
  9112                           	opt stack 0
  9113  00D7DC                     _checkHeater:
  9114                           	opt stack 30
  9115                           
  9116                           ;Assignment_two.c: 296: if(heater==0){
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;incstack = 0
  9120  00D7DC  0100               	movlb	0	; () banked
  9121  00D7DE  51B8               	movf	_heater& (0+255),w,b
  9122  00D7E0  0100               	movlb	0	; () banked
  9123  00D7E2  11B9               	iorwf	(_heater+1)& (0+255),w,b
  9124  00D7E4  A4D8               	btfss	status,2,c
  9125  00D7E6  D00C               	goto	l4325
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;Assignment_two.c: 297: H="Disabled";
  9129  00D7E8  0ED3               	movlw	low STR_12
  9130  00D7EA  0100               	movlb	0	; () banked
  9131  00D7EC  6FE2               	movwf	_H& (0+255),b
  9132  00D7EE  0EFF               	movlw	high STR_12
  9133  00D7F0  0100               	movlb	0	; () banked
  9134  00D7F2  6FE3               	movwf	(_H+1)& (0+255),b
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;Assignment_two.c: 298: f=0;
  9138  00D7F4  0E00               	movlw	0
  9139  00D7F6  0100               	movlb	0	; () banked
  9140  00D7F8  6FB5               	movwf	(_f+1)& (0+255),b
  9141  00D7FA  0E00               	movlw	0
  9142  00D7FC  6FB4               	movwf	_f& (0+255),b
  9143                           
  9144                           ;Assignment_two.c: 299: }
  9145  00D7FE  0012               	return	
  9146  00D800                     l4325:
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;Assignment_two.c: 300: else {
  9150                           ;Assignment_two.c: 301: H="Enabled ";
  9151  00D800  0ECA               	movlw	low STR_13
  9152  00D802  0100               	movlb	0	; () banked
  9153  00D804  6FE2               	movwf	_H& (0+255),b
  9154  00D806  0EFF               	movlw	high STR_13
  9155  00D808  0100               	movlb	0	; () banked
  9156  00D80A  6FE3               	movwf	(_H+1)& (0+255),b
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;Assignment_two.c: 302: f=1;
  9160  00D80C  0E00               	movlw	0
  9161  00D80E  0100               	movlb	0	; () banked
  9162  00D810  6FB5               	movwf	(_f+1)& (0+255),b
  9163  00D812  0E01               	movlw	1
  9164  00D814  6FB4               	movwf	_f& (0+255),b
  9165  00D816  0012               	return	
  9166  00D818                     __end_of_checkHeater:
  9167                           	opt stack 0
  9168                           tblptru	equ	0xFF8
  9169                           tblptrh	equ	0xFF7
  9170                           tblptrl	equ	0xFF6
  9171                           tablat	equ	0xFF5
  9172                           prodh	equ	0xFF4
  9173                           prodl	equ	0xFF3
  9174                           intcon	equ	0xFF2
  9175                           intcon2	equ	0xFF1
  9176                           intcon3	equ	0xFF0
  9177                           postinc0	equ	0xFEE
  9178                           wreg	equ	0xFE8
  9179                           postdec1	equ	0xFE5
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           fsr2h	equ	0xFDA
  9185                           fsr2l	equ	0xFD9
  9186                           status	equ	0xFD8
  9187                           
  9188 ;; *************** function _SetupTimer *****************
  9189 ;; Defined at:
  9190 ;;		line 229 in file "Assignment_two.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;		None
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;		None
  9195 ;; Return value:  Size  Location     Type
  9196 ;;                  1    wreg      void 
  9197 ;; Registers used:
  9198 ;;		wreg, status,2, status,0, cstack
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;Total ram usage:        0 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    1
  9211 ;; This function calls:
  9212 ;;		_delay_ms
  9213 ;; This function is called by:
  9214 ;;		_main
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text42
  9219  00E66A                     __ptext42:
  9220                           	opt stack 0
  9221  00E66A                     _SetupTimer:
  9222                           	opt stack 29
  9223                           
  9224                           ;Assignment_two.c: 230: if(PORTBbits.RB3==0){
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;incstack = 0
  9228  00E66A  B681               	btfsc	3969,3,c	;volatile
  9229  00E66C  D05C               	goto	l4267
  9230                           
  9231                           ;Assignment_two.c: 231: delay_ms(300);
  9232  00E66E  0E01               	movlw	1
  9233  00E670  6E02               	movwf	delay_ms@n+1,c
  9234  00E672  0E2C               	movlw	44
  9235  00E674  6E01               	movwf	delay_ms@n,c
  9236  00E676  EC00  F06B         	call	_delay_ms	;wreg free
  9237                           
  9238                           ;Assignment_two.c: 232: if(mode3==2&&sa<59)
  9239  00E67A  0E02               	movlw	2
  9240  00E67C  187D               	xorwf	_mode3,w,c
  9241  00E67E  107E               	iorwf	_mode3+1,w,c
  9242  00E680  A4D8               	btfss	status,2,c
  9243  00E682  D009               	goto	l4237
  9244  00E684  5076               	movf	_sa+1,w,c
  9245  00E686  E107               	bnz	l4237
  9246  00E688  0E3B               	movlw	59
  9247  00E68A  5C75               	subwf	_sa,w,c
  9248  00E68C  B0D8               	btfsc	status,0,c
  9249  00E68E  D003               	goto	l4237
  9250                           
  9251                           ;Assignment_two.c: 233: sa++;
  9252  00E690  4A75               	infsnz	_sa,f,c
  9253  00E692  2A76               	incf	_sa+1,f,c
  9254  00E694  D00E               	goto	l4243
  9255  00E696                     l4237:
  9256                           
  9257                           ;Assignment_two.c: 234: else if(mode3==2&&sa==59)
  9258  00E696  0E02               	movlw	2
  9259  00E698  187D               	xorwf	_mode3,w,c
  9260  00E69A  107E               	iorwf	_mode3+1,w,c
  9261  00E69C  A4D8               	btfss	status,2,c
  9262  00E69E  D009               	goto	l4243
  9263  00E6A0  0E3B               	movlw	59
  9264  00E6A2  1875               	xorwf	_sa,w,c
  9265  00E6A4  1076               	iorwf	_sa+1,w,c
  9266  00E6A6  A4D8               	btfss	status,2,c
  9267  00E6A8  D004               	goto	l4243
  9268                           
  9269                           ;Assignment_two.c: 235: sa=0;
  9270  00E6AA  0E00               	movlw	0
  9271  00E6AC  6E76               	movwf	_sa+1,c
  9272  00E6AE  0E00               	movlw	0
  9273  00E6B0  6E75               	movwf	_sa,c
  9274  00E6B2                     l4243:
  9275                           
  9276                           ;Assignment_two.c: 237: if(mode3==1&&ma<59)
  9277  00E6B2  047D               	decf	_mode3,w,c
  9278  00E6B4  107E               	iorwf	_mode3+1,w,c
  9279  00E6B6  A4D8               	btfss	status,2,c
  9280  00E6B8  D00C               	goto	l4249
  9281  00E6BA  0100               	movlb	0	; () banked
  9282  00E6BC  51E7               	movf	(_ma+1)& (0+255),w,b
  9283  00E6BE  E109               	bnz	l4249
  9284  00E6C0  0E3B               	movlw	59
  9285  00E6C2  0100               	movlb	0	; () banked
  9286  00E6C4  5DE6               	subwf	_ma& (0+255),w,b
  9287  00E6C6  B0D8               	btfsc	status,0,c
  9288  00E6C8  D004               	goto	l4249
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;Assignment_two.c: 238: ma++;
  9292  00E6CA  0100               	movlb	0	; () banked
  9293  00E6CC  4BE6               	infsnz	_ma& (0+255),f,b
  9294  00E6CE  2BE7               	incf	(_ma+1)& (0+255),f,b
  9295  00E6D0  D010               	goto	l4255
  9296  00E6D2                     l4249:
  9297                           
  9298                           ;Assignment_two.c: 239: else if(mode3==1&&ma==59)
  9299  00E6D2  047D               	decf	_mode3,w,c
  9300  00E6D4  107E               	iorwf	_mode3+1,w,c
  9301  00E6D6  A4D8               	btfss	status,2,c
  9302  00E6D8  D00C               	goto	l4255
  9303  00E6DA  0E3B               	movlw	59
  9304  00E6DC  0100               	movlb	0	; () banked
  9305  00E6DE  19E6               	xorwf	_ma& (0+255),w,b
  9306  00E6E0  0100               	movlb	0	; () banked
  9307  00E6E2  11E7               	iorwf	(_ma+1)& (0+255),w,b
  9308  00E6E4  A4D8               	btfss	status,2,c
  9309  00E6E6  D005               	goto	l4255
  9310                           
  9311                           ; BSR set to: 0
  9312                           ;Assignment_two.c: 240: ma=0;
  9313  00E6E8  0E00               	movlw	0
  9314  00E6EA  0100               	movlb	0	; () banked
  9315  00E6EC  6FE7               	movwf	(_ma+1)& (0+255),b
  9316  00E6EE  0E00               	movlw	0
  9317  00E6F0  6FE6               	movwf	_ma& (0+255),b
  9318  00E6F2                     l4255:
  9319                           
  9320                           ;Assignment_two.c: 242: if(mode3==0&&ha<23)
  9321  00E6F2  507D               	movf	_mode3,w,c
  9322  00E6F4  107E               	iorwf	_mode3+1,w,c
  9323  00E6F6  A4D8               	btfss	status,2,c
  9324  00E6F8  D009               	goto	l4261
  9325  00E6FA  5078               	movf	_ha+1,w,c
  9326  00E6FC  E107               	bnz	l4261
  9327  00E6FE  0E17               	movlw	23
  9328  00E700  5C77               	subwf	_ha,w,c
  9329  00E702  B0D8               	btfsc	status,0,c
  9330  00E704  D003               	goto	l4261
  9331                           
  9332                           ;Assignment_two.c: 243: ha++;
  9333  00E706  4A77               	infsnz	_ha,f,c
  9334  00E708  2A78               	incf	_ha+1,f,c
  9335  00E70A  D00D               	goto	l4267
  9336  00E70C                     l4261:
  9337                           
  9338                           ;Assignment_two.c: 244: else if(mode3==0&&ha==23)
  9339  00E70C  507D               	movf	_mode3,w,c
  9340  00E70E  107E               	iorwf	_mode3+1,w,c
  9341  00E710  A4D8               	btfss	status,2,c
  9342  00E712  D009               	goto	l4267
  9343  00E714  0E17               	movlw	23
  9344  00E716  1877               	xorwf	_ha,w,c
  9345  00E718  1078               	iorwf	_ha+1,w,c
  9346  00E71A  A4D8               	btfss	status,2,c
  9347  00E71C  D004               	goto	l4267
  9348                           
  9349                           ;Assignment_two.c: 245: ha=0;
  9350  00E71E  0E00               	movlw	0
  9351  00E720  6E78               	movwf	_ha+1,c
  9352  00E722  0E00               	movlw	0
  9353  00E724  6E77               	movwf	_ha,c
  9354  00E726                     l4267:
  9355                           
  9356                           ;Assignment_two.c: 246: }
  9357                           ;Assignment_two.c: 248: if(PORTBbits.RB4==0){
  9358  00E726  B881               	btfsc	3969,4,c	;volatile
  9359  00E728  0012               	return	
  9360                           
  9361                           ;Assignment_two.c: 249: delay_ms(300);
  9362  00E72A  0E01               	movlw	1
  9363  00E72C  6E02               	movwf	delay_ms@n+1,c
  9364  00E72E  0E2C               	movlw	44
  9365  00E730  6E01               	movwf	delay_ms@n,c
  9366  00E732  EC00  F06B         	call	_delay_ms	;wreg free
  9367                           
  9368                           ;Assignment_two.c: 250: if(mode3==2&&sa>0)
  9369  00E736  0E02               	movlw	2
  9370  00E738  187D               	xorwf	_mode3,w,c
  9371  00E73A  107E               	iorwf	_mode3+1,w,c
  9372  00E73C  A4D8               	btfss	status,2,c
  9373  00E73E  D008               	goto	l4277
  9374  00E740  5075               	movf	_sa,w,c
  9375  00E742  1076               	iorwf	_sa+1,w,c
  9376  00E744  B4D8               	btfsc	status,2,c
  9377  00E746  D004               	goto	l4277
  9378                           
  9379                           ;Assignment_two.c: 251: sa--;
  9380  00E748  0675               	decf	_sa,f,c
  9381  00E74A  A0D8               	btfss	status,0,c
  9382  00E74C  0676               	decf	_sa+1,f,c
  9383  00E74E  D00D               	goto	l4283
  9384  00E750                     l4277:
  9385                           
  9386                           ;Assignment_two.c: 252: else if(mode3==2&&sa==0)
  9387  00E750  0E02               	movlw	2
  9388  00E752  187D               	xorwf	_mode3,w,c
  9389  00E754  107E               	iorwf	_mode3+1,w,c
  9390  00E756  A4D8               	btfss	status,2,c
  9391  00E758  D008               	goto	l4283
  9392  00E75A  5075               	movf	_sa,w,c
  9393  00E75C  1076               	iorwf	_sa+1,w,c
  9394  00E75E  A4D8               	btfss	status,2,c
  9395  00E760  D004               	goto	l4283
  9396                           
  9397                           ;Assignment_two.c: 253: sa=59;
  9398  00E762  0E00               	movlw	0
  9399  00E764  6E76               	movwf	_sa+1,c
  9400  00E766  0E3B               	movlw	59
  9401  00E768  6E75               	movwf	_sa,c
  9402  00E76A                     l4283:
  9403                           
  9404                           ;Assignment_two.c: 254: if(mode3==1&&ma>0)
  9405  00E76A  047D               	decf	_mode3,w,c
  9406  00E76C  107E               	iorwf	_mode3+1,w,c
  9407  00E76E  A4D8               	btfss	status,2,c
  9408  00E770  D00B               	goto	l4289
  9409  00E772  0100               	movlb	0	; () banked
  9410  00E774  51E6               	movf	_ma& (0+255),w,b
  9411  00E776  0100               	movlb	0	; () banked
  9412  00E778  11E7               	iorwf	(_ma+1)& (0+255),w,b
  9413  00E77A  B4D8               	btfsc	status,2,c
  9414  00E77C  D005               	goto	l4289
  9415                           
  9416                           ; BSR set to: 0
  9417                           ;Assignment_two.c: 255: ma--;
  9418  00E77E  0100               	movlb	0	; () banked
  9419  00E780  07E6               	decf	_ma& (0+255),f,b
  9420  00E782  A0D8               	btfss	status,0,c
  9421  00E784  07E7               	decf	(_ma+1)& (0+255),f,b
  9422  00E786  D00F               	goto	l4295
  9423  00E788                     l4289:
  9424                           
  9425                           ;Assignment_two.c: 256: else if(mode3==1&&ma==0)
  9426  00E788  047D               	decf	_mode3,w,c
  9427  00E78A  107E               	iorwf	_mode3+1,w,c
  9428  00E78C  A4D8               	btfss	status,2,c
  9429  00E78E  D00B               	goto	l4295
  9430  00E790  0100               	movlb	0	; () banked
  9431  00E792  51E6               	movf	_ma& (0+255),w,b
  9432  00E794  0100               	movlb	0	; () banked
  9433  00E796  11E7               	iorwf	(_ma+1)& (0+255),w,b
  9434  00E798  A4D8               	btfss	status,2,c
  9435  00E79A  D005               	goto	l4295
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;Assignment_two.c: 257: ma=59;
  9439  00E79C  0E00               	movlw	0
  9440  00E79E  0100               	movlb	0	; () banked
  9441  00E7A0  6FE7               	movwf	(_ma+1)& (0+255),b
  9442  00E7A2  0E3B               	movlw	59
  9443  00E7A4  6FE6               	movwf	_ma& (0+255),b
  9444  00E7A6                     l4295:
  9445                           
  9446                           ;Assignment_two.c: 258: if(mode3==0&&ha>0)
  9447  00E7A6  507D               	movf	_mode3,w,c
  9448  00E7A8  107E               	iorwf	_mode3+1,w,c
  9449  00E7AA  A4D8               	btfss	status,2,c
  9450  00E7AC  D008               	goto	l4301
  9451  00E7AE  5077               	movf	_ha,w,c
  9452  00E7B0  1078               	iorwf	_ha+1,w,c
  9453  00E7B2  B4D8               	btfsc	status,2,c
  9454  00E7B4  D004               	goto	l4301
  9455                           
  9456                           ;Assignment_two.c: 259: ha--;
  9457  00E7B6  0677               	decf	_ha,f,c
  9458  00E7B8  A0D8               	btfss	status,0,c
  9459  00E7BA  0678               	decf	_ha+1,f,c
  9460  00E7BC  0012               	return	
  9461  00E7BE                     l4301:
  9462                           
  9463                           ;Assignment_two.c: 260: else if(mode3==0&&ha==0)
  9464  00E7BE  507D               	movf	_mode3,w,c
  9465  00E7C0  107E               	iorwf	_mode3+1,w,c
  9466  00E7C2  A4D8               	btfss	status,2,c
  9467  00E7C4  0012               	return	
  9468  00E7C6  5077               	movf	_ha,w,c
  9469  00E7C8  1078               	iorwf	_ha+1,w,c
  9470  00E7CA  A4D8               	btfss	status,2,c
  9471  00E7CC  0012               	return	
  9472                           
  9473                           ;Assignment_two.c: 261: ha=23;
  9474  00E7CE  0E00               	movlw	0
  9475  00E7D0  6E78               	movwf	_ha+1,c
  9476  00E7D2  0E17               	movlw	23
  9477  00E7D4  6E77               	movwf	_ha,c
  9478  00E7D6  0012               	return	
  9479  00E7D8                     __end_of_SetupTimer:
  9480                           	opt stack 0
  9481                           tblptru	equ	0xFF8
  9482                           tblptrh	equ	0xFF7
  9483                           tblptrl	equ	0xFF6
  9484                           tablat	equ	0xFF5
  9485                           prodh	equ	0xFF4
  9486                           prodl	equ	0xFF3
  9487                           intcon	equ	0xFF2
  9488                           intcon2	equ	0xFF1
  9489                           intcon3	equ	0xFF0
  9490                           postinc0	equ	0xFEE
  9491                           wreg	equ	0xFE8
  9492                           postdec1	equ	0xFE5
  9493                           fsr1l	equ	0xFE1
  9494                           indf2	equ	0xFDF
  9495                           postinc2	equ	0xFDE
  9496                           postdec2	equ	0xFDD
  9497                           fsr2h	equ	0xFDA
  9498                           fsr2l	equ	0xFD9
  9499                           status	equ	0xFD8
  9500                           
  9501 ;; *************** function _SetupClock *****************
  9502 ;; Defined at:
  9503 ;;		line 192 in file "Assignment_two.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;		None
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;		None
  9508 ;; Return value:  Size  Location     Type
  9509 ;;                  1    wreg      void 
  9510 ;; Registers used:
  9511 ;;		wreg, status,2, status,0, cstack
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;Total ram usage:        0 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; Hardware stack levels required when called:    1
  9524 ;; This function calls:
  9525 ;;		_delay_ms
  9526 ;; This function is called by:
  9527 ;;		_main
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           	psect	text43
  9532  00E514                     __ptext43:
  9533                           	opt stack 0
  9534  00E514                     _SetupClock:
  9535                           	opt stack 29
  9536                           
  9537                           ;Assignment_two.c: 193: if(PORTBbits.RB3==0){
  9538                           
  9539                           ;incstack = 0
  9540  00E514  B681               	btfsc	3969,3,c	;volatile
  9541  00E516  D056               	goto	l4187
  9542                           
  9543                           ;Assignment_two.c: 194: delay_ms(300);
  9544  00E518  0E01               	movlw	1
  9545  00E51A  6E02               	movwf	delay_ms@n+1,c
  9546  00E51C  0E2C               	movlw	44
  9547  00E51E  6E01               	movwf	delay_ms@n,c
  9548  00E520  EC00  F06B         	call	_delay_ms	;wreg free
  9549                           
  9550                           ;Assignment_two.c: 195: if(mode2==2&&s<59)
  9551  00E524  0E02               	movlw	2
  9552  00E526  187B               	xorwf	_mode2,w,c
  9553  00E528  107C               	iorwf	_mode2+1,w,c
  9554  00E52A  A4D8               	btfss	status,2,c
  9555  00E52C  D009               	goto	l4157
  9556  00E52E  5074               	movf	_s+1,w,c
  9557  00E530  E107               	bnz	l4157
  9558  00E532  0E3B               	movlw	59
  9559  00E534  5C73               	subwf	_s,w,c
  9560  00E536  B0D8               	btfsc	status,0,c
  9561  00E538  D003               	goto	l4157
  9562                           
  9563                           ;Assignment_two.c: 196: s++;
  9564  00E53A  4A73               	infsnz	_s,f,c
  9565  00E53C  2A74               	incf	_s+1,f,c
  9566  00E53E  D00E               	goto	l4163
  9567  00E540                     l4157:
  9568                           
  9569                           ;Assignment_two.c: 197: else if(mode2==2&&s==59)
  9570  00E540  0E02               	movlw	2
  9571  00E542  187B               	xorwf	_mode2,w,c
  9572  00E544  107C               	iorwf	_mode2+1,w,c
  9573  00E546  A4D8               	btfss	status,2,c
  9574  00E548  D009               	goto	l4163
  9575  00E54A  0E3B               	movlw	59
  9576  00E54C  1873               	xorwf	_s,w,c
  9577  00E54E  1074               	iorwf	_s+1,w,c
  9578  00E550  A4D8               	btfss	status,2,c
  9579  00E552  D004               	goto	l4163
  9580                           
  9581                           ;Assignment_two.c: 198: s=0;
  9582  00E554  0E00               	movlw	0
  9583  00E556  6E74               	movwf	_s+1,c
  9584  00E558  0E00               	movlw	0
  9585  00E55A  6E73               	movwf	_s,c
  9586  00E55C                     l4163:
  9587                           
  9588                           ;Assignment_two.c: 200: if(mode2==1&&m<59)
  9589  00E55C  047B               	decf	_mode2,w,c
  9590  00E55E  107C               	iorwf	_mode2+1,w,c
  9591  00E560  A4D8               	btfss	status,2,c
  9592  00E562  D009               	goto	l4169
  9593  00E564  5072               	movf	_m+1,w,c
  9594  00E566  E107               	bnz	l4169
  9595  00E568  0E3B               	movlw	59
  9596  00E56A  5C71               	subwf	_m,w,c
  9597  00E56C  B0D8               	btfsc	status,0,c
  9598  00E56E  D003               	goto	l4169
  9599                           
  9600                           ;Assignment_two.c: 201: m++;
  9601  00E570  4A71               	infsnz	_m,f,c
  9602  00E572  2A72               	incf	_m+1,f,c
  9603  00E574  D00D               	goto	l4175
  9604  00E576                     l4169:
  9605                           
  9606                           ;Assignment_two.c: 202: else if(mode2==1&&m==59)
  9607  00E576  047B               	decf	_mode2,w,c
  9608  00E578  107C               	iorwf	_mode2+1,w,c
  9609  00E57A  A4D8               	btfss	status,2,c
  9610  00E57C  D009               	goto	l4175
  9611  00E57E  0E3B               	movlw	59
  9612  00E580  1871               	xorwf	_m,w,c
  9613  00E582  1072               	iorwf	_m+1,w,c
  9614  00E584  A4D8               	btfss	status,2,c
  9615  00E586  D004               	goto	l4175
  9616                           
  9617                           ;Assignment_two.c: 203: m=0;
  9618  00E588  0E00               	movlw	0
  9619  00E58A  6E72               	movwf	_m+1,c
  9620  00E58C  0E00               	movlw	0
  9621  00E58E  6E71               	movwf	_m,c
  9622  00E590                     l4175:
  9623                           
  9624                           ;Assignment_two.c: 205: if(mode2==0&&h<23)
  9625  00E590  507B               	movf	_mode2,w,c
  9626  00E592  107C               	iorwf	_mode2+1,w,c
  9627  00E594  A4D8               	btfss	status,2,c
  9628  00E596  D009               	goto	l4181
  9629  00E598  5070               	movf	_h+1,w,c
  9630  00E59A  E107               	bnz	l4181
  9631  00E59C  0E17               	movlw	23
  9632  00E59E  5C6F               	subwf	_h,w,c
  9633  00E5A0  B0D8               	btfsc	status,0,c
  9634  00E5A2  D003               	goto	l4181
  9635                           
  9636                           ;Assignment_two.c: 206: h++;
  9637  00E5A4  4A6F               	infsnz	_h,f,c
  9638  00E5A6  2A70               	incf	_h+1,f,c
  9639  00E5A8  D00D               	goto	l4187
  9640  00E5AA                     l4181:
  9641                           
  9642                           ;Assignment_two.c: 207: else if(mode2==0&&h==23)
  9643  00E5AA  507B               	movf	_mode2,w,c
  9644  00E5AC  107C               	iorwf	_mode2+1,w,c
  9645  00E5AE  A4D8               	btfss	status,2,c
  9646  00E5B0  D009               	goto	l4187
  9647  00E5B2  0E17               	movlw	23
  9648  00E5B4  186F               	xorwf	_h,w,c
  9649  00E5B6  1070               	iorwf	_h+1,w,c
  9650  00E5B8  A4D8               	btfss	status,2,c
  9651  00E5BA  D004               	goto	l4187
  9652                           
  9653                           ;Assignment_two.c: 208: h=0;
  9654  00E5BC  0E00               	movlw	0
  9655  00E5BE  6E70               	movwf	_h+1,c
  9656  00E5C0  0E00               	movlw	0
  9657  00E5C2  6E6F               	movwf	_h,c
  9658  00E5C4                     l4187:
  9659                           
  9660                           ;Assignment_two.c: 209: }
  9661                           ;Assignment_two.c: 211: if(PORTBbits.RB4==0){
  9662  00E5C4  B881               	btfsc	3969,4,c	;volatile
  9663  00E5C6  0012               	return	
  9664                           
  9665                           ;Assignment_two.c: 212: delay_ms(300);
  9666  00E5C8  0E01               	movlw	1
  9667  00E5CA  6E02               	movwf	delay_ms@n+1,c
  9668  00E5CC  0E2C               	movlw	44
  9669  00E5CE  6E01               	movwf	delay_ms@n,c
  9670  00E5D0  EC00  F06B         	call	_delay_ms	;wreg free
  9671                           
  9672                           ;Assignment_two.c: 213: if(mode2==2&&s>0)
  9673  00E5D4  0E02               	movlw	2
  9674  00E5D6  187B               	xorwf	_mode2,w,c
  9675  00E5D8  107C               	iorwf	_mode2+1,w,c
  9676  00E5DA  A4D8               	btfss	status,2,c
  9677  00E5DC  D008               	goto	l4197
  9678  00E5DE  5073               	movf	_s,w,c
  9679  00E5E0  1074               	iorwf	_s+1,w,c
  9680  00E5E2  B4D8               	btfsc	status,2,c
  9681  00E5E4  D004               	goto	l4197
  9682                           
  9683                           ;Assignment_two.c: 214: s--;
  9684  00E5E6  0673               	decf	_s,f,c
  9685  00E5E8  A0D8               	btfss	status,0,c
  9686  00E5EA  0674               	decf	_s+1,f,c
  9687  00E5EC  D00D               	goto	l4203
  9688  00E5EE                     l4197:
  9689                           
  9690                           ;Assignment_two.c: 215: else if(mode2==2&&s==0)
  9691  00E5EE  0E02               	movlw	2
  9692  00E5F0  187B               	xorwf	_mode2,w,c
  9693  00E5F2  107C               	iorwf	_mode2+1,w,c
  9694  00E5F4  A4D8               	btfss	status,2,c
  9695  00E5F6  D008               	goto	l4203
  9696  00E5F8  5073               	movf	_s,w,c
  9697  00E5FA  1074               	iorwf	_s+1,w,c
  9698  00E5FC  A4D8               	btfss	status,2,c
  9699  00E5FE  D004               	goto	l4203
  9700                           
  9701                           ;Assignment_two.c: 216: s=59;
  9702  00E600  0E00               	movlw	0
  9703  00E602  6E74               	movwf	_s+1,c
  9704  00E604  0E3B               	movlw	59
  9705  00E606  6E73               	movwf	_s,c
  9706  00E608                     l4203:
  9707                           
  9708                           ;Assignment_two.c: 217: if(mode2==1&&m>0)
  9709  00E608  047B               	decf	_mode2,w,c
  9710  00E60A  107C               	iorwf	_mode2+1,w,c
  9711  00E60C  A4D8               	btfss	status,2,c
  9712  00E60E  D008               	goto	l4209
  9713  00E610  5071               	movf	_m,w,c
  9714  00E612  1072               	iorwf	_m+1,w,c
  9715  00E614  B4D8               	btfsc	status,2,c
  9716  00E616  D004               	goto	l4209
  9717                           
  9718                           ;Assignment_two.c: 218: m--;
  9719  00E618  0671               	decf	_m,f,c
  9720  00E61A  A0D8               	btfss	status,0,c
  9721  00E61C  0672               	decf	_m+1,f,c
  9722  00E61E  D00C               	goto	l4215
  9723  00E620                     l4209:
  9724                           
  9725                           ;Assignment_two.c: 219: else if(mode2==1&&m==0)
  9726  00E620  047B               	decf	_mode2,w,c
  9727  00E622  107C               	iorwf	_mode2+1,w,c
  9728  00E624  A4D8               	btfss	status,2,c
  9729  00E626  D008               	goto	l4215
  9730  00E628  5071               	movf	_m,w,c
  9731  00E62A  1072               	iorwf	_m+1,w,c
  9732  00E62C  A4D8               	btfss	status,2,c
  9733  00E62E  D004               	goto	l4215
  9734                           
  9735                           ;Assignment_two.c: 220: m=59;
  9736  00E630  0E00               	movlw	0
  9737  00E632  6E72               	movwf	_m+1,c
  9738  00E634  0E3B               	movlw	59
  9739  00E636  6E71               	movwf	_m,c
  9740  00E638                     l4215:
  9741                           
  9742                           ;Assignment_two.c: 221: if(mode2==0&&h>0)
  9743  00E638  507B               	movf	_mode2,w,c
  9744  00E63A  107C               	iorwf	_mode2+1,w,c
  9745  00E63C  A4D8               	btfss	status,2,c
  9746  00E63E  D008               	goto	l4221
  9747  00E640  506F               	movf	_h,w,c
  9748  00E642  1070               	iorwf	_h+1,w,c
  9749  00E644  B4D8               	btfsc	status,2,c
  9750  00E646  D004               	goto	l4221
  9751                           
  9752                           ;Assignment_two.c: 222: h--;
  9753  00E648  066F               	decf	_h,f,c
  9754  00E64A  A0D8               	btfss	status,0,c
  9755  00E64C  0670               	decf	_h+1,f,c
  9756  00E64E  0012               	return	
  9757  00E650                     l4221:
  9758                           
  9759                           ;Assignment_two.c: 223: else if(mode2==0&&h==0)
  9760  00E650  507B               	movf	_mode2,w,c
  9761  00E652  107C               	iorwf	_mode2+1,w,c
  9762  00E654  A4D8               	btfss	status,2,c
  9763  00E656  0012               	return	
  9764  00E658  506F               	movf	_h,w,c
  9765  00E65A  1070               	iorwf	_h+1,w,c
  9766  00E65C  A4D8               	btfss	status,2,c
  9767  00E65E  0012               	return	
  9768                           
  9769                           ;Assignment_two.c: 224: h=23;
  9770  00E660  0E00               	movlw	0
  9771  00E662  6E70               	movwf	_h+1,c
  9772  00E664  0E17               	movlw	23
  9773  00E666  6E6F               	movwf	_h,c
  9774  00E668  0012               	return	
  9775  00E66A                     __end_of_SetupClock:
  9776                           	opt stack 0
  9777                           tblptru	equ	0xFF8
  9778                           tblptrh	equ	0xFF7
  9779                           tblptrl	equ	0xFF6
  9780                           tablat	equ	0xFF5
  9781                           prodh	equ	0xFF4
  9782                           prodl	equ	0xFF3
  9783                           intcon	equ	0xFF2
  9784                           intcon2	equ	0xFF1
  9785                           intcon3	equ	0xFF0
  9786                           postinc0	equ	0xFEE
  9787                           wreg	equ	0xFE8
  9788                           postdec1	equ	0xFE5
  9789                           fsr1l	equ	0xFE1
  9790                           indf2	equ	0xFDF
  9791                           postinc2	equ	0xFDE
  9792                           postdec2	equ	0xFDD
  9793                           fsr2h	equ	0xFDA
  9794                           fsr2l	equ	0xFD9
  9795                           status	equ	0xFD8
  9796                           
  9797 ;; *************** function _delay_ms *****************
  9798 ;; Defined at:
  9799 ;;		line 12 in file "../../OneDrive/Desktop/testtpic/testtpic/pwm_asl.X/lcd_x8.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  n               2    0[COMRAM] unsigned int 
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;  x               2    2[COMRAM] int 
  9804 ;; Return value:  Size  Location     Type
  9805 ;;                  1    wreg      void 
  9806 ;; Registers used:
  9807 ;;		wreg, status,2, status,0
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/0
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9817 ;;Total ram usage:        4 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_switchMode
  9823 ;;		_switchTimer
  9824 ;;		_switchClock
  9825 ;;		_SetupClock
  9826 ;;		_SetupTimer
  9827 ;;		_main
  9828 ;;		_lcd_send_byte
  9829 ;;		_lcd_init
  9830 ;;		_lcd_putc
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           	psect	text44
  9835  00D600                     __ptext44:
  9836                           	opt stack 0
  9837  00D600                     _delay_ms:
  9838                           	opt stack 29
  9839                           
  9840                           ;lcd_x8.c: 13: int x;
  9841                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
  9842                           
  9843                           ;incstack = 0
  9844  00D600  0E00               	movlw	0
  9845  00D602  6E04               	movwf	delay_ms@x+1,c
  9846  00D604  0E00               	movlw	0
  9847  00D606  6E03               	movwf	delay_ms@x,c
  9848  00D608  D006               	goto	l248
  9849  00D60A                     l2975:
  9850                           
  9851                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  9852  00D60A  0EFA               	movlw	250
  9853  00D60C                     u5247:
  9854  00D60C  0004               	clrwdt	
  9855  00D60E  2EE8               	decfsz	wreg,f,c
  9856  00D610  D7FD               	goto	u5247
  9857  00D612  4A03               	infsnz	delay_ms@x,f,c
  9858  00D614  2A04               	incf	delay_ms@x+1,f,c
  9859  00D616                     l248:
  9860  00D616  5003               	movf	delay_ms@x,w,c
  9861  00D618  5C01               	subwf	delay_ms@n,w,c
  9862  00D61A  5004               	movf	delay_ms@x+1,w,c
  9863  00D61C  5802               	subwfb	delay_ms@n+1,w,c
  9864  00D61E  A0D8               	btfss	status,0,c
  9865  00D620  0012               	return	
  9866  00D622  D7F3               	goto	l2975
  9867  00D624                     __end_of_delay_ms:
  9868                           	opt stack 0
  9869                           tblptru	equ	0xFF8
  9870                           tblptrh	equ	0xFF7
  9871                           tblptrl	equ	0xFF6
  9872                           tablat	equ	0xFF5
  9873                           prodh	equ	0xFF4
  9874                           prodl	equ	0xFF3
  9875                           intcon	equ	0xFF2
  9876                           intcon2	equ	0xFF1
  9877                           intcon3	equ	0xFF0
  9878                           postinc0	equ	0xFEE
  9879                           wreg	equ	0xFE8
  9880                           postdec1	equ	0xFE5
  9881                           fsr1l	equ	0xFE1
  9882                           indf2	equ	0xFDF
  9883                           postinc2	equ	0xFDE
  9884                           postdec2	equ	0xFDD
  9885                           fsr2h	equ	0xFDA
  9886                           fsr2l	equ	0xFD9
  9887                           status	equ	0xFD8
  9888                           tblptru	equ	0xFF8
  9889                           tblptrh	equ	0xFF7
  9890                           tblptrl	equ	0xFF6
  9891                           tablat	equ	0xFF5
  9892                           prodh	equ	0xFF4
  9893                           prodl	equ	0xFF3
  9894                           intcon	equ	0xFF2
  9895                           intcon2	equ	0xFF1
  9896                           intcon3	equ	0xFF0
  9897                           postinc0	equ	0xFEE
  9898                           wreg	equ	0xFE8
  9899                           postdec1	equ	0xFE5
  9900                           fsr1l	equ	0xFE1
  9901                           indf2	equ	0xFDF
  9902                           postinc2	equ	0xFDE
  9903                           postdec2	equ	0xFDD
  9904                           fsr2h	equ	0xFDA
  9905                           fsr2l	equ	0xFD9
  9906                           status	equ	0xFD8
  9907                           
  9908                           	psect	rparam
  9909  0000                     tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           intcon	equ	0xFF2
  9916                           intcon2	equ	0xFF1
  9917                           intcon3	equ	0xFF0
  9918                           postinc0	equ	0xFEE
  9919                           wreg	equ	0xFE8
  9920                           postdec1	equ	0xFE5
  9921                           fsr1l	equ	0xFE1
  9922                           indf2	equ	0xFDF
  9923                           postinc2	equ	0xFDE
  9924                           postdec2	equ	0xFDD
  9925                           fsr2h	equ	0xFDA
  9926                           fsr2l	equ	0xFD9
  9927                           status	equ	0xFD8


Data Sizes:
    Strings     156
    Constant    118
    Data        8
    BSS         54
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    110     126
    BANK0           128     48     104
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_22(CODE[7]), STR_14(CODE[4]), STR_13(CODE[9]), STR_12(CODE[9]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_21(CODE[6]), STR_20(CODE[6]), STR_19(CODE[5]), STR_18(CODE[5]), 
		 -> STR_17(CODE[15]), STR_16(CODE[15]), STR_15(CODE[6]), STR_9(CODE[11]), 
		 -> STR_8(CODE[13]), STR_7(CODE[12]), STR_6(CODE[11]), STR_5(CODE[13]), 
		 -> STR_4(CODE[12]), STR_3(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK0[32]), Buffer1(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK0[32]), Buffer1(BANK0[32]), 

    H	PTR unsigned char  size(2) Largest target is 9
		 -> STR_13(CODE[9]), STR_12(CODE[9]), STR_2(CODE[4]), 

    T	PTR unsigned char  size(2) Largest target is 4
		 -> STR_14(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    _main->_displaymode
    _switchTimer->_delay_ms
    _switchMode->_delay_ms
    _switchClock->_delay_ms
    _read_adc_voltage->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles
    _displaymode->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _SetupTimer->_delay_ms
    _SetupClock->_delay_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                48    48      0  128214
                                              0 BANK0     48    48      0
                         _SetupClock
                         _SetupTimer
                            ___ftmul
                        _checkHeater
                         _checkTimer
                              _clock
                           _delay_ms
                        _displaymode
                    _init_adc_no_lib
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                   _read_adc_voltage
                         _setupPorts
                            _sprintf
                        _switchClock
                         _switchMode
                        _switchTimer
                         _timerOnOff
 ---------------------------------------------------------------------------------
 (1) _timerOnOff                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _switchTimer                                          0     0      0     878
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _switchMode                                           0     0      0     878
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _switchClock                                          0     0      0     878
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                     9     6      3    7971
                                             39 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3003
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2264
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    5054
                                             14 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    4561
                                             13 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    2111
                                             10 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    2588
                                             10 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1528
                                              8 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                              6 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _displaymode                                          2     2      0   49937
                                            108 COMRAM     2     2      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    36     10   49937
                                             63 COMRAM    45    35     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10949
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10751
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4841
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     636
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4244
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3947
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkTimer                                           0     0      0       0
                      _decreaseTimer
 ---------------------------------------------------------------------------------
 (2) _decreaseTimer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkHeater                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetupTimer                                           0     0      0     878
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _SetupClock                                           0     0      0     878
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             4     2      2     878
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetupClock
     _delay_ms
   _SetupTimer
     _delay_ms
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _checkHeater
   _checkTimer
     _decreaseTimer
   _clock
   _delay_ms
   _displaymode
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _init_adc_no_lib
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib
   _setupPorts
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _switchClock
     _delay_ms
   _switchMode
     _delay_ms
   _switchTimer
     _delay_ms
   _timerOnOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     30      68       5       81.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6E      7E       1       99.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E6      34        0.0%
DATA                 0      0      E6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Nov 26 22:41:35 2023

           ?_read_adc_voltage 0028                             _H 00E2                             _T 00E4  
                           _a 00B0                             _c 00B2                             _f 00B4  
                           _h 006F                             _i 00BA                             _m 0071  
                           _s 0073            ??_read_adc_voltage 002B                ?_lcd_send_byte 0009  
                          _f1 00B6                  ___awdiv@sign 000C                            _ha 0077  
                ?_displaymode 0001                            _ma 00E6                            _sa 0075  
         ___wmul@multiplicand 0011                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_OSC$XT 000000                  ___ftadd@exp1 0039                  ___ftadd@exp2 0038  
                 __CFG_LVP$ON 000000                  ___ftadd@sign 0037                   __CFG_WDT$ON 000000  
                         l223 EDAC                           l217 EC96                           l318 D7B8  
                         l255 D716                           l248 D616                           l521 FAC4  
                         l800 DEBE                           l823 E81C                           l827 E846  
                         l838 E8F6                           l847 E912                           l768 E3D0  
                         l872 E502                           l865 E474                           l866 E49C  
                         l858 DF92                           l947 DD0A                           l957 DAC8  
                         l897 D63A                  __CFG_CPB$OFF 000000                           _PR2 000FCB  
                __CFG_CPD$OFF 000000                           _lcd 000F83                  ___awmod@sign 0006  
                         prod 000FF3     read_adc_voltage@raw_value 002E                           wreg 000FE8  
                 main@channel 00AF                   lcd_gotoxy@x 000C                   lcd_gotoxy@y 000B  
                ___ftdiv@cntr 0022                  ___ftdiv@sign 0027                          l3001 DE76  
                        l3005 DE8C                          l3007 DEAA                          l3009 DEB4  
                        l3105 E92E                          l3041 D952                          l4001 DF06  
                        l3115 E95E                          l3203 DD88                          l3131 E108  
                        l3125 E0E0                          l3063 E854                          l3207 DD96  
                        l3231 DBE2                          l3223 DBC8                          l3303 F140  
                        l4111 E1C4                          l4007 DF2E                          l3057 E82A  
                        l3145 E13A                          l3321 F358                          l4121 E22C  
                        l4113 E1DA                          l4105 D6B4                          l4203 E608  
                        l3091 E8C2                          l3243 DC0E                          l3235 DBF6  
                        l3227 DBD6                          l3219 DBBC                          l3155 E162  
                        l3315 F2A8                          l3307 F16A                          l4123 E242  
                        l4115 E1F0                          l3251 D8DE                          l4027 DF6C  
                        l4221 E650                          l4301 E7BE                          l3085 E8A6  
                        l3405 E2F6                          l3181 DD40                          l3229 DBDE  
                        l3149 E14A                          l3333 D5B8                          l4125 E258  
                        l4109 E1AE                          l4133 E294                          l3253 D8E2  
                        l3261 D906                          l4215 E638                          l4071 DB7E  
                        l3087 E8B0                          l3079 E884                          l3511 E066  
                        l3343 E40E                          l3191 DD62                          l3175 DD30  
                        l3239 DC00                          l3159 E172                          l4119 E206  
                        l3255 D8E6                          l4209 E620                          l4313 D87A  
                        l4065 DB5E                          l3097 E8E4                          l3089 E8BA  
                        l3521 E090                          l4129 E26E                          l3249 D8DA  
                        l4049 D77E                          l4163 E55C                          l4243 E6B2  
                        l4075 DBA2                          l3099 E8EE                          l3507 E056  
                        l3451 E3CA                          l3443 E3A6                          l3427 E368  
                        l3419 E338                          l3187 DD56                          l3283 EBA8  
                        l3275 EADC                          l3611 F478                          l3259 D8EC  
                        l4181 E5AA                          l4157 E540                          l4261 E70C  
                        l4237 E696                          l4325 D800                          l3525 E0A6  
                        l3517 E07E                          l3349 E43A                          l3189 DD5E  
                        l3621 F4D4                          l3605 F454                          l4085 D6DC  
                        l4175 E590                          l4255 E6F2                          l3519 E08A  
                        l3535 DCBC                          l3439 E396                          l3391 E4FC  
                        l3383 E4D8                          l3199 DD7E                          l3711 F766  
                        l3631 F500                          l3623 F4D8                          l3615 F4B0  
                        l4095 D704                          l4335 D752                          l4503 EDC8  
                        l4169 E576                          l4249 E6D2                          l3465 DDD0  
                        l3457 D8AC                          l3537 DCC8                          l3449 E3BE  
                        l3297 F090                          l3801 FA80                          l3713 F776  
                        l3633 F50A                          l3617 F4C8                          l4345 DA26  
                        l4505 EDD2                          l4187 E5C4                          l4283 E76A  
                        l4267 E726                          l3475 DE2C                          l3547 DCFC  
                        l3539 DCCC                          l3563 DABA                          l3555 DA86  
                        l3571 D9C8                          l3379 E4C8                          l3811 FAAE  
                        l3803 FA8A                          l3723 F7E8                          l3715 F7A4  
                        l3707 F742                          l3643 F54A                          l3635 F50E  
                        l4363 DA56                          l4355 DA44                          l4197 E5EE  
                        l4277 E750                          l3469 DE00                          l3557 DA92  
                        l3389 E4F0                          l3741 F8C4                          l3717 F7B4  
                        l3661 F5AC                          l3653 F57A                          l4349 DA2E  
                        l4509 EDDC                          l4295 E7A6                          l3559 DA96  
                        l3399 E2D8                          l3903 FD8E                          l3823 FAEA  
                        l3815 FAC8                          l3743 F8C8                          l3727 F80C  
                        l3655 F58C                          l3647 F560                          l3591 F3C2  
                        l4359 DA4E                          l4383 D64A                          l4543 EF1C  
                        l4455 ECB4                          l4289 E788                          l3489 DFF0  
                        l3569 D9BC                          l3913 FDBE                          l3921 FDDE  
                        l3905 FD96                          l3809 FAA0                          l3737 F860  
                        l3673 F60E                          l3649 F56A                          l3665 F5C0  
                        l3585 F3AA                          l4545 EF30                          l3923 FDE6  
                        l3827 FB3A                          l3771 F97A                          l3763 F950  
                        l3755 F906                          l3683 F64E                          l3667 F5FA  
                        l3587 F3BC                          l3579 F38E                          l2971 D71C  
                        l4387 D65C                          l4483 ED82                          l4467 ECF6  
                        l4459 ECBE                          l3941 FEB2                          l3845 FC44  
                        l3837 FC24                          l3597 F3F4                          l2975 D60A  
                        l3935 FE26                          l3863 FCA0                          l3839 FC2E  
                        l3791 F9E4                          l3759 F936                          l3847 FC4E  
                        l3943 FEC2                          l4495 EDA0                          l3961 DC52  
                        l2993 DE40                          l3929 FE04                          l3881 FCFE  
                        l3865 FCA4                          l3857 FC88                          l3793 F9EA  
                        l3777 F990                          l3785 F9B6                          l3945 FEDE  
                        l3955 DC34                          l3939 FEAE                          l3891 FD40  
                        l3787 F9C4                          l3779 F9A0                          l3699 F6DE  
                        l2997 DE4E                          l3885 FD1E                          l3877 FCE2  
                        l3973 D964                          l2999 DE58                          l3975 D97C  
                        l3983 D9A0                          l3969 DC74                          l3897 FD62  
                        l3977 D988                          l3899 FD6A                          l3979 D994  
                        STR_1 FFEB                          STR_2 FFEB                          STR_3 FF63  
                        STR_4 FF9C                          STR_5 FF82                          STR_6 FFB4  
                        STR_7 FFA8                          STR_8 FF8F                          STR_9 FFBF  
                        u3001 E0F0                          u3251 E3F2                          u4301 DEEE  
                        _IPR1 000F9F                          _IPR2 000FA2                          u3271 E41E  
                        _PIE1 000F9D                          _PIE2 000FA0                          u4321 DF16  
                        u3461 DFD4                          u5070 ED6E                          u3480 E00E  
                        u5080 ED70                          u4370 DB6A                          u2771 E7E8  
                        u2755 D922                          u4380 DB8A                          u2756 D924  
                        u2781 E7FC                          u3485 E006                          u5237 D94A  
                        u5247 D60C                          u5095 ED80                          u5096 ED82  
                        u3770 F686                          u2981 E0C8                          u3775 F67C  
                        _PIR1 000F9E                          _PIR2 000FA1                          u3990 FABE  
            ?_lcd_send_nibble 0001                          _main EBEE                  ___ftpack@arg 0001  
                        _mode 00BC                  ___ftpack@exp 0004                          fsr2h 000FDA  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
                        prodh 000FF4                          prodl 000FF3                          start 0000  
               __CFG_IESO$OFF 000000                   main@voltage 00A9                  _sprintf$1883 0050  
                 _switchClock D692                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 0022  
                ___param_bank 000010                  ___ftmul@sign 0023                   _switchTimer D6E2  
                ___fttol@exp1 0039                  ___fttol@lval 0035         __end_of_decreaseTimer DC9A  
        __end_of_delay_cycles D738                         ?_main 0001               __end_of___awdiv DDA0  
             __end_of___ftadd E984                         STR_10 FFEB                         STR_11 FFE5  
                       STR_20 FFE3                         STR_12 FFD3                         STR_21 FFE9  
                       STR_13 FFCA                         STR_14 FFEB                         STR_22 FFDC  
                       STR_15 FFEF                         STR_16 FF73                         STR_17 FF73  
                       STR_18 FFF5                         STR_19 FFFA               __end_of___awmod DC18  
             __end_of___ftdiv DFC4               __end_of___ftneg D648               __end_of___lldiv DD1C  
             __end_of___ftmul E1AC               ___awdiv@divisor 0009               __end_of___llmod DADA  
             __end_of___ftsub D8D6               __end_of___fttol E0B8                         _T2CON 000FCA  
        __size_of_checkHeater 003C               ___awdiv@counter 000B                         _RCREG 000FAE  
                       _RCSTA 000FAB                         _SPBRG 000FAF                         _PORTC 000F82  
     read_adc_voltage@channel 0030                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _TXREG 000FAD                         _TXSTA 000FAC                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                 ___awtoft@sign 0018  
                       _clock DB40               __end_of_dpowers FF15                         _mode1 0079  
                       _mode2 007B                         _mode3 007D                         _scale EF4A  
             __end_of_isdigit D5C0               _init_adc_no_lib D596                 ___ftpack@sign 0005  
                       tablat 000FF5                         status 000FD8       read_adc_voltage@voltage 002B  
             __end_of_sprintf FEEC                __CFG_PBADEN$ON 000000               __initialization D818  
                __end_of_main EF4A               ??_lcd_send_byte 000A                        ??_main 006F  
               ___fttol@sign1 0034                 __activetblptr 000003          __size_of__tdiv_to_l_ 0132  
                      ?_clock 0001                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0              ___llmod@dividend 000E                        ?_scale 0024  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        _CCPR1L 000FBE  
            ___awdiv@dividend 0007              __end_of___awtoft D7A2              __end_of___ftpack DEDE  
            __end_of___lltoft DA12                        _INTCON 000FF2                        _SPBRGH 000FB0  
            __end_of_delay_ms D624                __CFG_XINST$OFF 000000              __end_of__powers_ FF63  
            __end_of_lcd_init DA74              __end_of_lcd_putc D9B6              __end_of_lcd_puts D66C  
                      ___ftge DDA0                        ___wmul D66C                     ??___awdiv 000B  
                   ??___ftadd 0034                __CFG_STVREN$ON 000000                     ??___awmod 0005  
                   ??___ftdiv 001F                     ??___ftneg 0004                     ??___lldiv 0009  
                   ??___ftmul 001B                     ??___llmod 0016                     ??___ftsub 0040  
                   ??___fttol 002F                        _heater 00B8                    _SetupClock E514  
                      _fround E984                        clear_0 D81E                        clear_1 D82A  
            ___awdiv@quotient 000D               ___awmod@divisor 0003                    _SetupTimer E66A  
             ___awmod@counter 0005                        main@AN 00A0          __size_of_displaymode 010E  
       ___ftmul@f3_as_product 001F       __end_of_init_adc_no_lib D5A2                     ??_isdigit 0001  
                __mediumconst FEEC                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_sprintf 004A                    __accesstop 0080  
     __end_of__initialization D850                    ___ftadd@f1 002E                    ___ftadd@f2 0031  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004                 ___rparam_used 000001  
                  ___ftdiv@f1 0019                    ___ftdiv@f2 001C                    ___ftdiv@f3 0023  
                  ___ftneg@f1 0001                    ___awtoft@c 0015                    ___ftmul@f1 0015  
                  ___ftmul@f2 0018                    ___ftsub@f1 003A                    ___ftsub@f2 003D  
                  ___fttol@f1 002B                __pcstackCOMRAM 0001         __size_of_delay_cycles 002E  
                __pidataBANK0 D58E                    ___lltoft@c 0009                 __end_of_clock DBA8  
               __end_of_scale F382                    __div_to_l_ E2BA     __size_of_read_adc_voltage 0066  
           lcd_gotoxy@address 000D                       ??_clock 0001               __div_to_l_@exp1 000C  
             __div_to_l_@cntr 000B                       ??_scale 0027               __div_to_l_@quot 0007  
                sprintf@width 0068                    _checkTimer D856                    __pbssBANK0 00B0  
 __end_of_read_adc_raw_no_lib D7DC                  _delay_cycles D70A                    __pnvCOMRAM 006F  
               __div_to_l_@f1 0001                 __div_to_l_@f2 0004                  ?_switchClock 0001  
              lcd_send_byte@n 0009                  ?_switchTimer 0001                       ?___ftge 0001  
                     ?___wmul 000F              lcd_send_nibble@n 0008                       _CCP1CON 000FBD  
                 ?_SetupClock 0001                       ?_fround 0024                     ?___awtoft 0015  
                   ?___ftpack 0001                   ?_SetupTimer 0001                     ?___lltoft 0009  
            ?_init_adc_no_lib 0001                       _INTCON2 000FF1                       _INTCON3 000FF0  
                   ?_delay_ms 0001                    _lcd_gotoxy D8D6                     ?_lcd_init 0001  
                   ?_lcd_putc 0001                     ?_lcd_puts 000F                       _Buffer1 00BE  
           __end_of__npowers_ FF3C                       __Hparam 0000                    _scale$1882 0027  
                     __Lparam 0000      __size_of_lcd_send_nibble 0022               __size_of___ftge 0090  
                     ___awdiv DD1C                       ___ftadd E7D8                       ___awmod DBA8  
                     ___ftdiv DEDE                       ___ftneg D624                       ___lldiv DC9A  
             __size_of___wmul 0026                       ___ftmul E0B8                       ___llmod DA74  
                     ___ftsub D896                       ___fttol DFC4                 ??_checkHeater 0001  
                     __pcinit D818                    ??___awtoft 0018                    ??___ftpack 0006  
             __size_of_fround 026A                       __ramtop 1000                    ??___lltoft 000D  
                     __ptext0 EBEE                       __ptext1 D738                       __ptext2 D6E2  
                     __ptext3 D6BA                       __ptext4 D692                       __ptext5 D5C0  
                     __ptext6 DADA                       __ptext7 D7A2                       __ptext8 DEDE  
                     __ptext9 D76A                   ?__div_to_l_ 0001                       _dpowers FEED  
                   _T2CONbits 000FCA                       _isdigit D5A2              ___awmod@dividend 0001  
                  ??_delay_ms 0003                       _sprintf F382                    ??_lcd_init 000B  
                  ??_lcd_putc 000E                    ??_lcd_puts 0011          end_of_initialization D850  
                 ?_checkTimer 0001           __size_of_SetupClock 0156          lcd_send_byte@cm_data 000A  
         __size_of_SetupTimer 016E        __size_of_decreaseTimer 0082               ___lldiv@divisor 0005  
             ___lldiv@counter 000D                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
              __tdiv_to_l_@f1 0001                __tdiv_to_l_@f2 0004         __end_of_lcd_send_byte D960  
                  _timerOnOff D738                 ??__tdiv_to_l_ 0007                     _PORTBbits 000F81  
                   _PORTCbits 000F82                     _PORTEbits 000F84                    _setupPorts D5C0  
         __end_of_checkHeater D818              _read_adc_voltage DADA                     _TRISCbits 000F94  
                 ?_lcd_gotoxy 000B                    main@Buffer 0080               _LCD_INIT_STRING 00DE  
                 _CCP1CONbits 000FBD                   ___ftdiv@exp 0026                     _TXSTAbits 000FAC  
         __size_of__div_to_l_ 0128                   ___ftmul@exp 001E                    _switchMode D6BA  
        __size_of_switchClock 0028                __end_of___ftge DE30                 ??_displaymode 006D  
        __size_of_switchTimer 0028                __end_of___wmul D692                   _BAUDCONbits 000FB8  
         __size_of_checkTimer 0040                 delay_cycles@n 0004                 delay_cycles@x 0005  
           ??_lcd_send_nibble 0007                 _decreaseTimer DC18                __end_of_fround EBEE  
         start_initialization D818           __end_of__tdiv_to_l_ E514               ___llmod@divisor 0012  
             ___llmod@counter 0016                      ??___ftge 0007           __size_of_lcd_gotoxy 0042  
                    ??___wmul 0013                   __pdataBANK0 00DE                  ??_SetupClock 0005  
read_adc_raw_no_lib@raw_value 0005              __CFG_LPT1OSC$OFF 000000                   ?_timerOnOff 0001  
                    ??_fround 0027                   _checkHeater D7DC                  ??_SetupTimer 0005  
              ?_decreaseTimer 0001                 sprintf@tmpval 0059                   ?_setupPorts 0001  
                  fround@prec 002D             __size_of___awtoft 0038             __size_of___ftpack 00AE  
           __size_of___lltoft 005C                   __pbssCOMRAM 0077           __end_of_displaymode E2BA  
               __pcstackBANK0 0080                  _isdigit$1492 0002             __size_of_delay_ms 0024  
           __size_of_lcd_init 0062                   sprintf@flag 0063             __size_of_lcd_putc 0056  
           __size_of_lcd_puts 0024                   sprintf@fval 0065            __end_of_SetupClock E66A  
                 sprintf@prec 006A            __end_of_SetupTimer E7D8                     __pnvBANK0 00E6  
                   _main$1879 00AC             __CFG_CCP2MX$PORTC 000000                   ?_switchMode 0001  
__size_of_read_adc_raw_no_lib 003A                 __pmediumconst FEEC                      ?___awdiv 0007  
                    ?___ftadd 002E                      ?___awmod 0001                      ?___ftdiv 0019  
                    ?___ftneg 0001                      ?___lldiv 0001                      ?___ftmul 0015  
                    ?___llmod 000E                      ?___ftsub 003A                     __npowers_ FF15  
                    ?___fttol 002B                   __tdiv_to_l_ E3E2                  ??__div_to_l_ 0007  
                    ?_isdigit 0001                __size_of_clock 0068                      ?_sprintf 0040  
              __size_of_scale 0438                  ??_checkTimer 0001      __size_of_init_adc_no_lib 000C  
         __size_of_timerOnOff 0032                ___wmul@product 0013                     delay_ms@n 0001  
                   delay_ms@x 0003           __size_of_setupPorts 001E                      _PIR1bits 000F9E  
          __end_of__div_to_l_ E3E2      __end_of_read_adc_voltage DB40                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 0007               ??_decreaseTimer 0001  
                 _displaymode E1AC            __end_of_checkTimer D896                    _ADCON0bits 000FC2  
           ___wmul@multiplier 000F                     lcd_init@i 000B                     lcd_putc@c 000E  
                   lcd_puts@s 000F                  ??_lcd_gotoxy 000C           __size_of_switchMode 0028  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 D844  
             _lcd_send_nibble D5DE                      __Hrparam 0000                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_lcd_gotoxy D918              __size_of___awdiv 0084  
            __size_of___ftadd 01AC              __size_of___awmod 0070              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024              __size_of___lldiv 0082              __size_of___ftmul 00F4  
            __size_of___llmod 0066              __size_of___ftsub 0040              __size_of___fttol 00F4  
                    ___awtoft D76A                      ___ftpack DE30                   _fround$1880 002A  
                 _fround$1881 0027                      ___lltoft D9B6                    sprintf@len 0057  
                  sprintf@exp 0061                    sprintf@val 005D              __size_of_isdigit 001E  
                    _delay_ms D600                      __ptext10 D648                      __ptext11 D960  
                    __ptext20 EF4A                      __ptext12 D8D6                      __ptext21 D5A2  
                    __ptext13 DA12                      __ptext30 DA74                      __ptext22 E984  
                    __ptext14 D918                      __ptext31 DC9A                      __ptext23 D66C  
                    __ptext15 D5DE                      __ptext40 DC18                      __ptext32 DFC4  
                    __ptext24 E0B8                      __ptext16 D70A                      __ptext41 D7DC  
                    __ptext33 D896                      __ptext25 DBA8                      __ptext17 D596  
                    __ptext42 E66A                      __ptext34 E7D8                      __ptext26 DD1C  
                    __ptext18 E1AC                      __ptext43 E514                      __ptext35 DE30  
                    __ptext27 E3E2                      __ptext19 F382                      __ptext44 D600  
                    __ptext36 D624                      __ptext28 E2BA                      __ptext37 DDA0  
                    __ptext29 D9B6                      __ptext38 DB40                      __ptext39 D856  
                    __powers_ FF3C                      _lcd_init DA12                      _lcd_putc D960  
                    _lcd_puts D648              __size_of_sprintf 0B6A        __size_of_lcd_send_byte 0048  
               ?_delay_cycles 0001                 __size_of_main 035C                 ??_switchClock 0005  
           ??_init_adc_no_lib 0001                 ??_switchTimer 0005                  ??_timerOnOff 0001  
                ?_checkHeater 0001                  ??_setupPorts 0001                    _INTCONbits 000FF2  
                    isdigit@c 0003           _read_adc_raw_no_lib D7A2                      scale@scl 002A  
                   sprintf@ap 0055                     sprintf@cp 0053       __end_of_lcd_send_nibble D600  
            __tdiv_to_l_@exp1 000F                     sprintf@sp 0040              __tdiv_to_l_@cntr 000E  
              ??_delay_cycles 0001              __tdiv_to_l_@quot 000A              ___lldiv@dividend 0001  
          __end_of_timerOnOff D76A            __end_of_setupPorts D5DE                  ??_switchMode 0005  
        ?_read_adc_raw_no_lib 0001           __end_of_switchClock D6BA                 _lcd_send_byte D918  
                ?__tdiv_to_l_ 0001           __end_of_switchTimer D70A                      sprintf@c 006C  
                    sprintf@f 0042              ___lldiv@quotient 0009            __end_of_switchMode D6E2  
       ??_read_adc_raw_no_lib 0003  
